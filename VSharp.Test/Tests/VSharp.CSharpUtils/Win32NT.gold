METHOD: System.Int32 VSharp.CSharpUtils.TryCatch.SafeFunc(System.Int32)
RESULT: 1
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.TryCatch ==> STRUCT VSharp.CSharpUtils.TryCatch[]
METHOD: System.Boolean VSharp.CSharpUtils.TryCatch.MakeOdd(System.Int32)
RESULT: !(0 == n % 2) & !(n <= 0) & 1 == n % 2 | !(n <= 0) & (1 + n) % 2 == 1 & 0 == n % 2 | (-n + 1) % 2 == 1 & n <= 0 | 0 == n
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> STRUCT System.ArgumentException[
	| System.ArgumentException.m_paramName ~> null
	| System.Exception._HResult ~> -2147024809
	| System.Exception._className ~> null
	| System.Exception._data ~> null
	| System.Exception._dynamicMethods ~> null
	| System.Exception._exceptionMethod ~> null
	| System.Exception._exceptionMethodString ~> null
	| System.Exception._helpURL ~> null
	| System.Exception._innerException ~> null
	| System.Exception._ipForWatsonBuckets ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]
	| System.Exception._message ~> (HeapRef 2)
	| System.Exception._remoteStackIndex ~> 0
	| System.Exception._remoteStackTraceString ~> null
	| System.Exception._safeSerializationManager ~> (HeapRef 4)
	| System.Exception._source ~> null
	| System.Exception._stackTrace ~> null
	| System.Exception._stackTraceString ~> null
	| System.Exception._watsonBuckets ~> null
	| System.Exception._xcode ~> -532462766
	| System.Exception._xptrs ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> 0]]
10 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'N';
		1: 'o';
		2: 't';
		3: ' ';
		4: 'o';
		5: 'd';
		6: 'd';
		7: '!';
		8: '\000';
		 ... 9 ... |]
	| System.String.m_StringLength ~> 8]
11 ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.m_realObject ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_realType ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_savedSerializationInfo ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_serializedStates ~> null]
2 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'A';
		10: 'h';
		11: 'o';
		12: 'u';
		13: 'l';
		14: 'd';
		15: ' ';
		16: 'n';
		17: 'o';
		18: 't';
		19: ' ';
		1: 'r';
		20: 'b';
		21: 'e';
		22: ' ';
		23: 'z';
		24: 'e';
		25: 'r';
		26: 'o';
		27: '!';
		28: '\000';
		2: 'g';
		3: 'u';
		4: 'm';
		5: 'e';
		6: 'n';
		7: 't';
		8: ' ';
		9: 's';
		 ... 29 ... |]
	| System.String.m_StringLength ~> 28]
3 ==> STRUCT System.Object[]
4 ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.m_realObject ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_realType ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_savedSerializationInfo ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_serializedStates ~> null]
5 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'C';
		10: 'r';
		11: 'i';
		12: 'a';
		13: 'l';
		14: 'i';
		15: 'z';
		16: 'a';
		17: 't';
		18: 'i';
		19: 'o';
		1: 'L';
		20: 'n';
		21: 'M';
		22: 'a';
		23: 'n';
		24: 'a';
		25: 'g';
		26: 'e';
		27: 'r';
		28: '_';
		29: 'R';
		2: 'R';
		30: 'e';
		31: 'a';
		32: 'l';
		33: 'T';
		34: 'y';
		35: 'p';
		36: 'e';
		37: '\000';
		3: '_';
		4: 'S';
		5: 'a';
		6: 'f';
		7: 'e';
		8: 'S';
		9: 'e';
		 ... 38 ... |]
	| System.String.m_StringLength ~> 37]
6 ==> STRUCT System.InvalidOperationException[
	| System.Exception._HResult ~> -2146233079
	| System.Exception._className ~> null
	| System.Exception._data ~> null
	| System.Exception._dynamicMethods ~> null
	| System.Exception._exceptionMethod ~> null
	| System.Exception._exceptionMethodString ~> null
	| System.Exception._helpURL ~> null
	| System.Exception._innerException ~> null
	| System.Exception._ipForWatsonBuckets ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]
	| System.Exception._message ~> (HeapRef 7)
	| System.Exception._remoteStackIndex ~> 0
	| System.Exception._remoteStackTraceString ~> null
	| System.Exception._safeSerializationManager ~> (HeapRef 8)
	| System.Exception._source ~> null
	| System.Exception._stackTrace ~> null
	| System.Exception._stackTraceString ~> null
	| System.Exception._watsonBuckets ~> null
	| System.Exception._xcode ~> -532462766
	| System.Exception._xptrs ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> 0]]
7 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'H';
		10: 't';
		11: 'i';
		12: 'v';
		13: 'e';
		14: ' ';
		15: 'n';
		16: 'u';
		17: 'm';
		18: 'b';
		19: 'e';
		1: 'm';
		20: 'r';
		21: 's';
		22: ' ';
		23: 'a';
		24: 'r';
		25: 'e';
		26: ' ';
		27: 'a';
		28: 'l';
		29: 's';
		2: 'm';
		30: 'o';
		31: ' ';
		32: 'n';
		33: 'o';
		34: 't';
		35: ' ';
		36: 'a';
		37: 'l';
		38: 'l';
		39: 'o';
		3: '.';
		40: 'w';
		41: 'e';
		42: 'd';
		43: '!';
		44: '\000';
		4: '.';
		5: ' ';
		6: 'n';
		7: 'e';
		8: 'g';
		9: 'a';
		 ... 45 ... |]
	| System.String.m_StringLength ~> 44]
8 ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.m_realObject ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_realType ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_savedSerializationInfo ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_serializedStates ~> null]
9 ==> STRUCT System.Exception[
	| System.Exception._HResult ~> -2146233088
	| System.Exception._className ~> null
	| System.Exception._data ~> null
	| System.Exception._dynamicMethods ~> null
	| System.Exception._exceptionMethod ~> null
	| System.Exception._exceptionMethodString ~> null
	| System.Exception._helpURL ~> null
	| System.Exception._innerException ~> null
	| System.Exception._ipForWatsonBuckets ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]
	| System.Exception._message ~> (HeapRef 10)
	| System.Exception._remoteStackIndex ~> 0
	| System.Exception._remoteStackTraceString ~> null
	| System.Exception._safeSerializationManager ~> (HeapRef 11)
	| System.Exception._source ~> null
	| System.Exception._stackTrace ~> null
	| System.Exception._stackTraceString ~> null
	| System.Exception._watsonBuckets ~> null
	| System.Exception._xcode ~> -532462766
	| System.Exception._xptrs ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> 0]]
---------- s1 = ----------
System.ArgumentException ==> STRUCT System.ArgumentException[]
System.Exception ==> STRUCT System.Exception[
	| System.Exception._COMPlusExceptionCode ~> -532462766
	| System.Exception.s_EDILock ~> (HeapRef 3)]
System.IntPtr ==> STRUCT System.IntPtr[
	| System.IntPtr.Zero ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]]
System.InvalidOperationException ==> STRUCT System.InvalidOperationException[]
System.Object ==> STRUCT System.Object[]
System.Runtime.Serialization.SafeSerializationManager ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.RealTypeSerializationName ~> (HeapRef 5)]
System.SystemException ==> STRUCT System.SystemException[]
System.UIntPtr ==> STRUCT System.UIntPtr[
	| System.UIntPtr.Zero ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]]
System.ValueType ==> STRUCT System.ValueType[]
VSharp.CSharpUtils.TryCatch ==> STRUCT VSharp.CSharpUtils.TryCatch[]
METHOD: System.Int32 VSharp.CSharpUtils.TryCatch.ThrowNull(System.Int32)
RESULT: -2147467261
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> STRUCT System.NullReferenceException[
	| System.Exception._HResult ~> -2147467261
	| System.Exception._className ~> null
	| System.Exception._data ~> null
	| System.Exception._dynamicMethods ~> null
	| System.Exception._exceptionMethod ~> null
	| System.Exception._exceptionMethodString ~> null
	| System.Exception._helpURL ~> null
	| System.Exception._innerException ~> null
	| System.Exception._ipForWatsonBuckets ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]
	| System.Exception._message ~> (HeapRef 3)
	| System.Exception._remoteStackIndex ~> 0
	| System.Exception._remoteStackTraceString ~> null
	| System.Exception._safeSerializationManager ~> (HeapRef 5)
	| System.Exception._source ~> null
	| System.Exception._stackTrace ~> null
	| System.Exception._stackTraceString ~> null
	| System.Exception._watsonBuckets ~> null
	| System.Exception._xcode ~> -532462766
	| System.Exception._xptrs ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> 0]]
2 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'A';
		10: 'f';
		11: 'e';
		12: 'r';
		13: 'e';
		14: 'n';
		15: 'c';
		16: 'e';
		17: 'E';
		18: 'x';
		19: 'c';
		1: 'r';
		20: 'e';
		21: 'p';
		22: 't';
		23: 'i';
		24: 'o';
		25: 'n';
		26: '\000';
		2: 'g';
		3: '_';
		4: 'N';
		5: 'u';
		6: 'l';
		7: 'l';
		8: 'R';
		9: 'e';
		 ... 27 ... |]
	| System.String.m_StringLength ~> 26]
3 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'G';
		10: 's';
		11: 'o';
		12: 'u';
		13: 'r';
		14: 'c';
		15: 'e';
		16: ' ';
		17: 's';
		18: 't';
		19: 'r';
		1: 'e';
		20: 'i';
		21: 'n';
		22: 'g';
		23: 's';
		24: ' ';
		25: 'c';
		26: 'u';
		27: 'r';
		28: 'r';
		29: 'e';
		2: 't';
		30: 'n';
		31: 't';
		32: 'l';
		33: 'y';
		34: ' ';
		35: 'n';
		36: 'o';
		37: 't';
		38: ' ';
		39: 's';
		3: 't';
		40: 'u';
		41: 'p';
		42: 'p';
		43: 'o';
		44: 'r';
		45: 't';
		46: 'e';
		47: 'd';
		48: '!';
		49: '\000';
		4: 'i';
		5: 'n';
		6: 'g';
		7: ' ';
		8: 'r';
		9: 'e';
		 ... 50 ... |]
	| System.String.m_StringLength ~> 49]
4 ==> STRUCT System.Object[]
5 ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.m_realObject ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_realType ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_savedSerializationInfo ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_serializedStates ~> null]
6 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'C';
		10: 'r';
		11: 'i';
		12: 'a';
		13: 'l';
		14: 'i';
		15: 'z';
		16: 'a';
		17: 't';
		18: 'i';
		19: 'o';
		1: 'L';
		20: 'n';
		21: 'M';
		22: 'a';
		23: 'n';
		24: 'a';
		25: 'g';
		26: 'e';
		27: 'r';
		28: '_';
		29: 'R';
		2: 'R';
		30: 'e';
		31: 'a';
		32: 'l';
		33: 'T';
		34: 'y';
		35: 'p';
		36: 'e';
		37: '\000';
		3: '_';
		4: 'S';
		5: 'a';
		6: 'f';
		7: 'e';
		8: 'S';
		9: 'e';
		 ... 38 ... |]
	| System.String.m_StringLength ~> 37]
---------- s1 = ----------
System.Environment ==> STRUCT System.Environment[
	| System.Environment.MaxEnvVariableValueLength ~> 32767
	| System.Environment.MaxMachineNameLength ~> 256
	| System.Environment.MaxSystemEnvVariableLength ~> 1024
	| System.Environment.MaxUserEnvVariableLength ~> 255
	| System.Environment.isUserNonInteractive ~> False
	| System.Environment.m_os ~> null
	| System.Environment.m_resHelper ~> null
	| System.Environment.processWinStation ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]
	| System.Environment.s_CheckedOSWin8OrAbove ~> False
	| System.Environment.s_CheckedWinRT ~> False
	| System.Environment.s_InternalSyncObject ~> null
	| System.Environment.s_IsWindows8OrAbove ~> False
	| System.Environment.s_WinRTSupported ~> False]
System.Exception ==> STRUCT System.Exception[
	| System.Exception._COMPlusExceptionCode ~> -532462766
	| System.Exception.s_EDILock ~> (HeapRef 4)]
System.IntPtr ==> STRUCT System.IntPtr[
	| System.IntPtr.Zero ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]]
System.NullReferenceException ==> STRUCT System.NullReferenceException[]
System.Object ==> STRUCT System.Object[]
System.Runtime.Serialization.SafeSerializationManager ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.RealTypeSerializationName ~> (HeapRef 6)]
System.SystemException ==> STRUCT System.SystemException[]
System.UIntPtr ==> STRUCT System.UIntPtr[
	| System.UIntPtr.Zero ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]]
System.ValueType ==> STRUCT System.ValueType[]
VSharp.CSharpUtils.TryCatch ==> STRUCT VSharp.CSharpUtils.TryCatch[]
METHOD: System.Int32 VSharp.CSharpUtils.TryCatch.UsingTest()
RESULT: 67
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> STRUCT VSharp.CSharpUtils.TryCatch+MyDispose[
	| VSharp.CSharpUtils.TryCatch+MyDispose.X_field ~> (HeapRef 2)]
2 ==> [|
	0: 10;
	 ... 1 ... |]
---------- s1 = ----------
System.IDisposable ==> STRUCT System.IDisposable[]
System.Object ==> STRUCT System.Object[]
VSharp.CSharpUtils.TryCatch+MyDispose ==> STRUCT VSharp.CSharpUtils.TryCatch+MyDispose[]
VSharp.CSharpUtils.TryCatch ==> STRUCT VSharp.CSharpUtils.TryCatch[]
METHOD: System.Int32 VSharp.CSharpUtils.TryCatch.UsingTestWithInheritance()
RESULT: 67
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> STRUCT VSharp.CSharpUtils.TryCatch+AnotherDisposable[
	| VSharp.CSharpUtils.TryCatch+MyDispose.X_field ~> (HeapRef 2)]
2 ==> [|
	0: 10;
	 ... 1 ... |]
---------- s1 = ----------
System.IDisposable ==> STRUCT System.IDisposable[]
System.Object ==> STRUCT System.Object[]
VSharp.CSharpUtils.TryCatch+AnotherDisposable ==> STRUCT VSharp.CSharpUtils.TryCatch+AnotherDisposable[]
VSharp.CSharpUtils.TryCatch+MyDispose ==> STRUCT VSharp.CSharpUtils.TryCatch+MyDispose[]
VSharp.CSharpUtils.TryCatch ==> STRUCT VSharp.CSharpUtils.TryCatch[]
METHOD: System.Int32 VSharp.CSharpUtils.TryCatch.UsingTestWithInheritance1()
RESULT: 77
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> STRUCT VSharp.CSharpUtils.TryCatch+AnotherDisposable1[
	| VSharp.CSharpUtils.TryCatch+MyDispose.X_field ~> (HeapRef 2)]
2 ==> [|
	0: 20;
	 ... 1 ... |]
---------- s1 = ----------
System.IDisposable ==> STRUCT System.IDisposable[]
System.Object ==> STRUCT System.Object[]
VSharp.CSharpUtils.TryCatch+AnotherDisposable1 ==> STRUCT VSharp.CSharpUtils.TryCatch+AnotherDisposable1[]
VSharp.CSharpUtils.TryCatch+MyDispose ==> STRUCT VSharp.CSharpUtils.TryCatch+MyDispose[]
VSharp.CSharpUtils.TryCatch ==> STRUCT VSharp.CSharpUtils.TryCatch[]
METHOD: System.Int32 VSharp.CSharpUtils.TryCatch.AnotherUsingTestWithInheritance1()
RESULT: 67
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> STRUCT VSharp.CSharpUtils.TryCatch+YetAnotherDisposable1[
	| VSharp.CSharpUtils.TryCatch+MyDispose.X_field ~> (HeapRef 2)]
2 ==> [|
	0: 10;
	 ... 1 ... |]
---------- s1 = ----------
System.IDisposable ==> STRUCT System.IDisposable[]
System.Object ==> STRUCT System.Object[]
VSharp.CSharpUtils.TryCatch+MyDispose ==> STRUCT VSharp.CSharpUtils.TryCatch+MyDispose[]
VSharp.CSharpUtils.TryCatch+YetAnotherDisposable1 ==> STRUCT VSharp.CSharpUtils.TryCatch+YetAnotherDisposable1[]
VSharp.CSharpUtils.TryCatch ==> STRUCT VSharp.CSharpUtils.TryCatch[]
METHOD: System.Int32 VSharp.CSharpUtils.TryCatch.AnotherUsingTestWithInheritance2()
RESULT: 87
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> STRUCT VSharp.CSharpUtils.TryCatch+YetAnotherDisposable2[
	| VSharp.CSharpUtils.TryCatch+MyDispose.X_field ~> (HeapRef 2)]
2 ==> [|
	0: 30;
	 ... 1 ... |]
---------- s1 = ----------
System.IDisposable ==> STRUCT System.IDisposable[]
System.Object ==> STRUCT System.Object[]
VSharp.CSharpUtils.TryCatch+MyDispose ==> STRUCT VSharp.CSharpUtils.TryCatch+MyDispose[]
VSharp.CSharpUtils.TryCatch+YetAnotherDisposable2 ==> STRUCT VSharp.CSharpUtils.TryCatch+YetAnotherDisposable2[]
VSharp.CSharpUtils.TryCatch ==> STRUCT VSharp.CSharpUtils.TryCatch[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Arithmetics.ArithmeticsMethod1(System.Int32, System.Int32)
RESULT: UNION[
	| !(0 == m) ~> 7 + n
	| 0 == m ~> <ERROR: (HeapRef 1)>]
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> STRUCT System.DivideByZeroException[
	| System.Exception._HResult ~> -2147352558
	| System.Exception._className ~> null
	| System.Exception._data ~> null
	| System.Exception._dynamicMethods ~> null
	| System.Exception._exceptionMethod ~> null
	| System.Exception._exceptionMethodString ~> null
	| System.Exception._helpURL ~> null
	| System.Exception._innerException ~> null
	| System.Exception._ipForWatsonBuckets ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]
	| System.Exception._message ~> (HeapRef 3)
	| System.Exception._remoteStackIndex ~> 0
	| System.Exception._remoteStackTraceString ~> null
	| System.Exception._safeSerializationManager ~> (HeapRef 5)
	| System.Exception._source ~> null
	| System.Exception._stackTrace ~> null
	| System.Exception._stackTraceString ~> null
	| System.Exception._watsonBuckets ~> null
	| System.Exception._xcode ~> -532462766
	| System.Exception._xptrs ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> 0]]
10 ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.m_realObject ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_realType ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_savedSerializationInfo ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_serializedStates ~> null]
2 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'A';
		10: 'B';
		11: 'y';
		12: 'Z';
		13: 'e';
		14: 'r';
		15: 'o';
		16: '\000';
		1: 'r';
		2: 'g';
		3: '_';
		4: 'D';
		5: 'i';
		6: 'v';
		7: 'i';
		8: 'd';
		9: 'e';
		 ... 17 ... |]
	| System.String.m_StringLength ~> 16]
3 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'G';
		10: 's';
		11: 'o';
		12: 'u';
		13: 'r';
		14: 'c';
		15: 'e';
		16: ' ';
		17: 's';
		18: 't';
		19: 'r';
		1: 'e';
		20: 'i';
		21: 'n';
		22: 'g';
		23: 's';
		24: ' ';
		25: 'c';
		26: 'u';
		27: 'r';
		28: 'r';
		29: 'e';
		2: 't';
		30: 'n';
		31: 't';
		32: 'l';
		33: 'y';
		34: ' ';
		35: 'n';
		36: 'o';
		37: 't';
		38: ' ';
		39: 's';
		3: 't';
		40: 'u';
		41: 'p';
		42: 'p';
		43: 'o';
		44: 'r';
		45: 't';
		46: 'e';
		47: 'd';
		48: '!';
		49: '\000';
		4: 'i';
		5: 'n';
		6: 'g';
		7: ' ';
		8: 'r';
		9: 'e';
		 ... 50 ... |]
	| System.String.m_StringLength ~> 49]
4 ==> STRUCT System.Object[]
5 ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.m_realObject ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_realType ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_savedSerializationInfo ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_serializedStates ~> null]
6 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'C';
		10: 'r';
		11: 'i';
		12: 'a';
		13: 'l';
		14: 'i';
		15: 'z';
		16: 'a';
		17: 't';
		18: 'i';
		19: 'o';
		1: 'L';
		20: 'n';
		21: 'M';
		22: 'a';
		23: 'n';
		24: 'a';
		25: 'g';
		26: 'e';
		27: 'r';
		28: '_';
		29: 'R';
		2: 'R';
		30: 'e';
		31: 'a';
		32: 'l';
		33: 'T';
		34: 'y';
		35: 'p';
		36: 'e';
		37: '\000';
		3: '_';
		4: 'S';
		5: 'a';
		6: 'f';
		7: 'e';
		8: 'S';
		9: 'e';
		 ... 38 ... |]
	| System.String.m_StringLength ~> 37]
7 ==> STRUCT System.DivideByZeroException[
	| System.Exception._HResult ~> -2147352558
	| System.Exception._className ~> null
	| System.Exception._data ~> null
	| System.Exception._dynamicMethods ~> null
	| System.Exception._exceptionMethod ~> null
	| System.Exception._exceptionMethodString ~> null
	| System.Exception._helpURL ~> null
	| System.Exception._innerException ~> null
	| System.Exception._ipForWatsonBuckets ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]
	| System.Exception._message ~> (HeapRef 9)
	| System.Exception._remoteStackIndex ~> 0
	| System.Exception._remoteStackTraceString ~> null
	| System.Exception._safeSerializationManager ~> (HeapRef 10)
	| System.Exception._source ~> null
	| System.Exception._stackTrace ~> null
	| System.Exception._stackTraceString ~> null
	| System.Exception._watsonBuckets ~> null
	| System.Exception._xcode ~> -532462766
	| System.Exception._xptrs ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> 0]]
8 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'A';
		10: 'B';
		11: 'y';
		12: 'Z';
		13: 'e';
		14: 'r';
		15: 'o';
		16: '\000';
		1: 'r';
		2: 'g';
		3: '_';
		4: 'D';
		5: 'i';
		6: 'v';
		7: 'i';
		8: 'd';
		9: 'e';
		 ... 17 ... |]
	| System.String.m_StringLength ~> 16]
9 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'G';
		10: 's';
		11: 'o';
		12: 'u';
		13: 'r';
		14: 'c';
		15: 'e';
		16: ' ';
		17: 's';
		18: 't';
		19: 'r';
		1: 'e';
		20: 'i';
		21: 'n';
		22: 'g';
		23: 's';
		24: ' ';
		25: 'c';
		26: 'u';
		27: 'r';
		28: 'r';
		29: 'e';
		2: 't';
		30: 'n';
		31: 't';
		32: 'l';
		33: 'y';
		34: ' ';
		35: 'n';
		36: 'o';
		37: 't';
		38: ' ';
		39: 's';
		3: 't';
		40: 'u';
		41: 'p';
		42: 'p';
		43: 'o';
		44: 'r';
		45: 't';
		46: 'e';
		47: 'd';
		48: '!';
		49: '\000';
		4: 'i';
		5: 'n';
		6: 'g';
		7: ' ';
		8: 'r';
		9: 'e';
		 ... 50 ... |]
	| System.String.m_StringLength ~> 49]
---------- s1 = ----------
System.ArithmeticException ==> STRUCT System.ArithmeticException[]
System.DivideByZeroException ==> STRUCT System.DivideByZeroException[]
System.Environment ==> STRUCT System.Environment[
	| System.Environment.MaxEnvVariableValueLength ~> 32767
	| System.Environment.MaxMachineNameLength ~> 256
	| System.Environment.MaxSystemEnvVariableLength ~> 1024
	| System.Environment.MaxUserEnvVariableLength ~> 255
	| System.Environment.isUserNonInteractive ~> False
	| System.Environment.m_os ~> null
	| System.Environment.m_resHelper ~> null
	| System.Environment.processWinStation ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]
	| System.Environment.s_CheckedOSWin8OrAbove ~> False
	| System.Environment.s_CheckedWinRT ~> False
	| System.Environment.s_InternalSyncObject ~> null
	| System.Environment.s_IsWindows8OrAbove ~> False
	| System.Environment.s_WinRTSupported ~> False]
System.Exception ==> STRUCT System.Exception[
	| System.Exception._COMPlusExceptionCode ~> -532462766
	| System.Exception.s_EDILock ~> (HeapRef 4)]
System.IntPtr ==> STRUCT System.IntPtr[
	| System.IntPtr.Zero ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]]
System.Object ==> STRUCT System.Object[]
System.Runtime.Serialization.SafeSerializationManager ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.RealTypeSerializationName ~> (HeapRef 6)]
System.SystemException ==> STRUCT System.SystemException[]
System.UIntPtr ==> STRUCT System.UIntPtr[
	| System.UIntPtr.Zero ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]]
System.ValueType ==> STRUCT System.ValueType[]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Arithmetics.ArithmeticsMethod2(System.Int32, System.Int32)
RESULT: 0
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Arithmetics.ArithmeticsMethod3(System.Int32, System.Int32, System.Int32)
RESULT: -11 + c
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Arithmetics.ArithmeticsMethod4(System.Int32, System.Int32)
RESULT: UNION[
	| !(0 == m * m * m) ~> -126826 + n + n + n + n + n + n
	| 0 == m * m * m ~> <ERROR: (HeapRef 1)>]
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> STRUCT System.DivideByZeroException[
	| System.Exception._HResult ~> -2147352558
	| System.Exception._className ~> null
	| System.Exception._data ~> null
	| System.Exception._dynamicMethods ~> null
	| System.Exception._exceptionMethod ~> null
	| System.Exception._exceptionMethodString ~> null
	| System.Exception._helpURL ~> null
	| System.Exception._innerException ~> null
	| System.Exception._ipForWatsonBuckets ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]
	| System.Exception._message ~> (HeapRef 3)
	| System.Exception._remoteStackIndex ~> 0
	| System.Exception._remoteStackTraceString ~> null
	| System.Exception._safeSerializationManager ~> (HeapRef 5)
	| System.Exception._source ~> null
	| System.Exception._stackTrace ~> null
	| System.Exception._stackTraceString ~> null
	| System.Exception._watsonBuckets ~> null
	| System.Exception._xcode ~> -532462766
	| System.Exception._xptrs ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> 0]]
2 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'A';
		10: 'B';
		11: 'y';
		12: 'Z';
		13: 'e';
		14: 'r';
		15: 'o';
		16: '\000';
		1: 'r';
		2: 'g';
		3: '_';
		4: 'D';
		5: 'i';
		6: 'v';
		7: 'i';
		8: 'd';
		9: 'e';
		 ... 17 ... |]
	| System.String.m_StringLength ~> 16]
3 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'G';
		10: 's';
		11: 'o';
		12: 'u';
		13: 'r';
		14: 'c';
		15: 'e';
		16: ' ';
		17: 's';
		18: 't';
		19: 'r';
		1: 'e';
		20: 'i';
		21: 'n';
		22: 'g';
		23: 's';
		24: ' ';
		25: 'c';
		26: 'u';
		27: 'r';
		28: 'r';
		29: 'e';
		2: 't';
		30: 'n';
		31: 't';
		32: 'l';
		33: 'y';
		34: ' ';
		35: 'n';
		36: 'o';
		37: 't';
		38: ' ';
		39: 's';
		3: 't';
		40: 'u';
		41: 'p';
		42: 'p';
		43: 'o';
		44: 'r';
		45: 't';
		46: 'e';
		47: 'd';
		48: '!';
		49: '\000';
		4: 'i';
		5: 'n';
		6: 'g';
		7: ' ';
		8: 'r';
		9: 'e';
		 ... 50 ... |]
	| System.String.m_StringLength ~> 49]
4 ==> STRUCT System.Object[]
5 ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.m_realObject ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_realType ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_savedSerializationInfo ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_serializedStates ~> null]
6 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'C';
		10: 'r';
		11: 'i';
		12: 'a';
		13: 'l';
		14: 'i';
		15: 'z';
		16: 'a';
		17: 't';
		18: 'i';
		19: 'o';
		1: 'L';
		20: 'n';
		21: 'M';
		22: 'a';
		23: 'n';
		24: 'a';
		25: 'g';
		26: 'e';
		27: 'r';
		28: '_';
		29: 'R';
		2: 'R';
		30: 'e';
		31: 'a';
		32: 'l';
		33: 'T';
		34: 'y';
		35: 'p';
		36: 'e';
		37: '\000';
		3: '_';
		4: 'S';
		5: 'a';
		6: 'f';
		7: 'e';
		8: 'S';
		9: 'e';
		 ... 38 ... |]
	| System.String.m_StringLength ~> 37]
---------- s1 = ----------
System.ArithmeticException ==> STRUCT System.ArithmeticException[]
System.DivideByZeroException ==> STRUCT System.DivideByZeroException[]
System.Environment ==> STRUCT System.Environment[
	| System.Environment.MaxEnvVariableValueLength ~> 32767
	| System.Environment.MaxMachineNameLength ~> 256
	| System.Environment.MaxSystemEnvVariableLength ~> 1024
	| System.Environment.MaxUserEnvVariableLength ~> 255
	| System.Environment.isUserNonInteractive ~> False
	| System.Environment.m_os ~> null
	| System.Environment.m_resHelper ~> null
	| System.Environment.processWinStation ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]
	| System.Environment.s_CheckedOSWin8OrAbove ~> False
	| System.Environment.s_CheckedWinRT ~> False
	| System.Environment.s_InternalSyncObject ~> null
	| System.Environment.s_IsWindows8OrAbove ~> False
	| System.Environment.s_WinRTSupported ~> False]
System.Exception ==> STRUCT System.Exception[
	| System.Exception._COMPlusExceptionCode ~> -532462766
	| System.Exception.s_EDILock ~> (HeapRef 4)]
System.IntPtr ==> STRUCT System.IntPtr[
	| System.IntPtr.Zero ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]]
System.Object ==> STRUCT System.Object[]
System.Runtime.Serialization.SafeSerializationManager ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.RealTypeSerializationName ~> (HeapRef 6)]
System.SystemException ==> STRUCT System.SystemException[]
System.UIntPtr ==> STRUCT System.UIntPtr[
	| System.UIntPtr.Zero ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]]
System.ValueType ==> STRUCT System.ValueType[]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Arithmetics.IncrementsWorkCorrect(System.Int32)
RESULT: True
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Arithmetics.Decreasing(System.Int32)
RESULT: True
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Arithmetics.CheckedUnchecked(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)
RESULT: checked(x0 + unchecked(checked(x2 + x3 + x4) + x1) + unchecked(-(x6 * x7) + x5))
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Arithmetics.CheckOverflow1(System.Int32)
RESULT: <ERROR: (HeapRef 1)>
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> STRUCT System.OverflowException[
	| System.Exception._HResult ~> -2146233066
	| System.Exception._className ~> null
	| System.Exception._data ~> null
	| System.Exception._dynamicMethods ~> null
	| System.Exception._exceptionMethod ~> null
	| System.Exception._exceptionMethodString ~> null
	| System.Exception._helpURL ~> null
	| System.Exception._innerException ~> null
	| System.Exception._ipForWatsonBuckets ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]
	| System.Exception._message ~> (HeapRef 3)
	| System.Exception._remoteStackIndex ~> 0
	| System.Exception._remoteStackTraceString ~> null
	| System.Exception._safeSerializationManager ~> (HeapRef 5)
	| System.Exception._source ~> null
	| System.Exception._stackTrace ~> null
	| System.Exception._stackTraceString ~> null
	| System.Exception._watsonBuckets ~> null
	| System.Exception._xcode ~> -532462766
	| System.Exception._xptrs ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> 0]]
2 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'A';
		10: 'o';
		11: 'w';
		12: 'E';
		13: 'x';
		14: 'c';
		15: 'e';
		16: 'p';
		17: 't';
		18: 'i';
		19: 'o';
		1: 'r';
		20: 'n';
		21: '\000';
		2: 'g';
		3: '_';
		4: 'O';
		5: 'v';
		6: 'e';
		7: 'r';
		8: 'f';
		9: 'l';
		 ... 22 ... |]
	| System.String.m_StringLength ~> 21]
3 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'G';
		10: 's';
		11: 'o';
		12: 'u';
		13: 'r';
		14: 'c';
		15: 'e';
		16: ' ';
		17: 's';
		18: 't';
		19: 'r';
		1: 'e';
		20: 'i';
		21: 'n';
		22: 'g';
		23: 's';
		24: ' ';
		25: 'c';
		26: 'u';
		27: 'r';
		28: 'r';
		29: 'e';
		2: 't';
		30: 'n';
		31: 't';
		32: 'l';
		33: 'y';
		34: ' ';
		35: 'n';
		36: 'o';
		37: 't';
		38: ' ';
		39: 's';
		3: 't';
		40: 'u';
		41: 'p';
		42: 'p';
		43: 'o';
		44: 'r';
		45: 't';
		46: 'e';
		47: 'd';
		48: '!';
		49: '\000';
		4: 'i';
		5: 'n';
		6: 'g';
		7: ' ';
		8: 'r';
		9: 'e';
		 ... 50 ... |]
	| System.String.m_StringLength ~> 49]
4 ==> STRUCT System.Object[]
5 ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.m_realObject ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_realType ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_savedSerializationInfo ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_serializedStates ~> null]
6 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'C';
		10: 'r';
		11: 'i';
		12: 'a';
		13: 'l';
		14: 'i';
		15: 'z';
		16: 'a';
		17: 't';
		18: 'i';
		19: 'o';
		1: 'L';
		20: 'n';
		21: 'M';
		22: 'a';
		23: 'n';
		24: 'a';
		25: 'g';
		26: 'e';
		27: 'r';
		28: '_';
		29: 'R';
		2: 'R';
		30: 'e';
		31: 'a';
		32: 'l';
		33: 'T';
		34: 'y';
		35: 'p';
		36: 'e';
		37: '\000';
		3: '_';
		4: 'S';
		5: 'a';
		6: 'f';
		7: 'e';
		8: 'S';
		9: 'e';
		 ... 38 ... |]
	| System.String.m_StringLength ~> 37]
---------- s1 = ----------
System.ArithmeticException ==> STRUCT System.ArithmeticException[]
System.Environment ==> STRUCT System.Environment[
	| System.Environment.MaxEnvVariableValueLength ~> 32767
	| System.Environment.MaxMachineNameLength ~> 256
	| System.Environment.MaxSystemEnvVariableLength ~> 1024
	| System.Environment.MaxUserEnvVariableLength ~> 255
	| System.Environment.isUserNonInteractive ~> False
	| System.Environment.m_os ~> null
	| System.Environment.m_resHelper ~> null
	| System.Environment.processWinStation ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]
	| System.Environment.s_CheckedOSWin8OrAbove ~> False
	| System.Environment.s_CheckedWinRT ~> False
	| System.Environment.s_InternalSyncObject ~> null
	| System.Environment.s_IsWindows8OrAbove ~> False
	| System.Environment.s_WinRTSupported ~> False]
System.Exception ==> STRUCT System.Exception[
	| System.Exception._COMPlusExceptionCode ~> -532462766
	| System.Exception.s_EDILock ~> (HeapRef 4)]
System.IntPtr ==> STRUCT System.IntPtr[
	| System.IntPtr.Zero ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]]
System.Object ==> STRUCT System.Object[]
System.OverflowException ==> STRUCT System.OverflowException[]
System.Runtime.Serialization.SafeSerializationManager ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.RealTypeSerializationName ~> (HeapRef 6)]
System.SystemException ==> STRUCT System.SystemException[]
System.UIntPtr ==> STRUCT System.UIntPtr[
	| System.UIntPtr.Zero ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]]
System.ValueType ==> STRUCT System.ValueType[]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Arithmetics.CheckOverflow2(System.Int32)
RESULT: <ERROR: (HeapRef 1)>
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> STRUCT System.OverflowException[
	| System.Exception._HResult ~> -2146233066
	| System.Exception._className ~> null
	| System.Exception._data ~> null
	| System.Exception._dynamicMethods ~> null
	| System.Exception._exceptionMethod ~> null
	| System.Exception._exceptionMethodString ~> null
	| System.Exception._helpURL ~> null
	| System.Exception._innerException ~> null
	| System.Exception._ipForWatsonBuckets ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]
	| System.Exception._message ~> (HeapRef 3)
	| System.Exception._remoteStackIndex ~> 0
	| System.Exception._remoteStackTraceString ~> null
	| System.Exception._safeSerializationManager ~> (HeapRef 5)
	| System.Exception._source ~> null
	| System.Exception._stackTrace ~> null
	| System.Exception._stackTraceString ~> null
	| System.Exception._watsonBuckets ~> null
	| System.Exception._xcode ~> -532462766
	| System.Exception._xptrs ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> 0]]
2 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'A';
		10: 'o';
		11: 'w';
		12: 'E';
		13: 'x';
		14: 'c';
		15: 'e';
		16: 'p';
		17: 't';
		18: 'i';
		19: 'o';
		1: 'r';
		20: 'n';
		21: '\000';
		2: 'g';
		3: '_';
		4: 'O';
		5: 'v';
		6: 'e';
		7: 'r';
		8: 'f';
		9: 'l';
		 ... 22 ... |]
	| System.String.m_StringLength ~> 21]
3 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'G';
		10: 's';
		11: 'o';
		12: 'u';
		13: 'r';
		14: 'c';
		15: 'e';
		16: ' ';
		17: 's';
		18: 't';
		19: 'r';
		1: 'e';
		20: 'i';
		21: 'n';
		22: 'g';
		23: 's';
		24: ' ';
		25: 'c';
		26: 'u';
		27: 'r';
		28: 'r';
		29: 'e';
		2: 't';
		30: 'n';
		31: 't';
		32: 'l';
		33: 'y';
		34: ' ';
		35: 'n';
		36: 'o';
		37: 't';
		38: ' ';
		39: 's';
		3: 't';
		40: 'u';
		41: 'p';
		42: 'p';
		43: 'o';
		44: 'r';
		45: 't';
		46: 'e';
		47: 'd';
		48: '!';
		49: '\000';
		4: 'i';
		5: 'n';
		6: 'g';
		7: ' ';
		8: 'r';
		9: 'e';
		 ... 50 ... |]
	| System.String.m_StringLength ~> 49]
4 ==> STRUCT System.Object[]
5 ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.m_realObject ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_realType ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_savedSerializationInfo ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_serializedStates ~> null]
6 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'C';
		10: 'r';
		11: 'i';
		12: 'a';
		13: 'l';
		14: 'i';
		15: 'z';
		16: 'a';
		17: 't';
		18: 'i';
		19: 'o';
		1: 'L';
		20: 'n';
		21: 'M';
		22: 'a';
		23: 'n';
		24: 'a';
		25: 'g';
		26: 'e';
		27: 'r';
		28: '_';
		29: 'R';
		2: 'R';
		30: 'e';
		31: 'a';
		32: 'l';
		33: 'T';
		34: 'y';
		35: 'p';
		36: 'e';
		37: '\000';
		3: '_';
		4: 'S';
		5: 'a';
		6: 'f';
		7: 'e';
		8: 'S';
		9: 'e';
		 ... 38 ... |]
	| System.String.m_StringLength ~> 37]
---------- s1 = ----------
System.ArithmeticException ==> STRUCT System.ArithmeticException[]
System.Environment ==> STRUCT System.Environment[
	| System.Environment.MaxEnvVariableValueLength ~> 32767
	| System.Environment.MaxMachineNameLength ~> 256
	| System.Environment.MaxSystemEnvVariableLength ~> 1024
	| System.Environment.MaxUserEnvVariableLength ~> 255
	| System.Environment.isUserNonInteractive ~> False
	| System.Environment.m_os ~> null
	| System.Environment.m_resHelper ~> null
	| System.Environment.processWinStation ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]
	| System.Environment.s_CheckedOSWin8OrAbove ~> False
	| System.Environment.s_CheckedWinRT ~> False
	| System.Environment.s_InternalSyncObject ~> null
	| System.Environment.s_IsWindows8OrAbove ~> False
	| System.Environment.s_WinRTSupported ~> False]
System.Exception ==> STRUCT System.Exception[
	| System.Exception._COMPlusExceptionCode ~> -532462766
	| System.Exception.s_EDILock ~> (HeapRef 4)]
System.IntPtr ==> STRUCT System.IntPtr[
	| System.IntPtr.Zero ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]]
System.Object ==> STRUCT System.Object[]
System.OverflowException ==> STRUCT System.OverflowException[]
System.Runtime.Serialization.SafeSerializationManager ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.RealTypeSerializationName ~> (HeapRef 6)]
System.SystemException ==> STRUCT System.SystemException[]
System.UIntPtr ==> STRUCT System.UIntPtr[
	| System.UIntPtr.Zero ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]]
System.ValueType ==> STRUCT System.ValueType[]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.CheckOverflow3(System.Double)
RESULT: Infinity + x1
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Arithmetics.CheckDivideByZeroException0(System.Int32)
RESULT: <ERROR: (HeapRef 1)>
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> STRUCT System.DivideByZeroException[
	| System.Exception._HResult ~> -2147352558
	| System.Exception._className ~> null
	| System.Exception._data ~> null
	| System.Exception._dynamicMethods ~> null
	| System.Exception._exceptionMethod ~> null
	| System.Exception._exceptionMethodString ~> null
	| System.Exception._helpURL ~> null
	| System.Exception._innerException ~> null
	| System.Exception._ipForWatsonBuckets ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]
	| System.Exception._message ~> (HeapRef 3)
	| System.Exception._remoteStackIndex ~> 0
	| System.Exception._remoteStackTraceString ~> null
	| System.Exception._safeSerializationManager ~> (HeapRef 5)
	| System.Exception._source ~> null
	| System.Exception._stackTrace ~> null
	| System.Exception._stackTraceString ~> null
	| System.Exception._watsonBuckets ~> null
	| System.Exception._xcode ~> -532462766
	| System.Exception._xptrs ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> 0]]
2 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'A';
		10: 'B';
		11: 'y';
		12: 'Z';
		13: 'e';
		14: 'r';
		15: 'o';
		16: '\000';
		1: 'r';
		2: 'g';
		3: '_';
		4: 'D';
		5: 'i';
		6: 'v';
		7: 'i';
		8: 'd';
		9: 'e';
		 ... 17 ... |]
	| System.String.m_StringLength ~> 16]
3 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'G';
		10: 's';
		11: 'o';
		12: 'u';
		13: 'r';
		14: 'c';
		15: 'e';
		16: ' ';
		17: 's';
		18: 't';
		19: 'r';
		1: 'e';
		20: 'i';
		21: 'n';
		22: 'g';
		23: 's';
		24: ' ';
		25: 'c';
		26: 'u';
		27: 'r';
		28: 'r';
		29: 'e';
		2: 't';
		30: 'n';
		31: 't';
		32: 'l';
		33: 'y';
		34: ' ';
		35: 'n';
		36: 'o';
		37: 't';
		38: ' ';
		39: 's';
		3: 't';
		40: 'u';
		41: 'p';
		42: 'p';
		43: 'o';
		44: 'r';
		45: 't';
		46: 'e';
		47: 'd';
		48: '!';
		49: '\000';
		4: 'i';
		5: 'n';
		6: 'g';
		7: ' ';
		8: 'r';
		9: 'e';
		 ... 50 ... |]
	| System.String.m_StringLength ~> 49]
4 ==> STRUCT System.Object[]
5 ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.m_realObject ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_realType ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_savedSerializationInfo ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_serializedStates ~> null]
6 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'C';
		10: 'r';
		11: 'i';
		12: 'a';
		13: 'l';
		14: 'i';
		15: 'z';
		16: 'a';
		17: 't';
		18: 'i';
		19: 'o';
		1: 'L';
		20: 'n';
		21: 'M';
		22: 'a';
		23: 'n';
		24: 'a';
		25: 'g';
		26: 'e';
		27: 'r';
		28: '_';
		29: 'R';
		2: 'R';
		30: 'e';
		31: 'a';
		32: 'l';
		33: 'T';
		34: 'y';
		35: 'p';
		36: 'e';
		37: '\000';
		3: '_';
		4: 'S';
		5: 'a';
		6: 'f';
		7: 'e';
		8: 'S';
		9: 'e';
		 ... 38 ... |]
	| System.String.m_StringLength ~> 37]
---------- s1 = ----------
System.ArithmeticException ==> STRUCT System.ArithmeticException[]
System.Byte ==> STRUCT System.Byte[
	| System.Byte.MaxValue ~> 255
	| System.Byte.MinValue ~> 0]
System.DivideByZeroException ==> STRUCT System.DivideByZeroException[]
System.Environment ==> STRUCT System.Environment[
	| System.Environment.MaxEnvVariableValueLength ~> 32767
	| System.Environment.MaxMachineNameLength ~> 256
	| System.Environment.MaxSystemEnvVariableLength ~> 1024
	| System.Environment.MaxUserEnvVariableLength ~> 255
	| System.Environment.isUserNonInteractive ~> False
	| System.Environment.m_os ~> null
	| System.Environment.m_resHelper ~> null
	| System.Environment.processWinStation ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]
	| System.Environment.s_CheckedOSWin8OrAbove ~> False
	| System.Environment.s_CheckedWinRT ~> False
	| System.Environment.s_InternalSyncObject ~> null
	| System.Environment.s_IsWindows8OrAbove ~> False
	| System.Environment.s_WinRTSupported ~> False]
System.Exception ==> STRUCT System.Exception[
	| System.Exception._COMPlusExceptionCode ~> -532462766
	| System.Exception.s_EDILock ~> (HeapRef 4)]
System.IntPtr ==> STRUCT System.IntPtr[
	| System.IntPtr.Zero ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]]
System.Object ==> STRUCT System.Object[]
System.Runtime.Serialization.SafeSerializationManager ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.RealTypeSerializationName ~> (HeapRef 6)]
System.SystemException ==> STRUCT System.SystemException[]
System.UIntPtr ==> STRUCT System.UIntPtr[
	| System.UIntPtr.Zero ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]]
System.ValueType ==> STRUCT System.ValueType[]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Arithmetics.CheckOrder(System.Int32)
RESULT: checked(2000000000 + x1 + 2000000000)
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Arithmetics.ShiftLeftOnZero(System.Int32)
RESULT: a
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.ZeroShift(System.Int32)
RESULT: 0
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Arithmetics.DefaultShift(System.Int32, System.Int32)
RESULT: a << b
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Int64 VSharp.CSharpUtils.Tests.Arithmetics.SumShifts(System.Int64)
RESULT: a << 32
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Arithmetics.ShiftSum(System.Int32)
RESULT: 0
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Arithmetics.MultiplyOnShift1(System.Int16)
RESULT: (System.Int32)a << 19
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Arithmetics.MultiplyOnShift2(System.Int16)
RESULT: (System.Int32)a << 16
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Arithmetics.ShiftMultiplication(System.Int16)
RESULT: 0
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Arithmetics.ShiftDevision1(System.Byte)
RESULT: ((System.Int32)a >> 20) / 1024
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Arithmetics.ShiftDevision2(System.Int32)
RESULT: a / 512 >> 12
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.UInt32 VSharp.CSharpUtils.Tests.Arithmetics.ShiftDevision3(System.UInt32)
RESULT: 0
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.UInt64 VSharp.CSharpUtils.Tests.Arithmetics.ShiftDevision4(System.UInt64)
RESULT: a >> 41
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Arithmetics.ShiftSumOfShifts1(System.Int32)
RESULT: 0
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Int64 VSharp.CSharpUtils.Tests.Arithmetics.ShiftSumOfShifts2(System.Int64)
RESULT: a << 34
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Arithmetics.ConcreteShift()
RESULT: -2147483648
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
System.Int32 ==> STRUCT System.Int32[
	| System.Int32.MaxValue ~> 2147483647
	| System.Int32.MinValue ~> -2147483648]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Arithmetics.MultiplyShifts1(System.Int32, System.Int32)
RESULT: 0
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Arithmetics.MultiplyShifts2(System.Int32, System.Int32)
RESULT: a * c << 29
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Arithmetics.ShiftWithDivAndMul(System.Int32)
RESULT: (a << 6) / 4
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Int64 VSharp.CSharpUtils.Tests.Arithmetics.DoubleShiftRight(System.Int32)
RESULT: (System.Int64)(a >> 15 >> 18)
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.LogMethod1(System.Double)
RESULT: log(x)
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.LogMethod2(System.Double, System.Double)
RESULT: log(x + y)
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.LogMethod3()
RESULT: 0
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.LogMethod4(System.Double)
RESULT: log(1 + log(x))
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.LogMethod5()
RESULT: -Infinity
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.LogMethod6()
RESULT: NaN
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.LogMethod7(System.Double)
RESULT: UNION[
	| !(x < 0) ~> log(x)
	| x < 0 ~> log(-x)]
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.SqrtMethod1(System.Double)
RESULT: sqrt(x)
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.SqrtMethod2()
RESULT: 2
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.SqrtMethod3(System.Double)
RESULT: UNION[
	| !(x < 0) ~> sqrt(x)
	| x < 0 ~> sqrt(-x)]
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.SqrtMethod4()
RESULT: NaN
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.ExpMethod1()
RESULT: 1
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.ExpMethod2(System.Double)
RESULT: exp(x)
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.PowMethod1(System.Double)
RESULT: 1
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.PowMethod2(System.Double)
RESULT: 1
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.PowMethod3()
RESULT: 25
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.PowMethod4(System.Double, System.Double)
RESULT: pow(x, y)
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.PowMethod5(System.Double)
RESULT: UNION[
	| !(x < 0) ~> pow(x, 2)
	| x < 0 ~> pow(-x, 2)]
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.PowMethod6(System.Double)
RESULT: UNION[
	| !(x < 0) ~> pow(x, x)
	| !(x < 8) & x < 0 ~> pow(-x, -x)
	| x < 0 & x < 8 ~> pow(-x, x)]
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.PowMethod7(System.Double, System.Double)
RESULT: x + y
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.PowMethod8(System.Double)
RESULT: pow(2, x)
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.PowMethod9(System.Double)
RESULT: NaN
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.PowMethod10(System.Double, System.Double)
RESULT: NaN
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.PowMethod11(System.Double)
RESULT: UNION[
	| !(x < 0) ~> 0
	| 0 == x ~> 1
	| x < 0 ~> Infinity]
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.PowMethod12()
RESULT: 1
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.PowMethod13()
RESULT: 0
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.PowMethod14(System.Double)
RESULT: Infinity
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.PowMethod15(System.Double, System.Double)
RESULT: UNION[
	| !(0 == x + y) & !(x + y < 0) ~> Infinity
	| 0 == x + y ~> 1
	| x + y < 0 ~> 0]
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.PowMethod16(System.Double)
RESULT: UNION[
	| !(-1 == x) & !(1 == x) & (!(-1 < x) | !(x < 1)) ~> 0
	| -1 < x & x < 1 ~> Infinity
	| -1 == x ~> NaN
	| 1 == x ~> 1]
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.PowMethod17()
RESULT: -Infinity
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.AcosMethod()
RESULT: 0
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.AsinMethod(System.Double)
RESULT: arcsin(x)
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.AtanMethod(System.Double, System.Double)
RESULT: arctan(-y + x)
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.CeilingMethod(System.Double)
RESULT: ceil(x)
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.CosMethod()
RESULT: NaN
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.CoshMethod()
RESULT: Infinity
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.FloorMethod(System.Double)
RESULT: floor(x)
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.SinMethod()
RESULT: NaN
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.TanMethod()
RESULT: NaN
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.SinhMethod(System.Double)
RESULT: UNION[
	| !(x <= 0) ~> sinh(x)
	| x <= 0 ~> sinh(-x)]
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.TanhMethod(System.Double)
RESULT: tanh(x)
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.RoundMethod()
RESULT: 7
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.AbsMethod(System.Double)
RESULT: abs(x)
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Single VSharp.CSharpUtils.Tests.Arithmetics.AbsSingleMethod()
RESULT: 5.9
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
2 ==> [|
	0: System.Empty;
	10: System.UInt32;
	11: System.Int64;
	12: System.UInt64;
	13: System.Single;
	14: System.Double;
	15: System.Decimal;
	16: System.DateTime;
	17: System.Object;
	18: System.String;
	1: System.Object;
	2: System.DBNull;
	3: System.Boolean;
	4: System.Char;
	5: System.SByte;
	6: System.Byte;
	7: System.Int16;
	8: System.UInt16;
	9: System.Int32;
	 ... 19 ... |]
3 ==> [|
	0: 'A';
	10: 'K';
	11: 'L';
	12: 'M';
	13: 'N';
	14: 'O';
	15: 'P';
	16: 'Q';
	17: 'R';
	18: 'S';
	19: 'T';
	1: 'B';
	20: 'U';
	21: 'V';
	22: 'W';
	23: 'X';
	24: 'Y';
	25: 'Z';
	26: 'a';
	27: 'b';
	28: 'c';
	29: 'd';
	2: 'C';
	30: 'e';
	31: 'f';
	32: 'g';
	33: 'h';
	34: 'i';
	35: 'j';
	36: 'k';
	37: 'l';
	38: 'm';
	39: 'n';
	3: 'D';
	40: 'o';
	41: 'p';
	42: 'q';
	43: 'r';
	44: 's';
	45: 't';
	46: 'u';
	47: 'v';
	48: 'w';
	49: 'x';
	4: 'E';
	50: 'y';
	51: 'z';
	52: '0';
	53: '1';
	54: '2';
	55: '3';
	56: '4';
	57: '5';
	58: '6';
	59: '7';
	5: 'F';
	60: '8';
	61: '9';
	62: '+';
	63: '/';
	64: '=';
	6: 'G';
	7: 'H';
	8: 'I';
	9: 'J';
	 ... 65 ... |]
4 ==> STRUCT System.DBNull[]
---------- s1 = ----------
System.Convert ==> STRUCT System.Convert[
	| System.Convert.ConvertTypes ~> (HeapRef 2)
	| System.Convert.DBNull ~> (HeapRef 4)
	| System.Convert.EnumType ~> System.Enum
	| System.Convert.base64LineBreakPosition ~> 76
	| System.Convert.base64Table ~> (HeapRef 3)]
System.DBNull ==> STRUCT System.DBNull[
	| System.DBNull.Value ~> (HeapRef 4)]
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
System.Object ==> STRUCT System.Object[]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.Atan2Method1(System.Double)
RESULT: NaN
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.Atan2Method2(System.Double)
RESULT: UNION[
	| !(Infinity == x) ~> arctan(Infinity, x)
	| Infinity == x ~> NaN]
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Arithmetics.Atan2Method3()
RESULT: 0
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Arithmetics ==> STRUCT VSharp.CSharpUtils.Tests.Arithmetics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Negation1()
RESULT: False
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Negation1(System.Int32)
RESULT: False
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Negation2(System.Boolean)
RESULT: !b
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Negation3(System.Boolean)
RESULT: b
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Negation4(System.Boolean)
RESULT: b
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Negation5(System.Boolean)
RESULT: b
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.And1(System.Boolean, System.Boolean)
RESULT: a
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.And2(System.Boolean, System.Boolean)
RESULT: False
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.And3(System.Boolean, System.Boolean)
RESULT: False
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.And4(System.Boolean, System.Boolean)
RESULT: True
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.And5(System.Boolean, System.Boolean)
RESULT: False
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.And6(System.Boolean, System.Boolean)
RESULT: False
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.And7(System.Boolean, System.Boolean)
RESULT: False
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.And8(System.Boolean, System.Boolean)
RESULT: a & b
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.And9(System.Boolean, System.Boolean, System.Boolean)
RESULT: False
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Or1(System.Boolean, System.Boolean)
RESULT: True
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Or2(System.Boolean, System.Boolean)
RESULT: True
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Or3(System.Boolean, System.Boolean)
RESULT: False
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Or4(System.Boolean, System.Boolean)
RESULT: True
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Or5(System.Boolean, System.Boolean)
RESULT: True
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Or6(System.Boolean, System.Boolean)
RESULT: True
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Or7(System.Boolean, System.Boolean)
RESULT: True
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Or8(System.Boolean, System.Boolean)
RESULT: a | b
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Or9(System.Boolean, System.Boolean, System.Boolean)
RESULT: True
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Or10(System.Boolean, System.Boolean, System.Boolean)
RESULT: a | b
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr0(System.Boolean, System.Boolean, System.Boolean)
RESULT: False
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr1(System.Boolean, System.Boolean, System.Boolean)
RESULT: b & c
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr2(System.Boolean, System.Boolean, System.Boolean)
RESULT: !b & c
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr3(System.Boolean, System.Boolean, System.Boolean)
RESULT: b | c
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr4(System.Boolean, System.Boolean, System.Boolean)
RESULT: !b | c
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr5(System.Boolean, System.Boolean, System.Boolean)
RESULT: a & b & c
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr6(System.Boolean, System.Boolean, System.Boolean)
RESULT: !a & b | a & c
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr7(System.Boolean, System.Boolean, System.Boolean)
RESULT: (a | b) & (a | c)
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr8(System.Boolean, System.Boolean, System.Boolean)
RESULT: a & b | a & c
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr9(System.Boolean, System.Boolean, System.Boolean)
RESULT: (a | b) & (a | c)
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr10(System.Boolean, System.Boolean, System.Boolean)
RESULT: a & b | a & c
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr11(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: !a | !b | !c | d
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr12(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: !a & (!a & b | a & c)
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr13(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: True
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr14(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: !a & b
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr15(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: (!a | !b) & c
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr16(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: !b | a | c
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr17(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: !b & a | !b & a & c | (!b | !c) & a | a & c
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr18(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: !c | (!a | b) & (!b & a | c)
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr19(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: a & b
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr20(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: a
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr21(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: !a & b
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr22(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: !b & a
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr23(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: !a & b
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr24(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: !c & (!a | b)
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr25(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: a
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr26(System.Boolean, System.Boolean, System.Boolean)
RESULT: !c & b | a & b
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Xor1(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: False
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Xor2(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: True
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Xor3(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: (!a | !b) & (a | b)
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Xor4(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: !a
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Xor5(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: a
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Xor6(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: True
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Xor7(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: (!a | (!a & !b | !c | a & b) & ((!a | !b) & (a | b) | c)) & (!c & (!a & !b | a & b) | (!a | !b) & (a | b) & c | a)
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Xor8(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: (!a & !b | a & b) & ((!a | !b) & (a | b) | (!a | !b) & (a | b))
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.CondAnd1(System.Int32)
RESULT: False
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.CondAnd2(System.Int32)
RESULT: False
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.CondAnd3(System.Int32)
RESULT: False
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.CondOr1(System.Int32)
RESULT: True
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.CondOr2(System.Int32)
RESULT: False
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.CondOr3(System.Int32)
RESULT: True
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Equal1(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: True
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Equal2(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: !a & !b | a & b
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Equal3(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: True
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.NotEqual1(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: !a & b | !b & a
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.NotEqual2(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: False
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Order1(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: a & b & c
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Order2(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: a & b & c
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Order3(System.Int32, System.Int32, System.Int32, System.Int32)
RESULT: -b + a + -c == 0
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Order4(System.Int32, System.Int32, System.Int32, System.Int32)
RESULT: -b + a + -c == 0
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Logics ==> STRUCT VSharp.CSharpUtils.Tests.Logics[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.ClassesSimple.Test1(System.Int32)
RESULT: True
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimpleA[
	| VSharp.CSharpUtils.Tests.ClassesSimpleA._b ~> STRUCT VSharp.CSharpUtils.Tests.ClassesSimpleB[
		| VSharp.CSharpUtils.Tests.ClassesSimpleB._c ~> STRUCT VSharp.CSharpUtils.Tests.ClassesSimpleC[
			| VSharp.CSharpUtils.Tests.ClassesSimpleC.<M1>k__BackingField ~> 42
			| VSharp.CSharpUtils.Tests.ClassesSimpleC._m2 ~> 102
			| VSharp.CSharpUtils.Tests.ClassesSimpleC._n ~> n]]
	| VSharp.CSharpUtils.Tests.ClassesSimpleA._intField ~> 100500]
---------- s1 = ----------
System.Object ==> STRUCT System.Object[]
VSharp.CSharpUtils.Tests.ClassesSimple ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimple[]
VSharp.CSharpUtils.Tests.ClassesSimpleA ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimpleA[]
VSharp.CSharpUtils.Tests.ClassesSimpleB ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimpleB[]
VSharp.CSharpUtils.Tests.ClassesSimpleC ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimpleC[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.ClassesSimple.SimpleStructureAccess(System.Int32)
RESULT: newMyValue
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.ClassesSimple+MyStruct ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimple+MyStruct[]
VSharp.CSharpUtils.Tests.ClassesSimple ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimple[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.ClassesSimple.ValueTypeMethod(System.Int32, System.Int32)
RESULT: UNION[
	| !(x < y) & !(x <= y) ~> 1
	| !(x < y) & x <= y ~> 0
	| x < y ~> -1]
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
System.Int32 ==> STRUCT System.Int32[
	| System.Int32.MaxValue ~> 2147483647
	| System.Int32.MinValue ~> -2147483648]
VSharp.CSharpUtils.Tests.ClassesSimple ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimple[]
METHOD: System.Void VSharp.CSharpUtils.Tests.ClassesSimpleException.Test1()
RESULT: UNION[
	| !hasKey#1 ~> <ERROR: (HeapRef 2)>
	| hasKey#1 ~> <VOID>]
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimpleException0[]
2 ==> STRUCT System.NullReferenceException[
	| System.Exception._HResult ~> -2147467261
	| System.Exception._className ~> null
	| System.Exception._data ~> null
	| System.Exception._dynamicMethods ~> null
	| System.Exception._exceptionMethod ~> null
	| System.Exception._exceptionMethodString ~> null
	| System.Exception._helpURL ~> null
	| System.Exception._innerException ~> null
	| System.Exception._ipForWatsonBuckets ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]
	| System.Exception._message ~> (HeapRef 4)
	| System.Exception._remoteStackIndex ~> 0
	| System.Exception._remoteStackTraceString ~> null
	| System.Exception._safeSerializationManager ~> (HeapRef 6)
	| System.Exception._source ~> null
	| System.Exception._stackTrace ~> null
	| System.Exception._stackTraceString ~> null
	| System.Exception._watsonBuckets ~> null
	| System.Exception._xcode ~> -532462766
	| System.Exception._xptrs ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> 0]]
3 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'A';
		10: 'f';
		11: 'e';
		12: 'r';
		13: 'e';
		14: 'n';
		15: 'c';
		16: 'e';
		17: 'E';
		18: 'x';
		19: 'c';
		1: 'r';
		20: 'e';
		21: 'p';
		22: 't';
		23: 'i';
		24: 'o';
		25: 'n';
		26: '\000';
		2: 'g';
		3: '_';
		4: 'N';
		5: 'u';
		6: 'l';
		7: 'l';
		8: 'R';
		9: 'e';
		 ... 27 ... |]
	| System.String.m_StringLength ~> 26]
4 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'G';
		10: 's';
		11: 'o';
		12: 'u';
		13: 'r';
		14: 'c';
		15: 'e';
		16: ' ';
		17: 's';
		18: 't';
		19: 'r';
		1: 'e';
		20: 'i';
		21: 'n';
		22: 'g';
		23: 's';
		24: ' ';
		25: 'c';
		26: 'u';
		27: 'r';
		28: 'r';
		29: 'e';
		2: 't';
		30: 'n';
		31: 't';
		32: 'l';
		33: 'y';
		34: ' ';
		35: 'n';
		36: 'o';
		37: 't';
		38: ' ';
		39: 's';
		3: 't';
		40: 'u';
		41: 'p';
		42: 'p';
		43: 'o';
		44: 'r';
		45: 't';
		46: 'e';
		47: 'd';
		48: '!';
		49: '\000';
		4: 'i';
		5: 'n';
		6: 'g';
		7: ' ';
		8: 'r';
		9: 'e';
		 ... 50 ... |]
	| System.String.m_StringLength ~> 49]
5 ==> STRUCT System.Object[]
6 ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.m_realObject ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_realType ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_savedSerializationInfo ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_serializedStates ~> null]
7 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'C';
		10: 'r';
		11: 'i';
		12: 'a';
		13: 'l';
		14: 'i';
		15: 'z';
		16: 'a';
		17: 't';
		18: 'i';
		19: 'o';
		1: 'L';
		20: 'n';
		21: 'M';
		22: 'a';
		23: 'n';
		24: 'a';
		25: 'g';
		26: 'e';
		27: 'r';
		28: '_';
		29: 'R';
		2: 'R';
		30: 'e';
		31: 'a';
		32: 'l';
		33: 'T';
		34: 'y';
		35: 'p';
		36: 'e';
		37: '\000';
		3: '_';
		4: 'S';
		5: 'a';
		6: 'f';
		7: 'e';
		8: 'S';
		9: 'e';
		 ... 38 ... |]
	| System.String.m_StringLength ~> 37]
---------- s1 = ----------
System.Environment ==> STRUCT System.Environment[
	| System.Environment.MaxEnvVariableValueLength ~> 32767
	| System.Environment.MaxMachineNameLength ~> 256
	| System.Environment.MaxSystemEnvVariableLength ~> 1024
	| System.Environment.MaxUserEnvVariableLength ~> 255
	| System.Environment.isUserNonInteractive ~> False
	| System.Environment.m_os ~> null
	| System.Environment.m_resHelper ~> null
	| System.Environment.processWinStation ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]
	| System.Environment.s_CheckedOSWin8OrAbove ~> False
	| System.Environment.s_CheckedWinRT ~> False
	| System.Environment.s_InternalSyncObject ~> null
	| System.Environment.s_IsWindows8OrAbove ~> False
	| System.Environment.s_WinRTSupported ~> False]
System.Exception ==> STRUCT System.Exception[
	| System.Exception._COMPlusExceptionCode ~> -532462766
	| System.Exception.s_EDILock ~> (HeapRef 5)]
System.IntPtr ==> STRUCT System.IntPtr[
	| System.IntPtr.Zero ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]]
System.NullReferenceException ==> STRUCT System.NullReferenceException[]
System.Object ==> STRUCT System.Object[]
System.Runtime.Serialization.SafeSerializationManager ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.RealTypeSerializationName ~> (HeapRef 7)]
System.SystemException ==> STRUCT System.SystemException[]
System.UIntPtr ==> STRUCT System.UIntPtr[
	| System.UIntPtr.Zero ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]]
System.ValueType ==> STRUCT System.ValueType[]
VSharp.CSharpUtils.Tests.ClassesSimpleException ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimpleException[]
VSharp.CSharpUtils.Tests.ClassesSimpleException0 ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimpleException0[
	| VSharp.CSharpUtils.Tests.ClassesSimpleException0.field0 ~> 0]
VSharp.CSharpUtils.Tests.ClassesSimpleExceptionInitializer ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimpleExceptionInitializer[]
METHOD: System.Void VSharp.CSharpUtils.Tests.ClassesSimpleException.Test2()
RESULT: UNION[
	| !hasKey#1 ~> <ERROR: (HeapRef 2)>
	| hasKey#1 ~> <VOID>]
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimpleException1[]
2 ==> STRUCT System.NullReferenceException[
	| System.Exception._HResult ~> -2147467261
	| System.Exception._className ~> null
	| System.Exception._data ~> null
	| System.Exception._dynamicMethods ~> null
	| System.Exception._exceptionMethod ~> null
	| System.Exception._exceptionMethodString ~> null
	| System.Exception._helpURL ~> null
	| System.Exception._innerException ~> null
	| System.Exception._ipForWatsonBuckets ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]
	| System.Exception._message ~> (HeapRef 4)
	| System.Exception._remoteStackIndex ~> 0
	| System.Exception._remoteStackTraceString ~> null
	| System.Exception._safeSerializationManager ~> (HeapRef 6)
	| System.Exception._source ~> null
	| System.Exception._stackTrace ~> null
	| System.Exception._stackTraceString ~> null
	| System.Exception._watsonBuckets ~> null
	| System.Exception._xcode ~> -532462766
	| System.Exception._xptrs ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> 0]]
3 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'A';
		10: 'f';
		11: 'e';
		12: 'r';
		13: 'e';
		14: 'n';
		15: 'c';
		16: 'e';
		17: 'E';
		18: 'x';
		19: 'c';
		1: 'r';
		20: 'e';
		21: 'p';
		22: 't';
		23: 'i';
		24: 'o';
		25: 'n';
		26: '\000';
		2: 'g';
		3: '_';
		4: 'N';
		5: 'u';
		6: 'l';
		7: 'l';
		8: 'R';
		9: 'e';
		 ... 27 ... |]
	| System.String.m_StringLength ~> 26]
4 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'G';
		10: 's';
		11: 'o';
		12: 'u';
		13: 'r';
		14: 'c';
		15: 'e';
		16: ' ';
		17: 's';
		18: 't';
		19: 'r';
		1: 'e';
		20: 'i';
		21: 'n';
		22: 'g';
		23: 's';
		24: ' ';
		25: 'c';
		26: 'u';
		27: 'r';
		28: 'r';
		29: 'e';
		2: 't';
		30: 'n';
		31: 't';
		32: 'l';
		33: 'y';
		34: ' ';
		35: 'n';
		36: 'o';
		37: 't';
		38: ' ';
		39: 's';
		3: 't';
		40: 'u';
		41: 'p';
		42: 'p';
		43: 'o';
		44: 'r';
		45: 't';
		46: 'e';
		47: 'd';
		48: '!';
		49: '\000';
		4: 'i';
		5: 'n';
		6: 'g';
		7: ' ';
		8: 'r';
		9: 'e';
		 ... 50 ... |]
	| System.String.m_StringLength ~> 49]
5 ==> STRUCT System.Object[]
6 ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.m_realObject ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_realType ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_savedSerializationInfo ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_serializedStates ~> null]
7 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'C';
		10: 'r';
		11: 'i';
		12: 'a';
		13: 'l';
		14: 'i';
		15: 'z';
		16: 'a';
		17: 't';
		18: 'i';
		19: 'o';
		1: 'L';
		20: 'n';
		21: 'M';
		22: 'a';
		23: 'n';
		24: 'a';
		25: 'g';
		26: 'e';
		27: 'r';
		28: '_';
		29: 'R';
		2: 'R';
		30: 'e';
		31: 'a';
		32: 'l';
		33: 'T';
		34: 'y';
		35: 'p';
		36: 'e';
		37: '\000';
		3: '_';
		4: 'S';
		5: 'a';
		6: 'f';
		7: 'e';
		8: 'S';
		9: 'e';
		 ... 38 ... |]
	| System.String.m_StringLength ~> 37]
---------- s1 = ----------
System.Environment ==> STRUCT System.Environment[
	| System.Environment.MaxEnvVariableValueLength ~> 32767
	| System.Environment.MaxMachineNameLength ~> 256
	| System.Environment.MaxSystemEnvVariableLength ~> 1024
	| System.Environment.MaxUserEnvVariableLength ~> 255
	| System.Environment.isUserNonInteractive ~> False
	| System.Environment.m_os ~> null
	| System.Environment.m_resHelper ~> null
	| System.Environment.processWinStation ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]
	| System.Environment.s_CheckedOSWin8OrAbove ~> False
	| System.Environment.s_CheckedWinRT ~> False
	| System.Environment.s_InternalSyncObject ~> null
	| System.Environment.s_IsWindows8OrAbove ~> False
	| System.Environment.s_WinRTSupported ~> False]
System.Exception ==> STRUCT System.Exception[
	| System.Exception._COMPlusExceptionCode ~> -532462766
	| System.Exception.s_EDILock ~> (HeapRef 5)]
System.IntPtr ==> STRUCT System.IntPtr[
	| System.IntPtr.Zero ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]]
System.NullReferenceException ==> STRUCT System.NullReferenceException[]
System.Object ==> STRUCT System.Object[]
System.Runtime.Serialization.SafeSerializationManager ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.RealTypeSerializationName ~> (HeapRef 7)]
System.SystemException ==> STRUCT System.SystemException[]
System.UIntPtr ==> STRUCT System.UIntPtr[
	| System.UIntPtr.Zero ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]]
System.ValueType ==> STRUCT System.ValueType[]
VSharp.CSharpUtils.Tests.ClassesSimpleException ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimpleException[]
VSharp.CSharpUtils.Tests.ClassesSimpleException1 ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimpleException1[
	| VSharp.CSharpUtils.Tests.ClassesSimpleException1.field0 ~> -24
	| VSharp.CSharpUtils.Tests.ClassesSimpleException1.field1 ~> 0]
VSharp.CSharpUtils.Tests.ClassesSimpleExceptionInitializer ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimpleExceptionInitializer[]
METHOD: System.Collections.Generic.List`1[System.String] VSharp.CSharpUtils.Tests.ClassesSimpleHierarchy.Test1()
RESULT: (HeapRef 2)
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimpleHierarchyA2[
	| VSharp.CSharpUtils.Tests.ClassesSimpleHierarchyA.num ~> 121
	| VSharp.CSharpUtils.Tests.ClassesSimpleHierarchyA1.num1 ~> 122
	| VSharp.CSharpUtils.Tests.ClassesSimpleHierarchyA2.num2 ~> 123]
10 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 's';
		10: 'd';
		11: 'A';
		12: '1';
		13: ' ';
		14: 'I';
		15: '\000';
		1: 't';
		2: 'a';
		3: 't';
		4: 'i';
		5: 'c';
		6: 'F';
		7: 'i';
		8: 'e';
		9: 'l';
		 ... 16 ... |]
	| System.String.m_StringLength ~> 15]
11 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 's';
		10: 'd';
		11: 'A';
		12: '1';
		13: ' ';
		14: 'I';
		15: 'I';
		16: '\000';
		1: 't';
		2: 'a';
		3: 't';
		4: 'i';
		5: 'c';
		6: 'F';
		7: 'i';
		8: 'e';
		9: 'l';
		 ... 17 ... |]
	| System.String.m_StringLength ~> 16]
12 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'f';
		10: ' ';
		11: 'I';
		12: '\000';
		1: 'i';
		2: 'e';
		3: 'l';
		4: 'd';
		5: ' ';
		6: 'n';
		7: 'u';
		8: 'm';
		9: '1';
		 ... 13 ... |]
	| System.String.m_StringLength ~> 12]
13 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'A';
		10: 's';
		11: 'S';
		12: 'i';
		13: 'm';
		14: 'p';
		15: 'l';
		16: 'e';
		17: 'H';
		18: 'i';
		19: 'e';
		1: 'R';
		20: 'r';
		21: 'a';
		22: 'r';
		23: 'c';
		24: 'h';
		25: 'y';
		26: 'A';
		27: '1';
		28: '(';
		29: 'i';
		2: 'G';
		30: 'n';
		31: 't';
		32: ' ';
		33: 'i';
		34: ')';
		35: ' ';
		36: ':';
		37: ' ';
		38: 'b';
		39: 'a';
		3: ' ';
		40: 's';
		41: 'e';
		42: ' ';
		43: 'I';
		44: '\000';
		4: 'C';
		5: 'l';
		6: 'a';
		7: 's';
		8: 's';
		9: 'e';
		 ... 45 ... |]
	| System.String.m_StringLength ~> 44]
14 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 's';
		10: 'd';
		11: 'A';
		12: ' ';
		13: 'I';
		14: '\000';
		1: 't';
		2: 'a';
		3: 't';
		4: 'i';
		5: 'c';
		6: 'F';
		7: 'i';
		8: 'e';
		9: 'l';
		 ... 15 ... |]
	| System.String.m_StringLength ~> 14]
15 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 's';
		10: 'd';
		11: 'A';
		12: ' ';
		13: 'I';
		14: 'I';
		15: '\000';
		1: 't';
		2: 'a';
		3: 't';
		4: 'i';
		5: 'c';
		6: 'F';
		7: 'i';
		8: 'e';
		9: 'l';
		 ... 16 ... |]
	| System.String.m_StringLength ~> 15]
16 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'f';
		10: 'I';
		11: '\000';
		1: 'i';
		2: 'e';
		3: 'l';
		4: 'd';
		5: ' ';
		6: 'n';
		7: 'u';
		8: 'm';
		9: ' ';
		 ... 12 ... |]
	| System.String.m_StringLength ~> 11]
17 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'C';
		10: 'p';
		11: 'l';
		12: 'e';
		13: 'H';
		14: 'i';
		15: 'e';
		16: 'r';
		17: 'a';
		18: 'r';
		19: 'c';
		1: 'l';
		20: 'h';
		21: 'y';
		22: 'A';
		23: '(';
		24: 'i';
		25: 'n';
		26: 't';
		27: ' ';
		28: 'i';
		29: ')';
		2: 'a';
		30: ' ';
		31: 'I';
		32: '\000';
		3: 's';
		4: 's';
		5: 'e';
		6: 's';
		7: 'S';
		8: 'i';
		9: 'm';
		 ... 33 ... |]
	| System.String.m_StringLength ~> 32]
18 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'C';
		10: 'p';
		11: 'l';
		12: 'e';
		13: 'H';
		14: 'i';
		15: 'e';
		16: 'r';
		17: 'a';
		18: 'r';
		19: 'c';
		1: 'l';
		20: 'h';
		21: 'y';
		22: 'A';
		23: '1';
		24: '(';
		25: 'i';
		26: 'n';
		27: 't';
		28: ' ';
		29: 'i';
		2: 'a';
		30: ')';
		31: ' ';
		32: 'I';
		33: '\000';
		3: 's';
		4: 's';
		5: 'e';
		6: 's';
		7: 'S';
		8: 'i';
		9: 'm';
		 ... 34 ... |]
	| System.String.m_StringLength ~> 33]
19 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'C';
		10: 'p';
		11: 'l';
		12: 'e';
		13: 'H';
		14: 'i';
		15: 'e';
		16: 'r';
		17: 'a';
		18: 'r';
		19: 'c';
		1: 'l';
		20: 'h';
		21: 'y';
		22: 'A';
		23: '2';
		24: '(';
		25: 'i';
		26: 'n';
		27: 't';
		28: ' ';
		29: 'i';
		2: 'a';
		30: ')';
		31: ' ';
		32: 'I';
		33: '\000';
		3: 's';
		4: 's';
		5: 'e';
		6: 's';
		7: 'S';
		8: 'i';
		9: 'm';
		 ... 34 ... |]
	| System.String.m_StringLength ~> 33]
2 ==> STRUCT System.Collections.Generic.List`1[System.String][
	| System.Collections.Generic.List`1._items ~> (HeapRef 4)
	| System.Collections.Generic.List`1._size ~> UNION[
		| !hasKey#6 & !hasKey#7 ~> 16
		| !hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6 ~> 14
		| hasKey#6 & hasKey#7 ~> 12]
	| System.Collections.Generic.List`1._syncRoot ~> null
	| System.Collections.Generic.List`1._version ~> UNION[
		| !hasKey#6 & !hasKey#7 ~> 16
		| !hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6 ~> 14
		| hasKey#6 & hasKey#7 ~> 12]]
20 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'C';
		10: 'p';
		11: 'l';
		12: 'e';
		13: 'H';
		14: 'i';
		15: 'e';
		16: 'r';
		17: 'a';
		18: 'r';
		19: 'c';
		1: 'l';
		20: 'h';
		21: 'y';
		22: 'A';
		23: '2';
		24: '(';
		25: 'i';
		26: 'n';
		27: 't';
		28: ' ';
		29: 'i';
		2: 'a';
		30: ',';
		31: ' ';
		32: 'i';
		33: 'n';
		34: 't';
		35: ' ';
		36: 'j';
		37: ')';
		38: ' ';
		39: 'I';
		3: 's';
		40: '\000';
		4: 's';
		5: 'e';
		6: 's';
		7: 'S';
		8: 'i';
		9: 'm';
		 ... 41 ... |]
	| System.String.m_StringLength ~> 40]
3 ==> [| ... 0 ... |]
4 ==> [|
	0: (HeapRef 5);
	1: (HeapRef 6);
	2: (HeapRef 7);
	3: (HeapRef 8);
	4: (HeapRef 9);
	5: UNION[
		| !hasKey#6 ~> (HeapRef 10)];
	6: UNION[
		| !hasKey#6 ~> (HeapRef 11)];
	UNION[
	| !hasKey#6 & !hasKey#7 ~> 11
	| !hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6 ~> 9
	| hasKey#6 & hasKey#7 ~> 7]: UNION[
		| !hasKey#7 & (!hasKey#6 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | (!hasKey#6 | !hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6) | hasKey#6 & hasKey#7) & (!hasKey#6 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | hasKey#6 & hasKey#7) & (!hasKey#7 & (!hasKey#6 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | hasKey#6 & hasKey#7) & (!hasKey#6 | !hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6) | (!hasKey#6 & !hasKey#7 | hasKey#6) & (!hasKey#6 | !hasKey#7 | (!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6)) & (!hasKey#6 | !hasKey#7) & (!hasKey#6 | hasKey#6 & hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6 | hasKey#7) & (hasKey#6 | hasKey#7) | (!hasKey#6 | !hasKey#7 | (!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6)) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6 | hasKey#7)) ~> null
		| (!hasKey#6 & !hasKey#7 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) & hasKey#6 & hasKey#7) & (!hasKey#6 & !hasKey#7 | !hasKey#6 & !hasKey#7 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | !hasKey#6 & (hasKey#6 | hasKey#7) | (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) & hasKey#6 & hasKey#7 | (!hasKey#6 | !hasKey#7) & hasKey#6 | hasKey#6 & hasKey#7) & (!hasKey#6 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | (!hasKey#6 | !hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6) | hasKey#6 & hasKey#7 | hasKey#7) ~> (HeapRef 18)
		| (!hasKey#6 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | (!hasKey#6 | !hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6) | hasKey#6 & hasKey#7 | hasKey#7) & (!hasKey#7 & (!hasKey#6 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | hasKey#6 & hasKey#7) & (!hasKey#6 | !hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6) | (!hasKey#6 & !hasKey#7 | hasKey#6) & (!hasKey#6 | !hasKey#7 | (!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6)) & (!hasKey#6 | !hasKey#7) & (!hasKey#6 | hasKey#6 & hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6 | hasKey#7) & (hasKey#6 | hasKey#7) | (!hasKey#6 | !hasKey#7 | (!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6)) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6 | hasKey#7)) & ((!hasKey#6 | !hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6) | hasKey#7) ~> (HeapRef 16)];
	UNION[
	| !hasKey#6 & !hasKey#7 ~> 12
	| !hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6 ~> 10
	| hasKey#6 & hasKey#7 ~> 8]: UNION[
		| !hasKey#7 & (!hasKey#6 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | (!hasKey#6 | !hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6) | hasKey#6 & hasKey#7) & (!hasKey#6 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | hasKey#6 & hasKey#7) & (!hasKey#7 & (!hasKey#6 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | hasKey#6 & hasKey#7) & (!hasKey#6 | !hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6) | (!hasKey#6 & !hasKey#7 | hasKey#6) & (!hasKey#6 | !hasKey#7 | (!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6)) & (!hasKey#6 | !hasKey#7) & (!hasKey#6 | hasKey#6 & hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6 | hasKey#7) & (hasKey#6 | hasKey#7) | (!hasKey#6 | !hasKey#7 | (!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6)) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6 | hasKey#7)) ~> null
		| (!hasKey#6 & !hasKey#7 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) & hasKey#6 & hasKey#7) & (!hasKey#6 & !hasKey#7 | !hasKey#6 & !hasKey#7 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | !hasKey#6 & (hasKey#6 | hasKey#7) | (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) & hasKey#6 & hasKey#7 | (!hasKey#6 | !hasKey#7) & hasKey#6 | hasKey#6 & hasKey#7) & (!hasKey#6 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | (!hasKey#6 | !hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6) | hasKey#6 & hasKey#7 | hasKey#7) ~> (HeapRef 19)
		| (!hasKey#6 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | (!hasKey#6 | !hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6) | hasKey#6 & hasKey#7 | hasKey#7) & (!hasKey#7 & (!hasKey#6 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | hasKey#6 & hasKey#7) & (!hasKey#6 | !hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6) | (!hasKey#6 & !hasKey#7 | hasKey#6) & (!hasKey#6 | !hasKey#7 | (!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6)) & (!hasKey#6 | !hasKey#7) & (!hasKey#6 | hasKey#6 & hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6 | hasKey#7) & (hasKey#6 | hasKey#7) | (!hasKey#6 | !hasKey#7 | (!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6)) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6 | hasKey#7)) & ((!hasKey#6 | !hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6) | hasKey#7) ~> (HeapRef 17)];
	UNION[
	| !hasKey#6 & !hasKey#7 ~> 13
	| !hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6 ~> 11
	| hasKey#6 & hasKey#7 ~> 9]: UNION[
		| (!hasKey#6 & !hasKey#7 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) & hasKey#6 & hasKey#7) & (!hasKey#6 & !hasKey#7 | !hasKey#6 & !hasKey#7 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | !hasKey#6 & (hasKey#6 | hasKey#7) | (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) & hasKey#6 & hasKey#7 | (!hasKey#6 | !hasKey#7) & hasKey#6 | hasKey#6 & hasKey#7) & (!hasKey#6 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | (!hasKey#6 | !hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6) | hasKey#6 & hasKey#7 | hasKey#7) & (!hasKey#7 & (!hasKey#6 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | hasKey#6 & hasKey#7) & (!hasKey#6 | !hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6) | (!hasKey#6 & !hasKey#7 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) & hasKey#6 & hasKey#7) & (!hasKey#6 & !hasKey#7 | !hasKey#6 & !hasKey#7 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | !hasKey#6 & (hasKey#6 | hasKey#7) | (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) & hasKey#6 & hasKey#7 | (!hasKey#6 | !hasKey#7) & hasKey#6 | hasKey#6 & hasKey#7) & (!hasKey#6 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | (!hasKey#6 | !hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6) | hasKey#6 & hasKey#7 | hasKey#7) | (!hasKey#6 & !hasKey#7 | hasKey#6) & (!hasKey#6 | !hasKey#7 | (!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6)) & (!hasKey#6 | !hasKey#7) & (!hasKey#6 | hasKey#6 & hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6 | hasKey#7) & (hasKey#6 | hasKey#7) | (!hasKey#6 | !hasKey#7 | (!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6)) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6 | hasKey#7)) & ((!hasKey#6 & !hasKey#7 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) & hasKey#6 & hasKey#7) & (!hasKey#6 & !hasKey#7 | !hasKey#6 & !hasKey#7 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | !hasKey#6 & (hasKey#6 | hasKey#7) | (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) & hasKey#6 & hasKey#7 | (!hasKey#6 | !hasKey#7) & hasKey#6 | hasKey#6 & hasKey#7) & (!hasKey#6 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | (!hasKey#6 | !hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6) | hasKey#6 & hasKey#7 | hasKey#7) & (!hasKey#7 & (!hasKey#6 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | hasKey#6 & hasKey#7) & (!hasKey#6 | !hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6) | (!hasKey#6 & !hasKey#7 | hasKey#6) & (!hasKey#6 | !hasKey#7 | (!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6)) & (!hasKey#6 | !hasKey#7) & (!hasKey#6 | hasKey#6 & hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6 | hasKey#7) & (hasKey#6 | hasKey#7) | (!hasKey#6 | !hasKey#7 | (!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6)) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6 | hasKey#7)) | (!hasKey#6 & !hasKey#7 | hasKey#6) & (!hasKey#6 | !hasKey#7 | (!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6)) & (!hasKey#6 | !hasKey#7) & (!hasKey#6 | hasKey#6 & hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6 | hasKey#7) & (hasKey#6 | hasKey#7) | (!hasKey#6 | !hasKey#7 | (!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6)) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6 | hasKey#7)) ~> null
		| (!hasKey#6 & !hasKey#7 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) & hasKey#6 & hasKey#7) & (!hasKey#6 & !hasKey#7 | !hasKey#6 & !hasKey#7 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | !hasKey#6 & (hasKey#6 | hasKey#7) | (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) & hasKey#6 & hasKey#7 | (!hasKey#6 | !hasKey#7) & hasKey#6 | hasKey#6 & hasKey#7) & (!hasKey#7 & (!hasKey#6 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | hasKey#6 & hasKey#7) & (!hasKey#6 | !hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6) | (!hasKey#6 & !hasKey#7 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) & hasKey#6 & hasKey#7) & (!hasKey#6 & !hasKey#7 | !hasKey#6 & !hasKey#7 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | !hasKey#6 & (hasKey#6 | hasKey#7) | (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) & hasKey#6 & hasKey#7 | (!hasKey#6 | !hasKey#7) & hasKey#6 | hasKey#6 & hasKey#7) & (!hasKey#6 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | (!hasKey#6 | !hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6) | hasKey#6 & hasKey#7 | hasKey#7) | (!hasKey#6 & !hasKey#7 | hasKey#6) & (!hasKey#6 | !hasKey#7 | (!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6)) & (!hasKey#6 | !hasKey#7) & (!hasKey#6 | hasKey#6 & hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6 | hasKey#7) & (hasKey#6 | hasKey#7) | (!hasKey#6 | !hasKey#7 | (!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6)) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6 | hasKey#7)) ~> (HeapRef 20)
		| (!hasKey#7 & (!hasKey#6 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | hasKey#6 & hasKey#7) & (!hasKey#6 | !hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6) | (!hasKey#6 & !hasKey#7 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) & hasKey#6 & hasKey#7) & (!hasKey#6 & !hasKey#7 | !hasKey#6 & !hasKey#7 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | !hasKey#6 & (hasKey#6 | hasKey#7) | (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) & hasKey#6 & hasKey#7 | (!hasKey#6 | !hasKey#7) & hasKey#6 | hasKey#6 & hasKey#7) & (!hasKey#6 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | (!hasKey#6 | !hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6) | hasKey#6 & hasKey#7 | hasKey#7) | (!hasKey#6 & !hasKey#7 | hasKey#6) & (!hasKey#6 | !hasKey#7 | (!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6)) & (!hasKey#6 | !hasKey#7) & (!hasKey#6 | hasKey#6 & hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6 | hasKey#7) & (hasKey#6 | hasKey#7) | (!hasKey#6 | !hasKey#7 | (!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6)) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6 | hasKey#7)) & (!hasKey#7 & (!hasKey#6 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | hasKey#6 & hasKey#7) & (!hasKey#6 | !hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6) | (!hasKey#6 & !hasKey#7 | hasKey#6) & (!hasKey#6 | !hasKey#7 | (!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6)) & (!hasKey#6 | !hasKey#7) & (!hasKey#6 | hasKey#6 & hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6 | hasKey#7) & (hasKey#6 | hasKey#7) | (!hasKey#6 | !hasKey#7 | (!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6)) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6 | hasKey#7)) & ((!hasKey#6 & !hasKey#7 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) & hasKey#6 & hasKey#7) & (!hasKey#6 & !hasKey#7 | !hasKey#6 & !hasKey#7 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | !hasKey#6 & (hasKey#6 | hasKey#7) | (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) & hasKey#6 & hasKey#7 | (!hasKey#6 | !hasKey#7) & hasKey#6 | hasKey#6 & hasKey#7) & (!hasKey#6 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | (!hasKey#6 | !hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6) | hasKey#6 & hasKey#7 | hasKey#7) & (!hasKey#7 & (!hasKey#6 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | hasKey#6 & hasKey#7) & (!hasKey#6 | !hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6) | (!hasKey#6 & !hasKey#7 | hasKey#6) & (!hasKey#6 | !hasKey#7 | (!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6)) & (!hasKey#6 | !hasKey#7) & (!hasKey#6 | hasKey#6 & hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6 | hasKey#7) & (hasKey#6 | hasKey#7) | (!hasKey#6 | !hasKey#7 | (!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6)) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6 | hasKey#7)) | (!hasKey#6 & !hasKey#7 | hasKey#6) & (!hasKey#6 | !hasKey#7 | (!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6)) & (!hasKey#6 | !hasKey#7) & (!hasKey#6 | hasKey#6 & hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6 | hasKey#7) & (hasKey#6 | hasKey#7) | (!hasKey#6 | !hasKey#7 | (!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6)) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6 | hasKey#7)) ~> (HeapRef 18)];
	UNION[
	| !hasKey#6 & !hasKey#7 ~> 14
	| !hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6 ~> 12
	| hasKey#6 & hasKey#7 ~> 10]: UNION[
		| !hasKey#7 & (!hasKey#6 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | hasKey#6 & hasKey#7) & (!hasKey#6 | !hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6) | (!hasKey#6 & !hasKey#7 | hasKey#6) & (!hasKey#6 | !hasKey#7 | (!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6)) & (!hasKey#6 | !hasKey#7) & (!hasKey#6 | hasKey#6 & hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6 | hasKey#7) & (hasKey#6 | hasKey#7) | (!hasKey#6 | !hasKey#7 | (!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6)) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6 | hasKey#7) ~> (HeapRef 19)
		| (!hasKey#6 & !hasKey#7 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) & hasKey#6 & hasKey#7) & (!hasKey#6 & !hasKey#7 | !hasKey#6 & !hasKey#7 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | !hasKey#6 & (hasKey#6 | hasKey#7) | (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) & hasKey#6 & hasKey#7 | (!hasKey#6 | !hasKey#7) & hasKey#6 | hasKey#6 & hasKey#7) & (!hasKey#6 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | (!hasKey#6 | !hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6) | hasKey#6 & hasKey#7 | hasKey#7) ~> null];
	UNION[
	| !hasKey#6 & !hasKey#7 ~> 15
	| !hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6 ~> 13
	| hasKey#6 & hasKey#7 ~> 11]: UNION[
		| (!hasKey#6 & !hasKey#7 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) & hasKey#6 & hasKey#7) & (!hasKey#6 & !hasKey#7 | !hasKey#6 & !hasKey#7 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | !hasKey#6 & (hasKey#6 | hasKey#7) | (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) & hasKey#6 & hasKey#7 | (!hasKey#6 | !hasKey#7) & hasKey#6 | hasKey#6 & hasKey#7) & (!hasKey#6 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | (!hasKey#6 | !hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6) | hasKey#6 & hasKey#7 | hasKey#7) & (!hasKey#7 & (!hasKey#6 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | hasKey#6 & hasKey#7) & (!hasKey#6 | !hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6) | (!hasKey#6 & !hasKey#7 | hasKey#6) & (!hasKey#6 | !hasKey#7 | (!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6)) & (!hasKey#6 | !hasKey#7) & (!hasKey#6 | hasKey#6 & hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6 | hasKey#7) & (hasKey#6 | hasKey#7) | (!hasKey#6 | !hasKey#7 | (!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6)) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6 | hasKey#7)) | (!hasKey#6 & !hasKey#7 | hasKey#6) & (!hasKey#6 | !hasKey#7 | (!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6)) & (!hasKey#6 | !hasKey#7) & (!hasKey#6 | hasKey#6 & hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6 | hasKey#7) & (hasKey#6 | hasKey#7) | (!hasKey#6 | !hasKey#7 | (!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6)) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6 | hasKey#7) ~> (HeapRef 20)
		| (!hasKey#6 & !hasKey#7 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) & hasKey#6 & hasKey#7) & (!hasKey#6 & !hasKey#7 | !hasKey#6 & !hasKey#7 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | !hasKey#6 & (hasKey#6 | hasKey#7) | (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) & hasKey#6 & hasKey#7 | (!hasKey#6 | !hasKey#7) & hasKey#6 | hasKey#6 & hasKey#7) & (!hasKey#7 & (!hasKey#6 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | hasKey#6 & hasKey#7) & (!hasKey#6 | !hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6) | (!hasKey#6 & !hasKey#7 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) & hasKey#6 & hasKey#7) & (!hasKey#6 & !hasKey#7 | !hasKey#6 & !hasKey#7 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | !hasKey#6 & (hasKey#6 | hasKey#7) | (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) & hasKey#6 & hasKey#7 | (!hasKey#6 | !hasKey#7) & hasKey#6 | hasKey#6 & hasKey#7) & (!hasKey#6 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | (!hasKey#6 | !hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6) | hasKey#6 & hasKey#7 | hasKey#7) | (!hasKey#6 & !hasKey#7 | hasKey#6) & (!hasKey#6 | !hasKey#7 | (!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6)) & (!hasKey#6 | !hasKey#7) & (!hasKey#6 | hasKey#6 & hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6 | hasKey#7) & (hasKey#6 | hasKey#7) | (!hasKey#6 | !hasKey#7 | (!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6)) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6 | hasKey#7)) ~> null];
	UNION[
	| !hasKey#6 ~> 10
	| hasKey#6 ~> 8]: UNION[
		| !hasKey#7 & (!hasKey#6 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | hasKey#6 & hasKey#7) ~> (HeapRef 17)
		| !hasKey#7 & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6) ~> (HeapRef 15)];
	UNION[
	| !hasKey#6 ~> 7
	| hasKey#6 ~> 5]: (HeapRef 12);
	UNION[
	| !hasKey#6 ~> 8
	| hasKey#6 ~> 6]: (HeapRef 13);
	UNION[
	| !hasKey#6 ~> 9
	| hasKey#6 ~> 7]: UNION[
		| !hasKey#7 & (!hasKey#6 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | hasKey#6 & hasKey#7) ~> (HeapRef 16)
		| !hasKey#7 & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6) ~> (HeapRef 14)];
	 ... 20 ... |]
5 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 's';
		10: 'd';
		11: 'A';
		12: '2';
		13: ' ';
		14: 'I';
		15: '\000';
		1: 't';
		2: 'a';
		3: 't';
		4: 'i';
		5: 'c';
		6: 'F';
		7: 'i';
		8: 'e';
		9: 'l';
		 ... 16 ... |]
	| System.String.m_StringLength ~> 15]
6 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 's';
		10: 'd';
		11: 'A';
		12: '2';
		13: ' ';
		14: 'I';
		15: 'I';
		16: '\000';
		1: 't';
		2: 'a';
		3: 't';
		4: 'i';
		5: 'c';
		6: 'F';
		7: 'i';
		8: 'e';
		9: 'l';
		 ... 17 ... |]
	| System.String.m_StringLength ~> 16]
7 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'A';
		10: 's';
		11: 'S';
		12: 'i';
		13: 'm';
		14: 'p';
		15: 'l';
		16: 'e';
		17: 'H';
		18: 'i';
		19: 'e';
		1: 'R';
		20: 'r';
		21: 'a';
		22: 'r';
		23: 'c';
		24: 'h';
		25: 'y';
		26: 'A';
		27: '2';
		28: '(';
		29: 'i';
		2: 'G';
		30: 'n';
		31: 't';
		32: ' ';
		33: 'i';
		34: ',';
		35: ' ';
		36: 'i';
		37: 'n';
		38: 't';
		39: ' ';
		3: ' ';
		40: 'j';
		41: ')';
		42: ' ';
		43: ':';
		44: ' ';
		45: 't';
		46: 'h';
		47: 'i';
		48: 's';
		49: ' ';
		4: 'C';
		50: 'I';
		51: '\000';
		5: 'l';
		6: 'a';
		7: 's';
		8: 's';
		9: 'e';
		 ... 52 ... |]
	| System.String.m_StringLength ~> 51]
8 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'f';
		10: ' ';
		11: 'I';
		12: '\000';
		1: 'i';
		2: 'e';
		3: 'l';
		4: 'd';
		5: ' ';
		6: 'n';
		7: 'u';
		8: 'm';
		9: '2';
		 ... 13 ... |]
	| System.String.m_StringLength ~> 12]
9 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'A';
		10: 's';
		11: 'S';
		12: 'i';
		13: 'm';
		14: 'p';
		15: 'l';
		16: 'e';
		17: 'H';
		18: 'i';
		19: 'e';
		1: 'R';
		20: 'r';
		21: 'a';
		22: 'r';
		23: 'c';
		24: 'h';
		25: 'y';
		26: 'A';
		27: '2';
		28: '(';
		29: 'i';
		2: 'G';
		30: 'n';
		31: 't';
		32: ' ';
		33: 'i';
		34: ')';
		35: ' ';
		36: ':';
		37: ' ';
		38: 'b';
		39: 'a';
		3: ' ';
		40: 's';
		41: 'e';
		42: ' ';
		43: 'I';
		44: '\000';
		4: 'C';
		5: 'l';
		6: 'a';
		7: 's';
		8: 's';
		9: 'e';
		 ... 45 ... |]
	| System.String.m_StringLength ~> 44]
---------- s1 = ----------
System.Array ==> STRUCT System.Array[
	| System.Array.MaxArrayLength ~> 2146435071
	| System.Array.MaxByteArrayLength ~> 2147483591]
System.Collections.Generic.List`1 ==> STRUCT System.Collections.Generic.List`1[System.String][
	| System.Collections.Generic.List`1._defaultCapacity ~> 4
	| System.Collections.Generic.List`1._emptyArray ~> (HeapRef 3)]
System.Object ==> STRUCT System.Object[]
VSharp.CSharpUtils.Tests.ClassesSimpleHierarchy ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimpleHierarchy[]
VSharp.CSharpUtils.Tests.ClassesSimpleHierarchyA ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimpleHierarchyA[
	| VSharp.CSharpUtils.Tests.ClassesSimpleHierarchyA.staticFieldA ~> 2]
VSharp.CSharpUtils.Tests.ClassesSimpleHierarchyA1 ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimpleHierarchyA1[
	| VSharp.CSharpUtils.Tests.ClassesSimpleHierarchyA1.staticFieldA1 ~> 2]
VSharp.CSharpUtils.Tests.ClassesSimpleHierarchyA2 ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimpleHierarchyA2[
	| VSharp.CSharpUtils.Tests.ClassesSimpleHierarchyA2.staticFieldA2 ~> 2]
VSharp.CSharpUtils.Tests.ClassesSimpleRegistrator ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimpleRegistrator[
	| VSharp.CSharpUtils.Tests.ClassesSimpleRegistrator.entries ~> (HeapRef 2)]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.ClassesSimpleHierarchy.Test2()
RESULT: 15
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> STRUCT System.Collections.Generic.List`1[System.String][
	| System.Collections.Generic.List`1._items ~> (HeapRef 3)
	| System.Collections.Generic.List`1._size ~> UNION[
		| !hasKey#6 & !hasKey#7 ~> 12
		| !hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6 ~> 10
		| hasKey#6 & hasKey#7 ~> 8]
	| System.Collections.Generic.List`1._syncRoot ~> null
	| System.Collections.Generic.List`1._version ~> UNION[
		| !hasKey#6 & !hasKey#7 ~> 12
		| !hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6 ~> 10
		| hasKey#6 & hasKey#7 ~> 8]]
10 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'f';
		10: ' ';
		11: 'I';
		12: '\000';
		1: 'i';
		2: 'e';
		3: 'l';
		4: 'd';
		5: ' ';
		6: 'n';
		7: 'u';
		8: 'm';
		9: '1';
		 ... 13 ... |]
	| System.String.m_StringLength ~> 12]
11 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 's';
		10: 'd';
		11: 'A';
		12: ' ';
		13: 'I';
		14: '\000';
		1: 't';
		2: 'a';
		3: 't';
		4: 'i';
		5: 'c';
		6: 'F';
		7: 'i';
		8: 'e';
		9: 'l';
		 ... 15 ... |]
	| System.String.m_StringLength ~> 14]
12 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 's';
		10: 'd';
		11: 'A';
		12: ' ';
		13: 'I';
		14: 'I';
		15: '\000';
		1: 't';
		2: 'a';
		3: 't';
		4: 'i';
		5: 'c';
		6: 'F';
		7: 'i';
		8: 'e';
		9: 'l';
		 ... 16 ... |]
	| System.String.m_StringLength ~> 15]
13 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'f';
		10: 'I';
		11: '\000';
		1: 'i';
		2: 'e';
		3: 'l';
		4: 'd';
		5: ' ';
		6: 'n';
		7: 'u';
		8: 'm';
		9: ' ';
		 ... 12 ... |]
	| System.String.m_StringLength ~> 11]
14 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'C';
		10: 'p';
		11: 'l';
		12: 'e';
		13: 'H';
		14: 'i';
		15: 'e';
		16: 'r';
		17: 'a';
		18: 'r';
		19: 'c';
		1: 'l';
		20: 'h';
		21: 'y';
		22: 'A';
		23: ' ';
		24: 'I';
		25: '\000';
		2: 'a';
		3: 's';
		4: 's';
		5: 'e';
		6: 's';
		7: 'S';
		8: 'i';
		9: 'm';
		 ... 26 ... |]
	| System.String.m_StringLength ~> 25]
15 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'C';
		10: 'p';
		11: 'l';
		12: 'e';
		13: 'H';
		14: 'i';
		15: 'e';
		16: 'r';
		17: 'a';
		18: 'r';
		19: 'c';
		1: 'l';
		20: 'h';
		21: 'y';
		22: 'A';
		23: '1';
		24: ' ';
		25: 'I';
		26: '\000';
		2: 'a';
		3: 's';
		4: 's';
		5: 'e';
		6: 's';
		7: 'S';
		8: 'i';
		9: 'm';
		 ... 27 ... |]
	| System.String.m_StringLength ~> 26]
16 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'C';
		10: 'p';
		11: 'l';
		12: 'e';
		13: 'H';
		14: 'i';
		15: 'e';
		16: 'r';
		17: 'a';
		18: 'r';
		19: 'c';
		1: 'l';
		20: 'h';
		21: 'y';
		22: 'A';
		23: '2';
		24: ' ';
		25: 'I';
		26: '\000';
		2: 'a';
		3: 's';
		4: 's';
		5: 'e';
		6: 's';
		7: 'S';
		8: 'i';
		9: 'm';
		 ... 27 ... |]
	| System.String.m_StringLength ~> 26]
2 ==> [| ... 0 ... |]
3 ==> [|
	0: (HeapRef 4);
	1: (HeapRef 5);
	2: (HeapRef 7);
	3: UNION[
		| !hasKey#6 ~> (HeapRef 8)];
	4: UNION[
		| !hasKey#6 ~> (HeapRef 9)];
	UNION[
	| !hasKey#6 & !hasKey#7 ~> 10
	| !hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6 ~> 8
	| hasKey#6 & hasKey#7 ~> 6]: (HeapRef 15);
	UNION[
	| !hasKey#6 & !hasKey#7 ~> 11
	| !hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6 ~> 9
	| hasKey#6 & hasKey#7 ~> 7]: (HeapRef 16);
	UNION[
	| !hasKey#6 & !hasKey#7 ~> 8
	| !hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6 ~> 6
	| hasKey#6 & hasKey#7 ~> 4]: UNION[
		| !hasKey#7 & (!hasKey#6 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | hasKey#6 & hasKey#7) ~> null
		| (!hasKey#6 | !hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6) | hasKey#7 ~> (HeapRef 13)];
	UNION[
	| !hasKey#6 & !hasKey#7 ~> 9
	| !hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6 ~> 7
	| hasKey#6 & hasKey#7 ~> 5]: UNION[
		| !hasKey#7 & (!hasKey#6 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | hasKey#6 & hasKey#7) ~> null
		| (!hasKey#6 | !hasKey#7) & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6) | hasKey#7 ~> (HeapRef 14)];
	UNION[
	| !hasKey#6 ~> 5
	| hasKey#6 ~> 3]: (HeapRef 10);
	UNION[
	| !hasKey#6 ~> 6
	| hasKey#6 ~> 4]: UNION[
		| !hasKey#7 & (!hasKey#6 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | hasKey#6 & hasKey#7) ~> (HeapRef 13)
		| !hasKey#7 & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6) ~> (HeapRef 11)];
	UNION[
	| !hasKey#6 ~> 7
	| hasKey#6 ~> 5]: UNION[
		| !hasKey#7 & (!hasKey#6 & (!hasKey#6 & hasKey#7 | !hasKey#7 & hasKey#6) | hasKey#6 & hasKey#7) ~> (HeapRef 14)
		| !hasKey#7 & ((!hasKey#6 | hasKey#7) & (!hasKey#7 | hasKey#6) | hasKey#6) ~> (HeapRef 12)];
	 ... 20 ... |]
4 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 's';
		10: 'd';
		11: 'A';
		12: '2';
		13: ' ';
		14: 'I';
		15: '\000';
		1: 't';
		2: 'a';
		3: 't';
		4: 'i';
		5: 'c';
		6: 'F';
		7: 'i';
		8: 'e';
		9: 'l';
		 ... 16 ... |]
	| System.String.m_StringLength ~> 15]
5 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 's';
		10: 'd';
		11: 'A';
		12: '2';
		13: ' ';
		14: 'I';
		15: 'I';
		16: '\000';
		1: 't';
		2: 'a';
		3: 't';
		4: 'i';
		5: 'c';
		6: 'F';
		7: 'i';
		8: 'e';
		9: 'l';
		 ... 17 ... |]
	| System.String.m_StringLength ~> 16]
6 ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimpleHierarchyA2[
	| VSharp.CSharpUtils.Tests.ClassesSimpleHierarchyA.num ~> 10
	| VSharp.CSharpUtils.Tests.ClassesSimpleHierarchyA1.num1 ~> 2
	| VSharp.CSharpUtils.Tests.ClassesSimpleHierarchyA2.num2 ~> 3]
7 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'f';
		10: ' ';
		11: 'I';
		12: '\000';
		1: 'i';
		2: 'e';
		3: 'l';
		4: 'd';
		5: ' ';
		6: 'n';
		7: 'u';
		8: 'm';
		9: '2';
		 ... 13 ... |]
	| System.String.m_StringLength ~> 12]
8 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 's';
		10: 'd';
		11: 'A';
		12: '1';
		13: ' ';
		14: 'I';
		15: '\000';
		1: 't';
		2: 'a';
		3: 't';
		4: 'i';
		5: 'c';
		6: 'F';
		7: 'i';
		8: 'e';
		9: 'l';
		 ... 16 ... |]
	| System.String.m_StringLength ~> 15]
9 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 's';
		10: 'd';
		11: 'A';
		12: '1';
		13: ' ';
		14: 'I';
		15: 'I';
		16: '\000';
		1: 't';
		2: 'a';
		3: 't';
		4: 'i';
		5: 'c';
		6: 'F';
		7: 'i';
		8: 'e';
		9: 'l';
		 ... 17 ... |]
	| System.String.m_StringLength ~> 16]
---------- s1 = ----------
System.Array ==> STRUCT System.Array[
	| System.Array.MaxArrayLength ~> 2146435071
	| System.Array.MaxByteArrayLength ~> 2147483591]
System.Collections.Generic.List`1 ==> STRUCT System.Collections.Generic.List`1[System.String][
	| System.Collections.Generic.List`1._defaultCapacity ~> 4
	| System.Collections.Generic.List`1._emptyArray ~> (HeapRef 2)]
System.Object ==> STRUCT System.Object[]
VSharp.CSharpUtils.Tests.ClassesSimpleHierarchy ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimpleHierarchy[]
VSharp.CSharpUtils.Tests.ClassesSimpleHierarchyA ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimpleHierarchyA[
	| VSharp.CSharpUtils.Tests.ClassesSimpleHierarchyA.staticFieldA ~> 2]
VSharp.CSharpUtils.Tests.ClassesSimpleHierarchyA1 ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimpleHierarchyA1[
	| VSharp.CSharpUtils.Tests.ClassesSimpleHierarchyA1.staticFieldA1 ~> 2]
VSharp.CSharpUtils.Tests.ClassesSimpleHierarchyA2 ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimpleHierarchyA2[
	| VSharp.CSharpUtils.Tests.ClassesSimpleHierarchyA2.staticFieldA2 ~> 2]
VSharp.CSharpUtils.Tests.ClassesSimpleRegistrator ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimpleRegistrator[
	| VSharp.CSharpUtils.Tests.ClassesSimpleRegistrator.entries ~> (HeapRef 1)]
METHOD: VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccess+SimpleStruct VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccess.get_StructProperty()
RESULT: STRUCT VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccess+SimpleStruct[]
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
this ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccess[]
---------- s1 = ----------
VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccess ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccess[]
METHOD: System.Void VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccess.set_StructProperty(VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccess+SimpleStruct)
RESULT: <VOID>
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
this ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccess[
	| VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccess._structProperty ~> STRUCT VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccess+SimpleStruct[]]
---------- s1 = ----------
VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccess ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccess[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccess.get_Property()
RESULT: UNION[
	| !(0 == this.VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccess.<SecretProperty>k__BackingField) ~> this.VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccess.<SecretProperty>k__BackingField.System.Collections.Generic.List`1._size
	| 0 == this.VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccess.<SecretProperty>k__BackingField ~> <ERROR: (HeapRef 2)>]
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [| ... 0 ... |]
2 ==> STRUCT System.NullReferenceException[
	| System.Exception._HResult ~> -2147467261
	| System.Exception._className ~> null
	| System.Exception._data ~> null
	| System.Exception._dynamicMethods ~> null
	| System.Exception._exceptionMethod ~> null
	| System.Exception._exceptionMethodString ~> null
	| System.Exception._helpURL ~> null
	| System.Exception._innerException ~> null
	| System.Exception._ipForWatsonBuckets ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]
	| System.Exception._message ~> (HeapRef 4)
	| System.Exception._remoteStackIndex ~> 0
	| System.Exception._remoteStackTraceString ~> null
	| System.Exception._safeSerializationManager ~> (HeapRef 6)
	| System.Exception._source ~> null
	| System.Exception._stackTrace ~> null
	| System.Exception._stackTraceString ~> null
	| System.Exception._watsonBuckets ~> null
	| System.Exception._xcode ~> -532462766
	| System.Exception._xptrs ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> 0]]
3 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'A';
		10: 'f';
		11: 'e';
		12: 'r';
		13: 'e';
		14: 'n';
		15: 'c';
		16: 'e';
		17: 'E';
		18: 'x';
		19: 'c';
		1: 'r';
		20: 'e';
		21: 'p';
		22: 't';
		23: 'i';
		24: 'o';
		25: 'n';
		26: '\000';
		2: 'g';
		3: '_';
		4: 'N';
		5: 'u';
		6: 'l';
		7: 'l';
		8: 'R';
		9: 'e';
		 ... 27 ... |]
	| System.String.m_StringLength ~> 26]
4 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'G';
		10: 's';
		11: 'o';
		12: 'u';
		13: 'r';
		14: 'c';
		15: 'e';
		16: ' ';
		17: 's';
		18: 't';
		19: 'r';
		1: 'e';
		20: 'i';
		21: 'n';
		22: 'g';
		23: 's';
		24: ' ';
		25: 'c';
		26: 'u';
		27: 'r';
		28: 'r';
		29: 'e';
		2: 't';
		30: 'n';
		31: 't';
		32: 'l';
		33: 'y';
		34: ' ';
		35: 'n';
		36: 'o';
		37: 't';
		38: ' ';
		39: 's';
		3: 't';
		40: 'u';
		41: 'p';
		42: 'p';
		43: 'o';
		44: 'r';
		45: 't';
		46: 'e';
		47: 'd';
		48: '!';
		49: '\000';
		4: 'i';
		5: 'n';
		6: 'g';
		7: ' ';
		8: 'r';
		9: 'e';
		 ... 50 ... |]
	| System.String.m_StringLength ~> 49]
5 ==> STRUCT System.Object[]
6 ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.m_realObject ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_realType ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_savedSerializationInfo ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_serializedStates ~> null]
7 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'C';
		10: 'r';
		11: 'i';
		12: 'a';
		13: 'l';
		14: 'i';
		15: 'z';
		16: 'a';
		17: 't';
		18: 'i';
		19: 'o';
		1: 'L';
		20: 'n';
		21: 'M';
		22: 'a';
		23: 'n';
		24: 'a';
		25: 'g';
		26: 'e';
		27: 'r';
		28: '_';
		29: 'R';
		2: 'R';
		30: 'e';
		31: 'a';
		32: 'l';
		33: 'T';
		34: 'y';
		35: 'p';
		36: 'e';
		37: '\000';
		3: '_';
		4: 'S';
		5: 'a';
		6: 'f';
		7: 'e';
		8: 'S';
		9: 'e';
		 ... 38 ... |]
	| System.String.m_StringLength ~> 37]
this ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccess[]
this.VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccess.<SecretProperty>k__BackingField ==> STRUCT System.Collections.Generic.List`1[System.Boolean][]
---------- s1 = ----------
System.Collections.Generic.List`1 ==> STRUCT System.Collections.Generic.List`1[System.Boolean][
	| System.Collections.Generic.List`1._defaultCapacity ~> 4
	| System.Collections.Generic.List`1._emptyArray ~> (HeapRef 1)]
System.Environment ==> STRUCT System.Environment[
	| System.Environment.MaxEnvVariableValueLength ~> 32767
	| System.Environment.MaxMachineNameLength ~> 256
	| System.Environment.MaxSystemEnvVariableLength ~> 1024
	| System.Environment.MaxUserEnvVariableLength ~> 255
	| System.Environment.isUserNonInteractive ~> False
	| System.Environment.m_os ~> null
	| System.Environment.m_resHelper ~> null
	| System.Environment.processWinStation ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]
	| System.Environment.s_CheckedOSWin8OrAbove ~> False
	| System.Environment.s_CheckedWinRT ~> False
	| System.Environment.s_InternalSyncObject ~> null
	| System.Environment.s_IsWindows8OrAbove ~> False
	| System.Environment.s_WinRTSupported ~> False]
System.Exception ==> STRUCT System.Exception[
	| System.Exception._COMPlusExceptionCode ~> -532462766
	| System.Exception.s_EDILock ~> (HeapRef 5)]
System.IntPtr ==> STRUCT System.IntPtr[
	| System.IntPtr.Zero ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]]
System.NullReferenceException ==> STRUCT System.NullReferenceException[]
System.Object ==> STRUCT System.Object[]
System.Runtime.Serialization.SafeSerializationManager ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.RealTypeSerializationName ~> (HeapRef 7)]
System.SystemException ==> STRUCT System.SystemException[]
System.UIntPtr ==> STRUCT System.UIntPtr[
	| System.UIntPtr.Zero ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]]
System.ValueType ==> STRUCT System.ValueType[]
VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccess ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccess[]
METHOD: System.Void VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccess.TestProperty1()
RESULT: <VOID>
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccess[
	| VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccess.<SecretProperty>k__BackingField ~> (HeapRef 2)
	| VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccess._structProperty ~> STRUCT VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccess+SimpleStruct[
		| VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccess+SimpleStruct.X ~> 0]]
2 ==> STRUCT System.Collections.Generic.List`1[System.Boolean][
	| System.Collections.Generic.List`1._items ~> (HeapRef 3)
	| System.Collections.Generic.List`1._size ~> 0
	| System.Collections.Generic.List`1._syncRoot ~> null
	| System.Collections.Generic.List`1._version ~> 0]
3 ==> [| ... 0 ... |]
---------- s1 = ----------
System.Collections.Generic.List`1 ==> STRUCT System.Collections.Generic.List`1[System.Boolean][
	| System.Collections.Generic.List`1._defaultCapacity ~> 4
	| System.Collections.Generic.List`1._emptyArray ~> (HeapRef 3)]
System.Object ==> STRUCT System.Object[]
VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccess+SimpleStruct ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccess+SimpleStruct[]
VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccess ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccess[]
METHOD: VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccessModify+SimpleStruct VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccessModify.get_StructProperty()
RESULT: (HeapRef this.VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccessModify.<StructProperty>k__BackingField)
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
this ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccessModify[]
---------- s1 = ----------
VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccessModify ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccessModify[]
METHOD: System.Void VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccessModify.set_StructProperty(VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccessModify+SimpleStruct)
RESULT: <VOID>
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
this ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccessModify[
	| VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccessModify.<StructProperty>k__BackingField ~> (HeapRef value)]
---------- s1 = ----------
VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccessModify ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccessModify[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccessModify.TestProperty1(System.Int32)
RESULT: anyVarName
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccessModify[
	| VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccessModify.<StructProperty>k__BackingField ~> (HeapRef 2)]
2 ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccessModify+SimpleStruct[
	| VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccessModify+SimpleStruct.X ~> anyVarName]
---------- s1 = ----------
VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccessModify+SimpleStruct ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccessModify+SimpleStruct[]
VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccessModify ==> STRUCT VSharp.CSharpUtils.Tests.ClassesSimplePropertyAccessModify[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Conditional.IsMaxEven(System.Int32, System.Int32, System.Int32)
RESULT: !(2 * x < 2 * y) & !(2 * y < z) | !(2 * x < z) & 2 * y < z | !(2 * y < z) & (!(2 * y < z) & 2 * x < 2 * y | 2 * x < z & 2 * y < z) | (!(2 * y < z) & 2 * x < 2 * y | 2 * x < z & 2 * y < z) & 0 == z % 2
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Conditional ==> STRUCT VSharp.CSharpUtils.Tests.Conditional[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Conditional.Always18()
RESULT: 18
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Conditional ==> STRUCT VSharp.CSharpUtils.Tests.Conditional[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Conditional.FirstEvenGreaterThen7()
RESULT: 8
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Conditional ==> STRUCT VSharp.CSharpUtils.Tests.Conditional[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Conditional.TestSwitch(System.Char)
RESULT: UNION[
	| !('A' == c) & !('B' == c) & !('C' == c) & !('D' == c) & !('R' == c) & 'T' == c ~> <ERROR: (HeapRef 1)>
	| !('T' == c) | 'A' == c | 'B' == c | 'C' == c | 'D' == c | 'R' == c ~> (!('R' == c) & !('T' == c) | 'A' == c & 'R' == c | 'A' == c & 'T' == c | 'B' == c & 'R' == c | 'B' == c & 'T' == c | 'C' == c & 'R' == c | 'C' == c & 'T' == c | 'D' == c) & (!('R' == c) & !('T' == c) | 'A' == c | 'B' == c | 'C' == c | 'D' == c | ('R' == c | 'T' == c) & <VOID> < 5)]
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> STRUCT System.ArgumentException[
	| System.ArgumentException.m_paramName ~> null
	| System.Exception._HResult ~> -2147024809
	| System.Exception._className ~> null
	| System.Exception._data ~> null
	| System.Exception._dynamicMethods ~> null
	| System.Exception._exceptionMethod ~> null
	| System.Exception._exceptionMethodString ~> null
	| System.Exception._helpURL ~> null
	| System.Exception._innerException ~> null
	| System.Exception._ipForWatsonBuckets ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]
	| System.Exception._message ~> (HeapRef 2)
	| System.Exception._remoteStackIndex ~> 0
	| System.Exception._remoteStackTraceString ~> null
	| System.Exception._safeSerializationManager ~> (HeapRef 4)
	| System.Exception._source ~> null
	| System.Exception._stackTrace ~> null
	| System.Exception._stackTraceString ~> null
	| System.Exception._watsonBuckets ~> null
	| System.Exception._xcode ~> -532462766
	| System.Exception._xptrs ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> 0]]
2 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'H';
		10: ' ';
		11: 'n';
		12: 'u';
		13: 'm';
		14: 'b';
		15: 'e';
		16: 'r';
		17: '!';
		18: '\000';
		1: 'e';
		2: 'y';
		3: '!';
		4: ' ';
		5: 'G';
		6: 'i';
		7: 'm';
		8: 'm';
		9: 'e';
		 ... 19 ... |]
	| System.String.m_StringLength ~> 18]
3 ==> STRUCT System.Object[]
4 ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.m_realObject ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_realType ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_savedSerializationInfo ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_serializedStates ~> null]
5 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'C';
		10: 'r';
		11: 'i';
		12: 'a';
		13: 'l';
		14: 'i';
		15: 'z';
		16: 'a';
		17: 't';
		18: 'i';
		19: 'o';
		1: 'L';
		20: 'n';
		21: 'M';
		22: 'a';
		23: 'n';
		24: 'a';
		25: 'g';
		26: 'e';
		27: 'r';
		28: '_';
		29: 'R';
		2: 'R';
		30: 'e';
		31: 'a';
		32: 'l';
		33: 'T';
		34: 'y';
		35: 'p';
		36: 'e';
		37: '\000';
		3: '_';
		4: 'S';
		5: 'a';
		6: 'f';
		7: 'e';
		8: 'S';
		9: 'e';
		 ... 38 ... |]
	| System.String.m_StringLength ~> 37]
---------- s1 = ----------
System.ArgumentException ==> STRUCT System.ArgumentException[]
System.Exception ==> STRUCT System.Exception[
	| System.Exception._COMPlusExceptionCode ~> -532462766
	| System.Exception.s_EDILock ~> (HeapRef 3)]
System.IntPtr ==> STRUCT System.IntPtr[
	| System.IntPtr.Zero ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]]
System.Object ==> STRUCT System.Object[]
System.Runtime.Serialization.SafeSerializationManager ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.RealTypeSerializationName ~> (HeapRef 5)]
System.SystemException ==> STRUCT System.SystemException[]
System.UIntPtr ==> STRUCT System.UIntPtr[
	| System.UIntPtr.Zero ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]]
System.ValueType ==> STRUCT System.ValueType[]
VSharp.CSharpUtils.Tests.Conditional ==> STRUCT VSharp.CSharpUtils.Tests.Conditional[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Conditional.ExceptionInCondition1(VSharp.CSharpUtils.Tests.Conditional+NewBool)
RESULT: UNION[
	| !(0 == nb) & !nb.VSharp.CSharpUtils.Tests.Conditional+NewBool.BoolValue ~> 56
	| !(0 == nb) & nb.VSharp.CSharpUtils.Tests.Conditional+NewBool.BoolValue ~> 42
	| 0 == nb ~> <ERROR: (HeapRef 1)>]
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> STRUCT System.NullReferenceException[
	| System.Exception._HResult ~> -2147467261
	| System.Exception._className ~> null
	| System.Exception._data ~> null
	| System.Exception._dynamicMethods ~> null
	| System.Exception._exceptionMethod ~> null
	| System.Exception._exceptionMethodString ~> null
	| System.Exception._helpURL ~> null
	| System.Exception._innerException ~> null
	| System.Exception._ipForWatsonBuckets ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]
	| System.Exception._message ~> (HeapRef 3)
	| System.Exception._remoteStackIndex ~> 0
	| System.Exception._remoteStackTraceString ~> null
	| System.Exception._safeSerializationManager ~> (HeapRef 5)
	| System.Exception._source ~> null
	| System.Exception._stackTrace ~> null
	| System.Exception._stackTraceString ~> null
	| System.Exception._watsonBuckets ~> null
	| System.Exception._xcode ~> -532462766
	| System.Exception._xptrs ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> 0]]
10 ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.m_realObject ~> UNION[
		| !(0 == nb) ~> null]
	| System.Runtime.Serialization.SafeSerializationManager.m_realType ~> UNION[
		| !(0 == nb) ~> null]
	| System.Runtime.Serialization.SafeSerializationManager.m_savedSerializationInfo ~> UNION[
		| !(0 == nb) ~> null]
	| System.Runtime.Serialization.SafeSerializationManager.m_serializedStates ~> UNION[
		| !(0 == nb) ~> null]]
2 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'A';
		10: 'f';
		11: 'e';
		12: 'r';
		13: 'e';
		14: 'n';
		15: 'c';
		16: 'e';
		17: 'E';
		18: 'x';
		19: 'c';
		1: 'r';
		20: 'e';
		21: 'p';
		22: 't';
		23: 'i';
		24: 'o';
		25: 'n';
		26: '\000';
		2: 'g';
		3: '_';
		4: 'N';
		5: 'u';
		6: 'l';
		7: 'l';
		8: 'R';
		9: 'e';
		 ... 27 ... |]
	| System.String.m_StringLength ~> 26]
3 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'G';
		10: 's';
		11: 'o';
		12: 'u';
		13: 'r';
		14: 'c';
		15: 'e';
		16: ' ';
		17: 's';
		18: 't';
		19: 'r';
		1: 'e';
		20: 'i';
		21: 'n';
		22: 'g';
		23: 's';
		24: ' ';
		25: 'c';
		26: 'u';
		27: 'r';
		28: 'r';
		29: 'e';
		2: 't';
		30: 'n';
		31: 't';
		32: 'l';
		33: 'y';
		34: ' ';
		35: 'n';
		36: 'o';
		37: 't';
		38: ' ';
		39: 's';
		3: 't';
		40: 'u';
		41: 'p';
		42: 'p';
		43: 'o';
		44: 'r';
		45: 't';
		46: 'e';
		47: 'd';
		48: '!';
		49: '\000';
		4: 'i';
		5: 'n';
		6: 'g';
		7: ' ';
		8: 'r';
		9: 'e';
		 ... 50 ... |]
	| System.String.m_StringLength ~> 49]
4 ==> STRUCT System.Object[]
5 ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.m_realObject ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_realType ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_savedSerializationInfo ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_serializedStates ~> null]
6 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'C';
		10: 'r';
		11: 'i';
		12: 'a';
		13: 'l';
		14: 'i';
		15: 'z';
		16: 'a';
		17: 't';
		18: 'i';
		19: 'o';
		1: 'L';
		20: 'n';
		21: 'M';
		22: 'a';
		23: 'n';
		24: 'a';
		25: 'g';
		26: 'e';
		27: 'r';
		28: '_';
		29: 'R';
		2: 'R';
		30: 'e';
		31: 'a';
		32: 'l';
		33: 'T';
		34: 'y';
		35: 'p';
		36: 'e';
		37: '\000';
		3: '_';
		4: 'S';
		5: 'a';
		6: 'f';
		7: 'e';
		8: 'S';
		9: 'e';
		 ... 38 ... |]
	| System.String.m_StringLength ~> 37]
7 ==> STRUCT System.NullReferenceException[
	| System.Exception._HResult ~> UNION[
		| !(0 == nb) ~> -2147467261]
	| System.Exception._className ~> UNION[
		| !(0 == nb) ~> null]
	| System.Exception._data ~> UNION[
		| !(0 == nb) ~> null]
	| System.Exception._dynamicMethods ~> UNION[
		| !(0 == nb) ~> null]
	| System.Exception._exceptionMethod ~> UNION[
		| !(0 == nb) ~> null]
	| System.Exception._exceptionMethodString ~> UNION[
		| !(0 == nb) ~> null]
	| System.Exception._helpURL ~> UNION[
		| !(0 == nb) ~> null]
	| System.Exception._innerException ~> UNION[
		| !(0 == nb) ~> null]
	| System.Exception._ipForWatsonBuckets ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> UNION[
			| !(0 == nb) ~> null]]
	| System.Exception._message ~> UNION[
		| !(0 == nb) ~> (HeapRef 9)]
	| System.Exception._remoteStackIndex ~> UNION[
		| !(0 == nb) ~> 0]
	| System.Exception._remoteStackTraceString ~> UNION[
		| !(0 == nb) ~> null]
	| System.Exception._safeSerializationManager ~> UNION[
		| !(0 == nb) ~> (HeapRef 10)]
	| System.Exception._source ~> UNION[
		| !(0 == nb) ~> null]
	| System.Exception._stackTrace ~> UNION[
		| !(0 == nb) ~> null]
	| System.Exception._stackTraceString ~> UNION[
		| !(0 == nb) ~> null]
	| System.Exception._watsonBuckets ~> UNION[
		| !(0 == nb) ~> null]
	| System.Exception._xcode ~> UNION[
		| !(0 == nb) ~> -532462766]
	| System.Exception._xptrs ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> UNION[
			| !(0 == nb) ~> 0]]]
8 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: UNION[
			| !(0 == nb) ~> 'A'];
		10: UNION[
			| !(0 == nb) ~> 'f'];
		11: UNION[
			| !(0 == nb) ~> 'e'];
		12: UNION[
			| !(0 == nb) ~> 'r'];
		13: UNION[
			| !(0 == nb) ~> 'e'];
		14: UNION[
			| !(0 == nb) ~> 'n'];
		15: UNION[
			| !(0 == nb) ~> 'c'];
		16: UNION[
			| !(0 == nb) ~> 'e'];
		17: UNION[
			| !(0 == nb) ~> 'E'];
		18: UNION[
			| !(0 == nb) ~> 'x'];
		19: UNION[
			| !(0 == nb) ~> 'c'];
		1: UNION[
			| !(0 == nb) ~> 'r'];
		20: UNION[
			| !(0 == nb) ~> 'e'];
		21: UNION[
			| !(0 == nb) ~> 'p'];
		22: UNION[
			| !(0 == nb) ~> 't'];
		23: UNION[
			| !(0 == nb) ~> 'i'];
		24: UNION[
			| !(0 == nb) ~> 'o'];
		25: UNION[
			| !(0 == nb) ~> 'n'];
		26: UNION[
			| !(0 == nb) ~> '\000'];
		2: UNION[
			| !(0 == nb) ~> 'g'];
		3: UNION[
			| !(0 == nb) ~> '_'];
		4: UNION[
			| !(0 == nb) ~> 'N'];
		5: UNION[
			| !(0 == nb) ~> 'u'];
		6: UNION[
			| !(0 == nb) ~> 'l'];
		7: UNION[
			| !(0 == nb) ~> 'l'];
		8: UNION[
			| !(0 == nb) ~> 'R'];
		9: UNION[
			| !(0 == nb) ~> 'e'];
		 ... UNION[
	| !(0 == nb) ~> 27] ... |]
	| System.String.m_StringLength ~> UNION[
		| !(0 == nb) ~> 26]]
9 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: UNION[
			| !(0 == nb) ~> 'G'];
		10: UNION[
			| !(0 == nb) ~> 's'];
		11: UNION[
			| !(0 == nb) ~> 'o'];
		12: UNION[
			| !(0 == nb) ~> 'u'];
		13: UNION[
			| !(0 == nb) ~> 'r'];
		14: UNION[
			| !(0 == nb) ~> 'c'];
		15: UNION[
			| !(0 == nb) ~> 'e'];
		16: UNION[
			| !(0 == nb) ~> ' '];
		17: UNION[
			| !(0 == nb) ~> 's'];
		18: UNION[
			| !(0 == nb) ~> 't'];
		19: UNION[
			| !(0 == nb) ~> 'r'];
		1: UNION[
			| !(0 == nb) ~> 'e'];
		20: UNION[
			| !(0 == nb) ~> 'i'];
		21: UNION[
			| !(0 == nb) ~> 'n'];
		22: UNION[
			| !(0 == nb) ~> 'g'];
		23: UNION[
			| !(0 == nb) ~> 's'];
		24: UNION[
			| !(0 == nb) ~> ' '];
		25: UNION[
			| !(0 == nb) ~> 'c'];
		26: UNION[
			| !(0 == nb) ~> 'u'];
		27: UNION[
			| !(0 == nb) ~> 'r'];
		28: UNION[
			| !(0 == nb) ~> 'r'];
		29: UNION[
			| !(0 == nb) ~> 'e'];
		2: UNION[
			| !(0 == nb) ~> 't'];
		30: UNION[
			| !(0 == nb) ~> 'n'];
		31: UNION[
			| !(0 == nb) ~> 't'];
		32: UNION[
			| !(0 == nb) ~> 'l'];
		33: UNION[
			| !(0 == nb) ~> 'y'];
		34: UNION[
			| !(0 == nb) ~> ' '];
		35: UNION[
			| !(0 == nb) ~> 'n'];
		36: UNION[
			| !(0 == nb) ~> 'o'];
		37: UNION[
			| !(0 == nb) ~> 't'];
		38: UNION[
			| !(0 == nb) ~> ' '];
		39: UNION[
			| !(0 == nb) ~> 's'];
		3: UNION[
			| !(0 == nb) ~> 't'];
		40: UNION[
			| !(0 == nb) ~> 'u'];
		41: UNION[
			| !(0 == nb) ~> 'p'];
		42: UNION[
			| !(0 == nb) ~> 'p'];
		43: UNION[
			| !(0 == nb) ~> 'o'];
		44: UNION[
			| !(0 == nb) ~> 'r'];
		45: UNION[
			| !(0 == nb) ~> 't'];
		46: UNION[
			| !(0 == nb) ~> 'e'];
		47: UNION[
			| !(0 == nb) ~> 'd'];
		48: UNION[
			| !(0 == nb) ~> '!'];
		49: UNION[
			| !(0 == nb) ~> '\000'];
		4: UNION[
			| !(0 == nb) ~> 'i'];
		5: UNION[
			| !(0 == nb) ~> 'n'];
		6: UNION[
			| !(0 == nb) ~> 'g'];
		7: UNION[
			| !(0 == nb) ~> ' '];
		8: UNION[
			| !(0 == nb) ~> 'r'];
		9: UNION[
			| !(0 == nb) ~> 'e'];
		 ... UNION[
	| !(0 == nb) ~> 50] ... |]
	| System.String.m_StringLength ~> UNION[
		| !(0 == nb) ~> 49]]
nb ==> STRUCT TypeVariable1{VSharp.CSharpUtils.Tests.Conditional+NewBool}[]
---------- s1 = ----------
System.Environment ==> STRUCT System.Environment[
	| System.Environment.MaxEnvVariableValueLength ~> 32767
	| System.Environment.MaxMachineNameLength ~> 256
	| System.Environment.MaxSystemEnvVariableLength ~> 1024
	| System.Environment.MaxUserEnvVariableLength ~> 255
	| System.Environment.isUserNonInteractive ~> False
	| System.Environment.m_os ~> null
	| System.Environment.m_resHelper ~> null
	| System.Environment.processWinStation ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]
	| System.Environment.s_CheckedOSWin8OrAbove ~> False
	| System.Environment.s_CheckedWinRT ~> False
	| System.Environment.s_InternalSyncObject ~> null
	| System.Environment.s_IsWindows8OrAbove ~> False
	| System.Environment.s_WinRTSupported ~> False]
System.Exception ==> STRUCT System.Exception[
	| System.Exception._COMPlusExceptionCode ~> -532462766
	| System.Exception.s_EDILock ~> (HeapRef 4)]
System.IntPtr ==> STRUCT System.IntPtr[
	| System.IntPtr.Zero ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]]
System.NullReferenceException ==> STRUCT System.NullReferenceException[]
System.Object ==> STRUCT System.Object[]
System.Runtime.Serialization.SafeSerializationManager ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.RealTypeSerializationName ~> (HeapRef 6)]
System.SystemException ==> STRUCT System.SystemException[]
System.UIntPtr ==> STRUCT System.UIntPtr[
	| System.UIntPtr.Zero ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]]
System.ValueType ==> STRUCT System.ValueType[]
VSharp.CSharpUtils.Tests.Conditional+NewBool ==> STRUCT VSharp.CSharpUtils.Tests.Conditional+NewBool[]
VSharp.CSharpUtils.Tests.Conditional ==> STRUCT VSharp.CSharpUtils.Tests.Conditional[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Conditional.ExceptionInCondition2(VSharp.CSharpUtils.Tests.Conditional+NewBool)
RESULT: UNION[
	| !(0 == nb) & !nb.VSharp.CSharpUtils.Tests.Conditional+NewBool.BoolValue ~> 56
	| !(0 == nb) & nb.VSharp.CSharpUtils.Tests.Conditional+NewBool.BoolValue ~> 42
	| 0 == nb ~> <ERROR: (HeapRef 1)>]
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> STRUCT System.NullReferenceException[
	| System.Exception._HResult ~> -2147467261
	| System.Exception._className ~> null
	| System.Exception._data ~> null
	| System.Exception._dynamicMethods ~> null
	| System.Exception._exceptionMethod ~> null
	| System.Exception._exceptionMethodString ~> null
	| System.Exception._helpURL ~> null
	| System.Exception._innerException ~> null
	| System.Exception._ipForWatsonBuckets ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]
	| System.Exception._message ~> (HeapRef 3)
	| System.Exception._remoteStackIndex ~> 0
	| System.Exception._remoteStackTraceString ~> null
	| System.Exception._safeSerializationManager ~> (HeapRef 5)
	| System.Exception._source ~> null
	| System.Exception._stackTrace ~> null
	| System.Exception._stackTraceString ~> null
	| System.Exception._watsonBuckets ~> null
	| System.Exception._xcode ~> -532462766
	| System.Exception._xptrs ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> 0]]
10 ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.m_realObject ~> UNION[
		| !(0 == nb) ~> null]
	| System.Runtime.Serialization.SafeSerializationManager.m_realType ~> UNION[
		| !(0 == nb) ~> null]
	| System.Runtime.Serialization.SafeSerializationManager.m_savedSerializationInfo ~> UNION[
		| !(0 == nb) ~> null]
	| System.Runtime.Serialization.SafeSerializationManager.m_serializedStates ~> UNION[
		| !(0 == nb) ~> null]]
2 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'A';
		10: 'f';
		11: 'e';
		12: 'r';
		13: 'e';
		14: 'n';
		15: 'c';
		16: 'e';
		17: 'E';
		18: 'x';
		19: 'c';
		1: 'r';
		20: 'e';
		21: 'p';
		22: 't';
		23: 'i';
		24: 'o';
		25: 'n';
		26: '\000';
		2: 'g';
		3: '_';
		4: 'N';
		5: 'u';
		6: 'l';
		7: 'l';
		8: 'R';
		9: 'e';
		 ... 27 ... |]
	| System.String.m_StringLength ~> 26]
3 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'G';
		10: 's';
		11: 'o';
		12: 'u';
		13: 'r';
		14: 'c';
		15: 'e';
		16: ' ';
		17: 's';
		18: 't';
		19: 'r';
		1: 'e';
		20: 'i';
		21: 'n';
		22: 'g';
		23: 's';
		24: ' ';
		25: 'c';
		26: 'u';
		27: 'r';
		28: 'r';
		29: 'e';
		2: 't';
		30: 'n';
		31: 't';
		32: 'l';
		33: 'y';
		34: ' ';
		35: 'n';
		36: 'o';
		37: 't';
		38: ' ';
		39: 's';
		3: 't';
		40: 'u';
		41: 'p';
		42: 'p';
		43: 'o';
		44: 'r';
		45: 't';
		46: 'e';
		47: 'd';
		48: '!';
		49: '\000';
		4: 'i';
		5: 'n';
		6: 'g';
		7: ' ';
		8: 'r';
		9: 'e';
		 ... 50 ... |]
	| System.String.m_StringLength ~> 49]
4 ==> STRUCT System.Object[]
5 ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.m_realObject ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_realType ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_savedSerializationInfo ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_serializedStates ~> null]
6 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'C';
		10: 'r';
		11: 'i';
		12: 'a';
		13: 'l';
		14: 'i';
		15: 'z';
		16: 'a';
		17: 't';
		18: 'i';
		19: 'o';
		1: 'L';
		20: 'n';
		21: 'M';
		22: 'a';
		23: 'n';
		24: 'a';
		25: 'g';
		26: 'e';
		27: 'r';
		28: '_';
		29: 'R';
		2: 'R';
		30: 'e';
		31: 'a';
		32: 'l';
		33: 'T';
		34: 'y';
		35: 'p';
		36: 'e';
		37: '\000';
		3: '_';
		4: 'S';
		5: 'a';
		6: 'f';
		7: 'e';
		8: 'S';
		9: 'e';
		 ... 38 ... |]
	| System.String.m_StringLength ~> 37]
7 ==> STRUCT System.NullReferenceException[
	| System.Exception._HResult ~> UNION[
		| !(0 == nb) ~> -2147467261]
	| System.Exception._className ~> UNION[
		| !(0 == nb) ~> null]
	| System.Exception._data ~> UNION[
		| !(0 == nb) ~> null]
	| System.Exception._dynamicMethods ~> UNION[
		| !(0 == nb) ~> null]
	| System.Exception._exceptionMethod ~> UNION[
		| !(0 == nb) ~> null]
	| System.Exception._exceptionMethodString ~> UNION[
		| !(0 == nb) ~> null]
	| System.Exception._helpURL ~> UNION[
		| !(0 == nb) ~> null]
	| System.Exception._innerException ~> UNION[
		| !(0 == nb) ~> null]
	| System.Exception._ipForWatsonBuckets ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> UNION[
			| !(0 == nb) ~> null]]
	| System.Exception._message ~> UNION[
		| !(0 == nb) ~> (HeapRef 9)]
	| System.Exception._remoteStackIndex ~> UNION[
		| !(0 == nb) ~> 0]
	| System.Exception._remoteStackTraceString ~> UNION[
		| !(0 == nb) ~> null]
	| System.Exception._safeSerializationManager ~> UNION[
		| !(0 == nb) ~> (HeapRef 10)]
	| System.Exception._source ~> UNION[
		| !(0 == nb) ~> null]
	| System.Exception._stackTrace ~> UNION[
		| !(0 == nb) ~> null]
	| System.Exception._stackTraceString ~> UNION[
		| !(0 == nb) ~> null]
	| System.Exception._watsonBuckets ~> UNION[
		| !(0 == nb) ~> null]
	| System.Exception._xcode ~> UNION[
		| !(0 == nb) ~> -532462766]
	| System.Exception._xptrs ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> UNION[
			| !(0 == nb) ~> 0]]]
8 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: UNION[
			| !(0 == nb) ~> 'A'];
		10: UNION[
			| !(0 == nb) ~> 'f'];
		11: UNION[
			| !(0 == nb) ~> 'e'];
		12: UNION[
			| !(0 == nb) ~> 'r'];
		13: UNION[
			| !(0 == nb) ~> 'e'];
		14: UNION[
			| !(0 == nb) ~> 'n'];
		15: UNION[
			| !(0 == nb) ~> 'c'];
		16: UNION[
			| !(0 == nb) ~> 'e'];
		17: UNION[
			| !(0 == nb) ~> 'E'];
		18: UNION[
			| !(0 == nb) ~> 'x'];
		19: UNION[
			| !(0 == nb) ~> 'c'];
		1: UNION[
			| !(0 == nb) ~> 'r'];
		20: UNION[
			| !(0 == nb) ~> 'e'];
		21: UNION[
			| !(0 == nb) ~> 'p'];
		22: UNION[
			| !(0 == nb) ~> 't'];
		23: UNION[
			| !(0 == nb) ~> 'i'];
		24: UNION[
			| !(0 == nb) ~> 'o'];
		25: UNION[
			| !(0 == nb) ~> 'n'];
		26: UNION[
			| !(0 == nb) ~> '\000'];
		2: UNION[
			| !(0 == nb) ~> 'g'];
		3: UNION[
			| !(0 == nb) ~> '_'];
		4: UNION[
			| !(0 == nb) ~> 'N'];
		5: UNION[
			| !(0 == nb) ~> 'u'];
		6: UNION[
			| !(0 == nb) ~> 'l'];
		7: UNION[
			| !(0 == nb) ~> 'l'];
		8: UNION[
			| !(0 == nb) ~> 'R'];
		9: UNION[
			| !(0 == nb) ~> 'e'];
		 ... UNION[
	| !(0 == nb) ~> 27] ... |]
	| System.String.m_StringLength ~> UNION[
		| !(0 == nb) ~> 26]]
9 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: UNION[
			| !(0 == nb) ~> 'G'];
		10: UNION[
			| !(0 == nb) ~> 's'];
		11: UNION[
			| !(0 == nb) ~> 'o'];
		12: UNION[
			| !(0 == nb) ~> 'u'];
		13: UNION[
			| !(0 == nb) ~> 'r'];
		14: UNION[
			| !(0 == nb) ~> 'c'];
		15: UNION[
			| !(0 == nb) ~> 'e'];
		16: UNION[
			| !(0 == nb) ~> ' '];
		17: UNION[
			| !(0 == nb) ~> 's'];
		18: UNION[
			| !(0 == nb) ~> 't'];
		19: UNION[
			| !(0 == nb) ~> 'r'];
		1: UNION[
			| !(0 == nb) ~> 'e'];
		20: UNION[
			| !(0 == nb) ~> 'i'];
		21: UNION[
			| !(0 == nb) ~> 'n'];
		22: UNION[
			| !(0 == nb) ~> 'g'];
		23: UNION[
			| !(0 == nb) ~> 's'];
		24: UNION[
			| !(0 == nb) ~> ' '];
		25: UNION[
			| !(0 == nb) ~> 'c'];
		26: UNION[
			| !(0 == nb) ~> 'u'];
		27: UNION[
			| !(0 == nb) ~> 'r'];
		28: UNION[
			| !(0 == nb) ~> 'r'];
		29: UNION[
			| !(0 == nb) ~> 'e'];
		2: UNION[
			| !(0 == nb) ~> 't'];
		30: UNION[
			| !(0 == nb) ~> 'n'];
		31: UNION[
			| !(0 == nb) ~> 't'];
		32: UNION[
			| !(0 == nb) ~> 'l'];
		33: UNION[
			| !(0 == nb) ~> 'y'];
		34: UNION[
			| !(0 == nb) ~> ' '];
		35: UNION[
			| !(0 == nb) ~> 'n'];
		36: UNION[
			| !(0 == nb) ~> 'o'];
		37: UNION[
			| !(0 == nb) ~> 't'];
		38: UNION[
			| !(0 == nb) ~> ' '];
		39: UNION[
			| !(0 == nb) ~> 's'];
		3: UNION[
			| !(0 == nb) ~> 't'];
		40: UNION[
			| !(0 == nb) ~> 'u'];
		41: UNION[
			| !(0 == nb) ~> 'p'];
		42: UNION[
			| !(0 == nb) ~> 'p'];
		43: UNION[
			| !(0 == nb) ~> 'o'];
		44: UNION[
			| !(0 == nb) ~> 'r'];
		45: UNION[
			| !(0 == nb) ~> 't'];
		46: UNION[
			| !(0 == nb) ~> 'e'];
		47: UNION[
			| !(0 == nb) ~> 'd'];
		48: UNION[
			| !(0 == nb) ~> '!'];
		49: UNION[
			| !(0 == nb) ~> '\000'];
		4: UNION[
			| !(0 == nb) ~> 'i'];
		5: UNION[
			| !(0 == nb) ~> 'n'];
		6: UNION[
			| !(0 == nb) ~> 'g'];
		7: UNION[
			| !(0 == nb) ~> ' '];
		8: UNION[
			| !(0 == nb) ~> 'r'];
		9: UNION[
			| !(0 == nb) ~> 'e'];
		 ... UNION[
	| !(0 == nb) ~> 50] ... |]
	| System.String.m_StringLength ~> UNION[
		| !(0 == nb) ~> 49]]
nb ==> STRUCT TypeVariable1{VSharp.CSharpUtils.Tests.Conditional+NewBool}[]
---------- s1 = ----------
System.Environment ==> STRUCT System.Environment[
	| System.Environment.MaxEnvVariableValueLength ~> 32767
	| System.Environment.MaxMachineNameLength ~> 256
	| System.Environment.MaxSystemEnvVariableLength ~> 1024
	| System.Environment.MaxUserEnvVariableLength ~> 255
	| System.Environment.isUserNonInteractive ~> False
	| System.Environment.m_os ~> null
	| System.Environment.m_resHelper ~> null
	| System.Environment.processWinStation ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]
	| System.Environment.s_CheckedOSWin8OrAbove ~> False
	| System.Environment.s_CheckedWinRT ~> False
	| System.Environment.s_InternalSyncObject ~> null
	| System.Environment.s_IsWindows8OrAbove ~> False
	| System.Environment.s_WinRTSupported ~> False]
System.Exception ==> STRUCT System.Exception[
	| System.Exception._COMPlusExceptionCode ~> -532462766
	| System.Exception.s_EDILock ~> (HeapRef 4)]
System.IntPtr ==> STRUCT System.IntPtr[
	| System.IntPtr.Zero ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]]
System.NullReferenceException ==> STRUCT System.NullReferenceException[]
System.Object ==> STRUCT System.Object[]
System.Runtime.Serialization.SafeSerializationManager ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.RealTypeSerializationName ~> (HeapRef 6)]
System.SystemException ==> STRUCT System.SystemException[]
System.UIntPtr ==> STRUCT System.UIntPtr[
	| System.UIntPtr.Zero ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]]
System.ValueType ==> STRUCT System.ValueType[]
VSharp.CSharpUtils.Tests.Conditional+NewBool ==> STRUCT VSharp.CSharpUtils.Tests.Conditional+NewBool[]
VSharp.CSharpUtils.Tests.Conditional ==> STRUCT VSharp.CSharpUtils.Tests.Conditional[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Conditional.ExceptionInCondition3(VSharp.CSharpUtils.Tests.Conditional+NewBool)
RESULT: <ERROR: UNION[
	| !(0 == nb) ~> (HeapRef 7)
	| 0 == nb ~> (HeapRef 1)]>
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> STRUCT System.NullReferenceException[
	| System.Exception._HResult ~> -2147467261
	| System.Exception._className ~> null
	| System.Exception._data ~> null
	| System.Exception._dynamicMethods ~> null
	| System.Exception._exceptionMethod ~> null
	| System.Exception._exceptionMethodString ~> null
	| System.Exception._helpURL ~> null
	| System.Exception._innerException ~> null
	| System.Exception._ipForWatsonBuckets ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]
	| System.Exception._message ~> (HeapRef 3)
	| System.Exception._remoteStackIndex ~> 0
	| System.Exception._remoteStackTraceString ~> null
	| System.Exception._safeSerializationManager ~> (HeapRef 5)
	| System.Exception._source ~> null
	| System.Exception._stackTrace ~> null
	| System.Exception._stackTraceString ~> null
	| System.Exception._watsonBuckets ~> null
	| System.Exception._xcode ~> -532462766
	| System.Exception._xptrs ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> 0]]
10 ==> STRUCT System.Object[]
11 ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.m_realObject ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_realType ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_savedSerializationInfo ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_serializedStates ~> null]
12 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'C';
		10: 'r';
		11: 'i';
		12: 'a';
		13: 'l';
		14: 'i';
		15: 'z';
		16: 'a';
		17: 't';
		18: 'i';
		19: 'o';
		1: 'L';
		20: 'n';
		21: 'M';
		22: 'a';
		23: 'n';
		24: 'a';
		25: 'g';
		26: 'e';
		27: 'r';
		28: '_';
		29: 'R';
		2: 'R';
		30: 'e';
		31: 'a';
		32: 'l';
		33: 'T';
		34: 'y';
		35: 'p';
		36: 'e';
		37: '\000';
		3: '_';
		4: 'S';
		5: 'a';
		6: 'f';
		7: 'e';
		8: 'S';
		9: 'e';
		 ... 38 ... |]
	| System.String.m_StringLength ~> 37]
2 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'A';
		10: 'f';
		11: 'e';
		12: 'r';
		13: 'e';
		14: 'n';
		15: 'c';
		16: 'e';
		17: 'E';
		18: 'x';
		19: 'c';
		1: 'r';
		20: 'e';
		21: 'p';
		22: 't';
		23: 'i';
		24: 'o';
		25: 'n';
		26: '\000';
		2: 'g';
		3: '_';
		4: 'N';
		5: 'u';
		6: 'l';
		7: 'l';
		8: 'R';
		9: 'e';
		 ... 27 ... |]
	| System.String.m_StringLength ~> 26]
3 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'G';
		10: 's';
		11: 'o';
		12: 'u';
		13: 'r';
		14: 'c';
		15: 'e';
		16: ' ';
		17: 's';
		18: 't';
		19: 'r';
		1: 'e';
		20: 'i';
		21: 'n';
		22: 'g';
		23: 's';
		24: ' ';
		25: 'c';
		26: 'u';
		27: 'r';
		28: 'r';
		29: 'e';
		2: 't';
		30: 'n';
		31: 't';
		32: 'l';
		33: 'y';
		34: ' ';
		35: 'n';
		36: 'o';
		37: 't';
		38: ' ';
		39: 's';
		3: 't';
		40: 'u';
		41: 'p';
		42: 'p';
		43: 'o';
		44: 'r';
		45: 't';
		46: 'e';
		47: 'd';
		48: '!';
		49: '\000';
		4: 'i';
		5: 'n';
		6: 'g';
		7: ' ';
		8: 'r';
		9: 'e';
		 ... 50 ... |]
	| System.String.m_StringLength ~> 49]
4 ==> STRUCT System.Object[]
5 ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.m_realObject ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_realType ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_savedSerializationInfo ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_serializedStates ~> null]
6 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'C';
		10: 'r';
		11: 'i';
		12: 'a';
		13: 'l';
		14: 'i';
		15: 'z';
		16: 'a';
		17: 't';
		18: 'i';
		19: 'o';
		1: 'L';
		20: 'n';
		21: 'M';
		22: 'a';
		23: 'n';
		24: 'a';
		25: 'g';
		26: 'e';
		27: 'r';
		28: '_';
		29: 'R';
		2: 'R';
		30: 'e';
		31: 'a';
		32: 'l';
		33: 'T';
		34: 'y';
		35: 'p';
		36: 'e';
		37: '\000';
		3: '_';
		4: 'S';
		5: 'a';
		6: 'f';
		7: 'e';
		8: 'S';
		9: 'e';
		 ... 38 ... |]
	| System.String.m_StringLength ~> 37]
7 ==> STRUCT System.NotImplementedException[
	| System.Exception._HResult ~> -2147467263
	| System.Exception._className ~> null
	| System.Exception._data ~> null
	| System.Exception._dynamicMethods ~> null
	| System.Exception._exceptionMethod ~> null
	| System.Exception._exceptionMethodString ~> null
	| System.Exception._helpURL ~> null
	| System.Exception._innerException ~> null
	| System.Exception._ipForWatsonBuckets ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]
	| System.Exception._message ~> (HeapRef 9)
	| System.Exception._remoteStackIndex ~> 0
	| System.Exception._remoteStackTraceString ~> null
	| System.Exception._safeSerializationManager ~> (HeapRef 11)
	| System.Exception._source ~> null
	| System.Exception._stackTrace ~> null
	| System.Exception._stackTraceString ~> null
	| System.Exception._watsonBuckets ~> null
	| System.Exception._xcode ~> -532462766
	| System.Exception._xptrs ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> 0]]
8 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'A';
		10: 'l';
		11: 'e';
		12: 'm';
		13: 'e';
		14: 'n';
		15: 't';
		16: 'e';
		17: 'd';
		18: 'E';
		19: 'x';
		1: 'r';
		20: 'c';
		21: 'e';
		22: 'p';
		23: 't';
		24: 'i';
		25: 'o';
		26: 'n';
		27: '\000';
		2: 'g';
		3: '_';
		4: 'N';
		5: 'o';
		6: 't';
		7: 'I';
		8: 'm';
		9: 'p';
		 ... 28 ... |]
	| System.String.m_StringLength ~> 27]
9 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'G';
		10: 's';
		11: 'o';
		12: 'u';
		13: 'r';
		14: 'c';
		15: 'e';
		16: ' ';
		17: 's';
		18: 't';
		19: 'r';
		1: 'e';
		20: 'i';
		21: 'n';
		22: 'g';
		23: 's';
		24: ' ';
		25: 'c';
		26: 'u';
		27: 'r';
		28: 'r';
		29: 'e';
		2: 't';
		30: 'n';
		31: 't';
		32: 'l';
		33: 'y';
		34: ' ';
		35: 'n';
		36: 'o';
		37: 't';
		38: ' ';
		39: 's';
		3: 't';
		40: 'u';
		41: 'p';
		42: 'p';
		43: 'o';
		44: 'r';
		45: 't';
		46: 'e';
		47: 'd';
		48: '!';
		49: '\000';
		4: 'i';
		5: 'n';
		6: 'g';
		7: ' ';
		8: 'r';
		9: 'e';
		 ... 50 ... |]
	| System.String.m_StringLength ~> 49]
---------- s1 = ----------
System.Environment ==> STRUCT System.Environment[
	| System.Environment.MaxEnvVariableValueLength ~> 32767
	| System.Environment.MaxMachineNameLength ~> 256
	| System.Environment.MaxSystemEnvVariableLength ~> 1024
	| System.Environment.MaxUserEnvVariableLength ~> 255
	| System.Environment.isUserNonInteractive ~> False
	| System.Environment.m_os ~> null
	| System.Environment.m_resHelper ~> null
	| System.Environment.processWinStation ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]
	| System.Environment.s_CheckedOSWin8OrAbove ~> False
	| System.Environment.s_CheckedWinRT ~> False
	| System.Environment.s_InternalSyncObject ~> null
	| System.Environment.s_IsWindows8OrAbove ~> False
	| System.Environment.s_WinRTSupported ~> False]
System.Exception ==> STRUCT System.Exception[
	| System.Exception._COMPlusExceptionCode ~> -532462766
	| System.Exception.s_EDILock ~> UNION[
		| !(0 == nb) ~> (HeapRef 10)
		| 0 == nb ~> (HeapRef 4)]]
System.IntPtr ==> STRUCT System.IntPtr[
	| System.IntPtr.Zero ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]]
System.NotImplementedException ==> STRUCT System.NotImplementedException[]
System.NullReferenceException ==> STRUCT System.NullReferenceException[]
System.Object ==> STRUCT System.Object[]
System.Runtime.Serialization.SafeSerializationManager ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.RealTypeSerializationName ~> UNION[
		| !(0 == nb) ~> (HeapRef 12)
		| 0 == nb ~> (HeapRef 6)]]
System.SystemException ==> STRUCT System.SystemException[]
System.UIntPtr ==> STRUCT System.UIntPtr[
	| System.UIntPtr.Zero ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]]
System.ValueType ==> STRUCT System.ValueType[]
VSharp.CSharpUtils.Tests.Conditional+NewBool ==> STRUCT VSharp.CSharpUtils.Tests.Conditional+NewBool[]
VSharp.CSharpUtils.Tests.Conditional ==> STRUCT VSharp.CSharpUtils.Tests.Conditional[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Conditional.DeclareAfterReturn(System.Boolean, System.Boolean, System.Int32)
RESULT: UNION[
	| !f ~> x
	| !flag & f ~> x + x + x + x
	| f & flag ~> 42]
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Conditional ==> STRUCT VSharp.CSharpUtils.Tests.Conditional[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Conditional.PreconditionLoop(System.Int32)
RESULT: UNION[
	| !(0 < n) ~> 0
	| !(1 < n) & 0 < n ~> 1
	| 0 < n & 1 < n ~> μ[<delegate>, num]]
HEAP:
{ heap = merge[
	(!(0 < n) | !(1 < n), <empty>),
	(0 < n & 1 < n, { heap = <empty>, statics = s0 } ⚪ recapp(<delegate>))], statics = merge[
	(!(0 < n) | !(1 < n), s0),
	(0 < n & 1 < n, { heap = <empty>, statics = s0 } ⚪ recapp(<delegate>))] } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Conditional ==> STRUCT VSharp.CSharpUtils.Tests.Conditional[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Conditional.PostconditionLoop(System.Int32)
RESULT: UNION[
	| !(-1 + n <= 0) & !(-2 + n <= 0) ~> μ[<delegate>, num]
	| !(-1 + n <= 0) & -2 + n <= 0 ~> -2 + n
	| -1 + n <= 0 ~> -1 + n]
HEAP:
{ heap = merge[
	(-1 + n <= 0 | -2 + n <= 0, <empty>),
	(!(-1 + n <= 0) & !(-2 + n <= 0), { heap = <empty>, statics = s0 } ⚪ recapp(<delegate>))], statics = merge[
	(-1 + n <= 0 | -2 + n <= 0, s0),
	(!(-1 + n <= 0) & !(-2 + n <= 0), { heap = <empty>, statics = s0 } ⚪ recapp(<delegate>))] } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Conditional ==> STRUCT VSharp.CSharpUtils.Tests.Conditional[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Fibonacci.Fib2()
RESULT: 2
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Fibonacci ==> STRUCT VSharp.CSharpUtils.Tests.Fibonacci[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Fibonacci.Fib5()
RESULT: 8
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Fibonacci ==> STRUCT VSharp.CSharpUtils.Tests.Fibonacci[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Fibonacci.FibUnbound(System.Int32)
RESULT: UNION[
	| !(-1 + n < 2) & !(n < 2) ~> 42 + VSharp.CSharpUtils.Tests.Fibonacci._a + VSharp.CSharpUtils.Tests.Fibonacci._b + VSharp.CSharpUtils.Tests.Fibonacci._a + VSharp.CSharpUtils.Tests.Fibonacci._b + VSharp.CSharpUtils.Tests.Fibonacci._b
	| !(n < 2) & -1 + n < 2 ~> 45
	| n < 2 ~> 44]
HEAP:
{ heap = merge[
	(-1 + n < 2 | n < 2, <empty>),
	(!(-1 + n < 2) & !(n < 2), { heap = <empty>, statics = s0 } ⚪ recapp(MutatingFib))], statics = merge[
	(-1 + n < 2 | n < 2, s1),
	(!(-1 + n < 2) & !(n < 2), write({ heap = <empty>, statics = s0 } ⚪ recapp(MutatingFib), s2))] } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Fibonacci ==> STRUCT VSharp.CSharpUtils.Tests.Fibonacci[
	| VSharp.CSharpUtils.Tests.Fibonacci._c ~> 42]
---------- s1 = ----------
VSharp.CSharpUtils.Tests.Fibonacci ==> STRUCT VSharp.CSharpUtils.Tests.Fibonacci[
	| VSharp.CSharpUtils.Tests.Fibonacci._a ~> UNION[
		| -1 + n < 2 | n < 2 ~> 1]
	| VSharp.CSharpUtils.Tests.Fibonacci._b ~> UNION[
		| !(n < 2) & -1 + n < 2 ~> 2
		| n < 2 ~> 1]
	| VSharp.CSharpUtils.Tests.Fibonacci._c ~> UNION[
		| -1 + n < 2 | n < 2 ~> 42]]
---------- s2 = ----------
VSharp.CSharpUtils.Tests.Fibonacci ==> STRUCT VSharp.CSharpUtils.Tests.Fibonacci[
	| VSharp.CSharpUtils.Tests.Fibonacci._a ~> UNION[
		| !(-1 + n < 2) ~> VSharp.CSharpUtils.Tests.Fibonacci._a + VSharp.CSharpUtils.Tests.Fibonacci._b
		| -1 + n < 2 ~> 1]
	| VSharp.CSharpUtils.Tests.Fibonacci._b ~> UNION[
		| !(-1 + n < 2) ~> VSharp.CSharpUtils.Tests.Fibonacci._a + VSharp.CSharpUtils.Tests.Fibonacci._b + VSharp.CSharpUtils.Tests.Fibonacci._b
		| -1 + n < 2 ~> 2]]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.GCD.Gcd1()
RESULT: 1
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.GCD ==> STRUCT VSharp.CSharpUtils.Tests.GCD[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.GCD.Gcd15()
RESULT: 15
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.GCD ==> STRUCT VSharp.CSharpUtils.Tests.GCD[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Lambdas.Always18()
RESULT: 18
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> <Lambda Expression System.Int32 -> TypeVariable1{<nullType>}>
---------- s1 = ----------
VSharp.CSharpUtils.Tests.Lambdas ==> STRUCT VSharp.CSharpUtils.Tests.Lambdas[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Lambdas.DoubleValue(System.Int32, System.Boolean)
RESULT: True
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> <Lambda Expression System.Int32 -> TypeVariable1{<nullType>}>
2 ==> <Lambda Expression System.Int32 -> TypeVariable2{<nullType>}>
---------- s1 = ----------
VSharp.CSharpUtils.Tests.Lambdas ==> STRUCT VSharp.CSharpUtils.Tests.Lambdas[]
METHOD: System.String VSharp.CSharpUtils.Tests.Strings.EmptyString(System.Int32, System.Int32)
RESULT: null
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
System.String ==> STRUCT System.String[
	| System.String.Empty ~> null
	| System.String.TrimBoth ~> 2
	| System.String.TrimHead ~> 0
	| System.String.TrimTail ~> 1
	| System.String.alignConst ~> 3
	| System.String.charPtrAlignConst ~> 1]
VSharp.CSharpUtils.Tests.Strings ==> STRUCT VSharp.CSharpUtils.Tests.Strings[]
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Lists.Construct()
RESULT: True
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> STRUCT System.Collections.Generic.List`1[System.Int32][
	| System.Collections.Generic.List`1._items ~> (HeapRef 3)
	| System.Collections.Generic.List`1._size ~> 4
	| System.Collections.Generic.List`1._syncRoot ~> null
	| System.Collections.Generic.List`1._version ~> 4]
2 ==> [| ... 0 ... |]
3 ==> [|
	0: 1;
	1: 2;
	2: 3;
	3: 4;
	 ... 4 ... |]
4 ==> [| ... 4 x 1 ... |]
5 ==> [|
	0: 5;
	1: 6;
	2: 7;
	3: 8;
	 ... 4 ... |]
---------- s1 = ----------
System.Array ==> STRUCT System.Array[
	| System.Array.MaxArrayLength ~> 2146435071
	| System.Array.MaxByteArrayLength ~> 2147483591]
System.Collections.Generic.List`1 ==> STRUCT System.Collections.Generic.List`1[System.Int32][
	| System.Collections.Generic.List`1._defaultCapacity ~> 4
	| System.Collections.Generic.List`1._emptyArray ~> (HeapRef 2)]
System.Object ==> STRUCT System.Object[]
VSharp.CSharpUtils.Tests.Lists ==> STRUCT VSharp.CSharpUtils.Tests.Lists[]
METHOD: System.Int32[] VSharp.CSharpUtils.Tests.Lists.Mutate(System.Int32)
RESULT: UNION[
	| !(i < 0) & i < 5 ~> (HeapRef 1)
	| !(i < 5) | i < 0 ~> <ERROR: (HeapRef 2)>]
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: UNION[
		| !(0 == i) | !(i < 5) | i < 0 ~> 1
		| !(i < 0) & 0 == i & i < 5 ~> 10];
	1: UNION[
		| !(1 == i) | !(i < 5) | i < 0 ~> 2
		| !(i < 0) & 1 == i & i < 5 ~> 10];
	2: UNION[
		| !(2 == i) | !(i < 5) | i < 0 ~> 3
		| !(i < 0) & 2 == i & i < 5 ~> 10];
	3: UNION[
		| !(3 == i) | !(i < 5) | i < 0 ~> 4
		| !(i < 0) & 3 == i & i < 5 ~> 10];
	4: UNION[
		| !(4 == i) | !(i < 5) | i < 0 ~> 5
		| !(i < 0) & 4 == i & i < 5 ~> 10];
	i: UNION[
		| !(0 == i) & !(1 == i) & !(2 == i) & !(3 == i) & !(4 == i) & !(i < 0) & i < 5 ~> 10
		| !(i < 0) & (0 == i | 1 == i | 2 == i | 3 == i | 4 == i) & i < 5 ~> 0];
	 ... 5 ... |]
2 ==> STRUCT System.IndexOutOfRangeException[
	| System.Exception._HResult ~> -2146233080
	| System.Exception._className ~> null
	| System.Exception._data ~> null
	| System.Exception._dynamicMethods ~> null
	| System.Exception._exceptionMethod ~> null
	| System.Exception._exceptionMethodString ~> null
	| System.Exception._helpURL ~> null
	| System.Exception._innerException ~> null
	| System.Exception._ipForWatsonBuckets ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]
	| System.Exception._message ~> (HeapRef 4)
	| System.Exception._remoteStackIndex ~> 0
	| System.Exception._remoteStackTraceString ~> null
	| System.Exception._safeSerializationManager ~> (HeapRef 6)
	| System.Exception._source ~> null
	| System.Exception._stackTrace ~> null
	| System.Exception._stackTraceString ~> null
	| System.Exception._watsonBuckets ~> null
	| System.Exception._xcode ~> -532462766
	| System.Exception._xptrs ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> 0]]
3 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'A';
		10: 'u';
		11: 't';
		12: 'O';
		13: 'f';
		14: 'R';
		15: 'a';
		16: 'n';
		17: 'g';
		18: 'e';
		19: 'E';
		1: 'r';
		20: 'x';
		21: 'c';
		22: 'e';
		23: 'p';
		24: 't';
		25: 'i';
		26: 'o';
		27: 'n';
		28: '\000';
		2: 'g';
		3: '_';
		4: 'I';
		5: 'n';
		6: 'd';
		7: 'e';
		8: 'x';
		9: 'O';
		 ... 29 ... |]
	| System.String.m_StringLength ~> 28]
4 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'G';
		10: 's';
		11: 'o';
		12: 'u';
		13: 'r';
		14: 'c';
		15: 'e';
		16: ' ';
		17: 's';
		18: 't';
		19: 'r';
		1: 'e';
		20: 'i';
		21: 'n';
		22: 'g';
		23: 's';
		24: ' ';
		25: 'c';
		26: 'u';
		27: 'r';
		28: 'r';
		29: 'e';
		2: 't';
		30: 'n';
		31: 't';
		32: 'l';
		33: 'y';
		34: ' ';
		35: 'n';
		36: 'o';
		37: 't';
		38: ' ';
		39: 's';
		3: 't';
		40: 'u';
		41: 'p';
		42: 'p';
		43: 'o';
		44: 'r';
		45: 't';
		46: 'e';
		47: 'd';
		48: '!';
		49: '\000';
		4: 'i';
		5: 'n';
		6: 'g';
		7: ' ';
		8: 'r';
		9: 'e';
		 ... 50 ... |]
	| System.String.m_StringLength ~> 49]
5 ==> STRUCT System.Object[]
6 ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.m_realObject ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_realType ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_savedSerializationInfo ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_serializedStates ~> null]
7 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'C';
		10: 'r';
		11: 'i';
		12: 'a';
		13: 'l';
		14: 'i';
		15: 'z';
		16: 'a';
		17: 't';
		18: 'i';
		19: 'o';
		1: 'L';
		20: 'n';
		21: 'M';
		22: 'a';
		23: 'n';
		24: 'a';
		25: 'g';
		26: 'e';
		27: 'r';
		28: '_';
		29: 'R';
		2: 'R';
		30: 'e';
		31: 'a';
		32: 'l';
		33: 'T';
		34: 'y';
		35: 'p';
		36: 'e';
		37: '\000';
		3: '_';
		4: 'S';
		5: 'a';
		6: 'f';
		7: 'e';
		8: 'S';
		9: 'e';
		 ... 38 ... |]
	| System.String.m_StringLength ~> 37]
---------- s1 = ----------
System.Environment ==> STRUCT System.Environment[
	| System.Environment.MaxEnvVariableValueLength ~> 32767
	| System.Environment.MaxMachineNameLength ~> 256
	| System.Environment.MaxSystemEnvVariableLength ~> 1024
	| System.Environment.MaxUserEnvVariableLength ~> 255
	| System.Environment.isUserNonInteractive ~> False
	| System.Environment.m_os ~> null
	| System.Environment.m_resHelper ~> null
	| System.Environment.processWinStation ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]
	| System.Environment.s_CheckedOSWin8OrAbove ~> False
	| System.Environment.s_CheckedWinRT ~> False
	| System.Environment.s_InternalSyncObject ~> null
	| System.Environment.s_IsWindows8OrAbove ~> False
	| System.Environment.s_WinRTSupported ~> False]
System.Exception ==> STRUCT System.Exception[
	| System.Exception._COMPlusExceptionCode ~> -532462766
	| System.Exception.s_EDILock ~> (HeapRef 5)]
System.IndexOutOfRangeException ==> STRUCT System.IndexOutOfRangeException[]
System.IntPtr ==> STRUCT System.IntPtr[
	| System.IntPtr.Zero ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]]
System.Object ==> STRUCT System.Object[]
System.Runtime.Serialization.SafeSerializationManager ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.RealTypeSerializationName ~> (HeapRef 7)]
System.SystemException ==> STRUCT System.SystemException[]
System.UIntPtr ==> STRUCT System.UIntPtr[
	| System.UIntPtr.Zero ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]]
System.ValueType ==> STRUCT System.ValueType[]
VSharp.CSharpUtils.Tests.Lists ==> STRUCT VSharp.CSharpUtils.Tests.Lists[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Lists.LowerBoundTest()
RESULT: 0
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0, 0: 1;
	0, 1: 1;
	1, 0: 2;
	1, 1: 2;
	2, 0: 3;
	2, 1: 3;
	3, 0: 4;
	3, 1: 4;
	 ... 4 x 2 ... |]
---------- s1 = ----------
System.Array ==> STRUCT System.Array[
	| System.Array.MaxArrayLength ~> 2146435071
	| System.Array.MaxByteArrayLength ~> 2147483591]
VSharp.CSharpUtils.Tests.Lists ==> STRUCT VSharp.CSharpUtils.Tests.Lists[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Lists.LowerBoundExceptionTest(System.Int32[,])
RESULT: <ERROR: UNION[
	| !(0 == array) ~> (HeapRef 7)
	| 0 == array ~> (HeapRef 1)]>
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> STRUCT System.NullReferenceException[
	| System.Exception._HResult ~> -2147467261
	| System.Exception._className ~> null
	| System.Exception._data ~> null
	| System.Exception._dynamicMethods ~> null
	| System.Exception._exceptionMethod ~> null
	| System.Exception._exceptionMethodString ~> null
	| System.Exception._helpURL ~> null
	| System.Exception._innerException ~> null
	| System.Exception._ipForWatsonBuckets ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]
	| System.Exception._message ~> (HeapRef 3)
	| System.Exception._remoteStackIndex ~> 0
	| System.Exception._remoteStackTraceString ~> null
	| System.Exception._safeSerializationManager ~> (HeapRef 5)
	| System.Exception._source ~> null
	| System.Exception._stackTrace ~> null
	| System.Exception._stackTraceString ~> null
	| System.Exception._watsonBuckets ~> null
	| System.Exception._xcode ~> -532462766
	| System.Exception._xptrs ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> 0]]
10 ==> STRUCT System.Object[]
11 ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.m_realObject ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_realType ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_savedSerializationInfo ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_serializedStates ~> null]
12 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'C';
		10: 'r';
		11: 'i';
		12: 'a';
		13: 'l';
		14: 'i';
		15: 'z';
		16: 'a';
		17: 't';
		18: 'i';
		19: 'o';
		1: 'L';
		20: 'n';
		21: 'M';
		22: 'a';
		23: 'n';
		24: 'a';
		25: 'g';
		26: 'e';
		27: 'r';
		28: '_';
		29: 'R';
		2: 'R';
		30: 'e';
		31: 'a';
		32: 'l';
		33: 'T';
		34: 'y';
		35: 'p';
		36: 'e';
		37: '\000';
		3: '_';
		4: 'S';
		5: 'a';
		6: 'f';
		7: 'e';
		8: 'S';
		9: 'e';
		 ... 38 ... |]
	| System.String.m_StringLength ~> 37]
2 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'A';
		10: 'f';
		11: 'e';
		12: 'r';
		13: 'e';
		14: 'n';
		15: 'c';
		16: 'e';
		17: 'E';
		18: 'x';
		19: 'c';
		1: 'r';
		20: 'e';
		21: 'p';
		22: 't';
		23: 'i';
		24: 'o';
		25: 'n';
		26: '\000';
		2: 'g';
		3: '_';
		4: 'N';
		5: 'u';
		6: 'l';
		7: 'l';
		8: 'R';
		9: 'e';
		 ... 27 ... |]
	| System.String.m_StringLength ~> 26]
3 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'G';
		10: 's';
		11: 'o';
		12: 'u';
		13: 'r';
		14: 'c';
		15: 'e';
		16: ' ';
		17: 's';
		18: 't';
		19: 'r';
		1: 'e';
		20: 'i';
		21: 'n';
		22: 'g';
		23: 's';
		24: ' ';
		25: 'c';
		26: 'u';
		27: 'r';
		28: 'r';
		29: 'e';
		2: 't';
		30: 'n';
		31: 't';
		32: 'l';
		33: 'y';
		34: ' ';
		35: 'n';
		36: 'o';
		37: 't';
		38: ' ';
		39: 's';
		3: 't';
		40: 'u';
		41: 'p';
		42: 'p';
		43: 'o';
		44: 'r';
		45: 't';
		46: 'e';
		47: 'd';
		48: '!';
		49: '\000';
		4: 'i';
		5: 'n';
		6: 'g';
		7: ' ';
		8: 'r';
		9: 'e';
		 ... 50 ... |]
	| System.String.m_StringLength ~> 49]
4 ==> STRUCT System.Object[]
5 ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.m_realObject ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_realType ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_savedSerializationInfo ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_serializedStates ~> null]
6 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'C';
		10: 'r';
		11: 'i';
		12: 'a';
		13: 'l';
		14: 'i';
		15: 'z';
		16: 'a';
		17: 't';
		18: 'i';
		19: 'o';
		1: 'L';
		20: 'n';
		21: 'M';
		22: 'a';
		23: 'n';
		24: 'a';
		25: 'g';
		26: 'e';
		27: 'r';
		28: '_';
		29: 'R';
		2: 'R';
		30: 'e';
		31: 'a';
		32: 'l';
		33: 'T';
		34: 'y';
		35: 'p';
		36: 'e';
		37: '\000';
		3: '_';
		4: 'S';
		5: 'a';
		6: 'f';
		7: 'e';
		8: 'S';
		9: 'e';
		 ... 38 ... |]
	| System.String.m_StringLength ~> 37]
7 ==> STRUCT System.IndexOutOfRangeException[
	| System.Exception._HResult ~> -2146233080
	| System.Exception._className ~> null
	| System.Exception._data ~> null
	| System.Exception._dynamicMethods ~> null
	| System.Exception._exceptionMethod ~> null
	| System.Exception._exceptionMethodString ~> null
	| System.Exception._helpURL ~> null
	| System.Exception._innerException ~> null
	| System.Exception._ipForWatsonBuckets ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]
	| System.Exception._message ~> (HeapRef 9)
	| System.Exception._remoteStackIndex ~> 0
	| System.Exception._remoteStackTraceString ~> null
	| System.Exception._safeSerializationManager ~> (HeapRef 11)
	| System.Exception._source ~> null
	| System.Exception._stackTrace ~> null
	| System.Exception._stackTraceString ~> null
	| System.Exception._watsonBuckets ~> null
	| System.Exception._xcode ~> -532462766
	| System.Exception._xptrs ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> 0]]
8 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'A';
		10: 'u';
		11: 't';
		12: 'O';
		13: 'f';
		14: 'R';
		15: 'a';
		16: 'n';
		17: 'g';
		18: 'e';
		19: 'E';
		1: 'r';
		20: 'x';
		21: 'c';
		22: 'e';
		23: 'p';
		24: 't';
		25: 'i';
		26: 'o';
		27: 'n';
		28: '\000';
		2: 'g';
		3: '_';
		4: 'I';
		5: 'n';
		6: 'd';
		7: 'e';
		8: 'x';
		9: 'O';
		 ... 29 ... |]
	| System.String.m_StringLength ~> 28]
9 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'G';
		10: 's';
		11: 'o';
		12: 'u';
		13: 'r';
		14: 'c';
		15: 'e';
		16: ' ';
		17: 's';
		18: 't';
		19: 'r';
		1: 'e';
		20: 'i';
		21: 'n';
		22: 'g';
		23: 's';
		24: ' ';
		25: 'c';
		26: 'u';
		27: 'r';
		28: 'r';
		29: 'e';
		2: 't';
		30: 'n';
		31: 't';
		32: 'l';
		33: 'y';
		34: ' ';
		35: 'n';
		36: 'o';
		37: 't';
		38: ' ';
		39: 's';
		3: 't';
		40: 'u';
		41: 'p';
		42: 'p';
		43: 'o';
		44: 'r';
		45: 't';
		46: 'e';
		47: 'd';
		48: '!';
		49: '\000';
		4: 'i';
		5: 'n';
		6: 'g';
		7: ' ';
		8: 'r';
		9: 'e';
		 ... 50 ... |]
	| System.String.m_StringLength ~> 49]
array ==> System.Int32: [| ... System.Int32[,].0_Length x System.Int32[,].1_Length ... |]
---------- s1 = ----------
System.Array ==> STRUCT System.Array[
	| System.Array.MaxArrayLength ~> 2146435071
	| System.Array.MaxByteArrayLength ~> 2147483591]
System.Environment ==> STRUCT System.Environment[
	| System.Environment.MaxEnvVariableValueLength ~> 32767
	| System.Environment.MaxMachineNameLength ~> 256
	| System.Environment.MaxSystemEnvVariableLength ~> 1024
	| System.Environment.MaxUserEnvVariableLength ~> 255
	| System.Environment.isUserNonInteractive ~> False
	| System.Environment.m_os ~> null
	| System.Environment.m_resHelper ~> null
	| System.Environment.processWinStation ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]
	| System.Environment.s_CheckedOSWin8OrAbove ~> False
	| System.Environment.s_CheckedWinRT ~> False
	| System.Environment.s_InternalSyncObject ~> null
	| System.Environment.s_IsWindows8OrAbove ~> False
	| System.Environment.s_WinRTSupported ~> False]
System.Exception ==> STRUCT System.Exception[
	| System.Exception._COMPlusExceptionCode ~> -532462766
	| System.Exception.s_EDILock ~> UNION[
		| !(0 == array) ~> (HeapRef 10)
		| 0 == array ~> (HeapRef 4)]]
System.IndexOutOfRangeException ==> STRUCT System.IndexOutOfRangeException[]
System.IntPtr ==> STRUCT System.IntPtr[
	| System.IntPtr.Zero ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]]
System.NullReferenceException ==> STRUCT System.NullReferenceException[]
System.Object ==> STRUCT System.Object[]
System.Runtime.Serialization.SafeSerializationManager ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.RealTypeSerializationName ~> UNION[
		| !(0 == array) ~> (HeapRef 12)
		| 0 == array ~> (HeapRef 6)]]
System.SystemException ==> STRUCT System.SystemException[]
System.UIntPtr ==> STRUCT System.UIntPtr[
	| System.UIntPtr.Zero ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]]
System.ValueType ==> STRUCT System.ValueType[]
VSharp.CSharpUtils.Tests.Lists ==> STRUCT VSharp.CSharpUtils.Tests.Lists[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Lists.LowerBoundSymbolicTest(System.Int32[,], System.Int32)
RESULT: UNION[
	| !(0 == array) & !(dimension < 0) & dimension < 2 ~> 0
	| !(dimension < 0) & 0 == array & dimension < 2 ~> <ERROR: (HeapRef 1)>
	| !(dimension < 2) | dimension < 0 ~> <ERROR: UNION[
		| !(0 == array) ~> (HeapRef 7)
		| 0 == array ~> (HeapRef 1)]>]
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> STRUCT System.NullReferenceException[
	| System.Exception._HResult ~> -2147467261
	| System.Exception._className ~> null
	| System.Exception._data ~> null
	| System.Exception._dynamicMethods ~> null
	| System.Exception._exceptionMethod ~> null
	| System.Exception._exceptionMethodString ~> null
	| System.Exception._helpURL ~> null
	| System.Exception._innerException ~> null
	| System.Exception._ipForWatsonBuckets ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]
	| System.Exception._message ~> (HeapRef 3)
	| System.Exception._remoteStackIndex ~> 0
	| System.Exception._remoteStackTraceString ~> null
	| System.Exception._safeSerializationManager ~> (HeapRef 5)
	| System.Exception._source ~> null
	| System.Exception._stackTrace ~> null
	| System.Exception._stackTraceString ~> null
	| System.Exception._watsonBuckets ~> null
	| System.Exception._xcode ~> -532462766
	| System.Exception._xptrs ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> 0]]
10 ==> STRUCT System.Object[]
11 ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.m_realObject ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_realType ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_savedSerializationInfo ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_serializedStates ~> null]
12 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'C';
		10: 'r';
		11: 'i';
		12: 'a';
		13: 'l';
		14: 'i';
		15: 'z';
		16: 'a';
		17: 't';
		18: 'i';
		19: 'o';
		1: 'L';
		20: 'n';
		21: 'M';
		22: 'a';
		23: 'n';
		24: 'a';
		25: 'g';
		26: 'e';
		27: 'r';
		28: '_';
		29: 'R';
		2: 'R';
		30: 'e';
		31: 'a';
		32: 'l';
		33: 'T';
		34: 'y';
		35: 'p';
		36: 'e';
		37: '\000';
		3: '_';
		4: 'S';
		5: 'a';
		6: 'f';
		7: 'e';
		8: 'S';
		9: 'e';
		 ... 38 ... |]
	| System.String.m_StringLength ~> 37]
2 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'A';
		10: 'f';
		11: 'e';
		12: 'r';
		13: 'e';
		14: 'n';
		15: 'c';
		16: 'e';
		17: 'E';
		18: 'x';
		19: 'c';
		1: 'r';
		20: 'e';
		21: 'p';
		22: 't';
		23: 'i';
		24: 'o';
		25: 'n';
		26: '\000';
		2: 'g';
		3: '_';
		4: 'N';
		5: 'u';
		6: 'l';
		7: 'l';
		8: 'R';
		9: 'e';
		 ... 27 ... |]
	| System.String.m_StringLength ~> 26]
3 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'G';
		10: 's';
		11: 'o';
		12: 'u';
		13: 'r';
		14: 'c';
		15: 'e';
		16: ' ';
		17: 's';
		18: 't';
		19: 'r';
		1: 'e';
		20: 'i';
		21: 'n';
		22: 'g';
		23: 's';
		24: ' ';
		25: 'c';
		26: 'u';
		27: 'r';
		28: 'r';
		29: 'e';
		2: 't';
		30: 'n';
		31: 't';
		32: 'l';
		33: 'y';
		34: ' ';
		35: 'n';
		36: 'o';
		37: 't';
		38: ' ';
		39: 's';
		3: 't';
		40: 'u';
		41: 'p';
		42: 'p';
		43: 'o';
		44: 'r';
		45: 't';
		46: 'e';
		47: 'd';
		48: '!';
		49: '\000';
		4: 'i';
		5: 'n';
		6: 'g';
		7: ' ';
		8: 'r';
		9: 'e';
		 ... 50 ... |]
	| System.String.m_StringLength ~> 49]
4 ==> STRUCT System.Object[]
5 ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.m_realObject ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_realType ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_savedSerializationInfo ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_serializedStates ~> null]
6 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'C';
		10: 'r';
		11: 'i';
		12: 'a';
		13: 'l';
		14: 'i';
		15: 'z';
		16: 'a';
		17: 't';
		18: 'i';
		19: 'o';
		1: 'L';
		20: 'n';
		21: 'M';
		22: 'a';
		23: 'n';
		24: 'a';
		25: 'g';
		26: 'e';
		27: 'r';
		28: '_';
		29: 'R';
		2: 'R';
		30: 'e';
		31: 'a';
		32: 'l';
		33: 'T';
		34: 'y';
		35: 'p';
		36: 'e';
		37: '\000';
		3: '_';
		4: 'S';
		5: 'a';
		6: 'f';
		7: 'e';
		8: 'S';
		9: 'e';
		 ... 38 ... |]
	| System.String.m_StringLength ~> 37]
7 ==> STRUCT System.IndexOutOfRangeException[
	| System.Exception._HResult ~> -2146233080
	| System.Exception._className ~> null
	| System.Exception._data ~> null
	| System.Exception._dynamicMethods ~> null
	| System.Exception._exceptionMethod ~> null
	| System.Exception._exceptionMethodString ~> null
	| System.Exception._helpURL ~> null
	| System.Exception._innerException ~> null
	| System.Exception._ipForWatsonBuckets ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]
	| System.Exception._message ~> (HeapRef 9)
	| System.Exception._remoteStackIndex ~> 0
	| System.Exception._remoteStackTraceString ~> null
	| System.Exception._safeSerializationManager ~> (HeapRef 11)
	| System.Exception._source ~> null
	| System.Exception._stackTrace ~> null
	| System.Exception._stackTraceString ~> null
	| System.Exception._watsonBuckets ~> null
	| System.Exception._xcode ~> -532462766
	| System.Exception._xptrs ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> 0]]
8 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'A';
		10: 'u';
		11: 't';
		12: 'O';
		13: 'f';
		14: 'R';
		15: 'a';
		16: 'n';
		17: 'g';
		18: 'e';
		19: 'E';
		1: 'r';
		20: 'x';
		21: 'c';
		22: 'e';
		23: 'p';
		24: 't';
		25: 'i';
		26: 'o';
		27: 'n';
		28: '\000';
		2: 'g';
		3: '_';
		4: 'I';
		5: 'n';
		6: 'd';
		7: 'e';
		8: 'x';
		9: 'O';
		 ... 29 ... |]
	| System.String.m_StringLength ~> 28]
9 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'G';
		10: 's';
		11: 'o';
		12: 'u';
		13: 'r';
		14: 'c';
		15: 'e';
		16: ' ';
		17: 's';
		18: 't';
		19: 'r';
		1: 'e';
		20: 'i';
		21: 'n';
		22: 'g';
		23: 's';
		24: ' ';
		25: 'c';
		26: 'u';
		27: 'r';
		28: 'r';
		29: 'e';
		2: 't';
		30: 'n';
		31: 't';
		32: 'l';
		33: 'y';
		34: ' ';
		35: 'n';
		36: 'o';
		37: 't';
		38: ' ';
		39: 's';
		3: 't';
		40: 'u';
		41: 'p';
		42: 'p';
		43: 'o';
		44: 'r';
		45: 't';
		46: 'e';
		47: 'd';
		48: '!';
		49: '\000';
		4: 'i';
		5: 'n';
		6: 'g';
		7: ' ';
		8: 'r';
		9: 'e';
		 ... 50 ... |]
	| System.String.m_StringLength ~> 49]
array ==> System.Int32: [| ... System.Int32[,].0_Length x System.Int32[,].1_Length ... |]
---------- s1 = ----------
System.Array ==> STRUCT System.Array[
	| System.Array.MaxArrayLength ~> 2146435071
	| System.Array.MaxByteArrayLength ~> 2147483591]
System.Environment ==> STRUCT System.Environment[
	| System.Environment.MaxEnvVariableValueLength ~> 32767
	| System.Environment.MaxMachineNameLength ~> 256
	| System.Environment.MaxSystemEnvVariableLength ~> 1024
	| System.Environment.MaxUserEnvVariableLength ~> 255
	| System.Environment.isUserNonInteractive ~> False
	| System.Environment.m_os ~> null
	| System.Environment.m_resHelper ~> null
	| System.Environment.processWinStation ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]
	| System.Environment.s_CheckedOSWin8OrAbove ~> False
	| System.Environment.s_CheckedWinRT ~> False
	| System.Environment.s_InternalSyncObject ~> null
	| System.Environment.s_IsWindows8OrAbove ~> False
	| System.Environment.s_WinRTSupported ~> False]
System.Exception ==> STRUCT System.Exception[
	| System.Exception._COMPlusExceptionCode ~> -532462766
	| System.Exception.s_EDILock ~> UNION[
		| !(0 == array) ~> (HeapRef 10)
		| 0 == array ~> (HeapRef 4)]]
System.IndexOutOfRangeException ==> STRUCT System.IndexOutOfRangeException[]
System.IntPtr ==> STRUCT System.IntPtr[
	| System.IntPtr.Zero ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]]
System.NullReferenceException ==> STRUCT System.NullReferenceException[]
System.Object ==> STRUCT System.Object[]
System.Runtime.Serialization.SafeSerializationManager ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.RealTypeSerializationName ~> UNION[
		| !(0 == array) ~> (HeapRef 12)
		| 0 == array ~> (HeapRef 6)]]
System.SystemException ==> STRUCT System.SystemException[]
System.UIntPtr ==> STRUCT System.UIntPtr[
	| System.UIntPtr.Zero ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]]
System.ValueType ==> STRUCT System.ValueType[]
VSharp.CSharpUtils.Tests.Lists ==> STRUCT VSharp.CSharpUtils.Tests.Lists[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Lists.UpperBoundTest()
RESULT: 3
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0, 0: 1;
	0, 1: 1;
	1, 0: 2;
	1, 1: 2;
	2, 0: 3;
	2, 1: 3;
	3, 0: 4;
	3, 1: 4;
	 ... 4 x 2 ... |]
---------- s1 = ----------
System.Array ==> STRUCT System.Array[
	| System.Array.MaxArrayLength ~> 2146435071
	| System.Array.MaxByteArrayLength ~> 2147483591]
VSharp.CSharpUtils.Tests.Lists ==> STRUCT VSharp.CSharpUtils.Tests.Lists[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Lists.RankTest()
RESULT: 2
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0, 0: 1;
	0, 1: 1;
	1, 0: 2;
	1, 1: 2;
	2, 0: 3;
	2, 1: 3;
	3, 0: 4;
	3, 1: 4;
	 ... 4 x 2 ... |]
---------- s1 = ----------
System.Array ==> STRUCT System.Array[
	| System.Array.MaxArrayLength ~> 2146435071
	| System.Array.MaxByteArrayLength ~> 2147483591]
VSharp.CSharpUtils.Tests.Lists ==> STRUCT VSharp.CSharpUtils.Tests.Lists[]
METHOD: System.Int32[] VSharp.CSharpUtils.Tests.Lists.RetOneDArray1(System.Boolean, System.Boolean)
RESULT: (HeapRef 1)
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	1: UNION[
		| !flag1 & flag2 ~> 89
		| flag1 ~> 42];
	 ... 5 ... |]
---------- s1 = ----------
VSharp.CSharpUtils.Tests.Lists ==> STRUCT VSharp.CSharpUtils.Tests.Lists[]
METHOD: System.Int32[] VSharp.CSharpUtils.Tests.Lists.RetOneDArray2(System.Int32)
RESULT: UNION[
	| !(1 < n) & !(4 < n) & 5 == n & 8 == n | !(4 < n) & !(7 < n) & 5 == n & 8 == n | !(4 < n) & (!(1 < n) & !(8 == n) | !(7 < n) & !(8 == n) | 1 < n & 7 < n) & 5 == n ~> <ERROR: (HeapRef 2)>
	| !(1 < n) & (!(1 < n) & !(5 == n) | !(4 < n) & !(5 == n) | 1 < n & 4 < n) & 8 == n ~> <ERROR: (HeapRef 12)>
	| !(1 < n) & (!(1 < n) & !(8 == n) | !(7 < n) & !(8 == n) | 1 < n & 7 < n) & 4 < n & 5 == n | !(1 < n) & 4 < n & 5 == n & 8 == n ~> <ERROR: (HeapRef 8)>
	| !(7 < n) & (!(1 < n) & !(5 == n) | !(4 < n) & !(5 == n) | 1 < n & 4 < n) & 1 < n & 8 == n ~> <ERROR: (HeapRef 16)>
	| (!(1 < n) & !(5 == n) | !(4 < n) & !(5 == n) | 1 < n & 4 < n) & (!(1 < n) & !(8 == n) | !(7 < n) & !(8 == n) | 1 < n & 7 < n) ~> (HeapRef 1)]
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	1: UNION[
		| !(8 == n) & 1 < n & 4 < n & 5 == n | (!(1 < n) & 5 == n | !(4 < n) & 5 == n) & 1 < n & 4 < n & 5 == n ~> 42
		| (!(5 == n) | 4 < n) & 1 < n & 8 == n ~> 89];
	4: UNION[
		| (!(1 < n) & 5 == n | !(4 < n) & 5 == n) & 4 < n & 5 == n | 1 < n & 4 < n & 5 == n ~> 99];
	7: UNION[
		| (!(5 == n) | 4 < n) & 1 < n & 7 < n & 8 == n ~> 66];
	 ... UNION[
	| !(1 < n) & 5 == n | !(4 < n) & 5 == n | (!(5 == n) | 1 < n) & (!(5 == n) | 4 < n) ~> n] ... |]
10 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'G';
		10: 's';
		11: 'o';
		12: 'u';
		13: 'r';
		14: 'c';
		15: 'e';
		16: ' ';
		17: 's';
		18: 't';
		19: 'r';
		1: 'e';
		20: 'i';
		21: 'n';
		22: 'g';
		23: 's';
		24: ' ';
		25: 'c';
		26: 'u';
		27: 'r';
		28: 'r';
		29: 'e';
		2: 't';
		30: 'n';
		31: 't';
		32: 'l';
		33: 'y';
		34: ' ';
		35: 'n';
		36: 'o';
		37: 't';
		38: ' ';
		39: 's';
		3: 't';
		40: 'u';
		41: 'p';
		42: 'p';
		43: 'o';
		44: 'r';
		45: 't';
		46: 'e';
		47: 'd';
		48: '!';
		49: '\000';
		4: 'i';
		5: 'n';
		6: 'g';
		7: ' ';
		8: 'r';
		9: 'e';
		 ... 50 ... |]
	| System.String.m_StringLength ~> 49]
11 ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.m_realObject ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_realType ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_savedSerializationInfo ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_serializedStates ~> null]
12 ==> STRUCT System.IndexOutOfRangeException[
	| System.Exception._HResult ~> -2146233080
	| System.Exception._className ~> null
	| System.Exception._data ~> null
	| System.Exception._dynamicMethods ~> null
	| System.Exception._exceptionMethod ~> null
	| System.Exception._exceptionMethodString ~> null
	| System.Exception._helpURL ~> null
	| System.Exception._innerException ~> null
	| System.Exception._ipForWatsonBuckets ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]
	| System.Exception._message ~> (HeapRef 14)
	| System.Exception._remoteStackIndex ~> 0
	| System.Exception._remoteStackTraceString ~> null
	| System.Exception._safeSerializationManager ~> (HeapRef 15)
	| System.Exception._source ~> null
	| System.Exception._stackTrace ~> null
	| System.Exception._stackTraceString ~> null
	| System.Exception._watsonBuckets ~> null
	| System.Exception._xcode ~> -532462766
	| System.Exception._xptrs ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> 0]]
13 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'A';
		10: 'u';
		11: 't';
		12: 'O';
		13: 'f';
		14: 'R';
		15: 'a';
		16: 'n';
		17: 'g';
		18: 'e';
		19: 'E';
		1: 'r';
		20: 'x';
		21: 'c';
		22: 'e';
		23: 'p';
		24: 't';
		25: 'i';
		26: 'o';
		27: 'n';
		28: '\000';
		2: 'g';
		3: '_';
		4: 'I';
		5: 'n';
		6: 'd';
		7: 'e';
		8: 'x';
		9: 'O';
		 ... 29 ... |]
	| System.String.m_StringLength ~> 28]
14 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'G';
		10: 's';
		11: 'o';
		12: 'u';
		13: 'r';
		14: 'c';
		15: 'e';
		16: ' ';
		17: 's';
		18: 't';
		19: 'r';
		1: 'e';
		20: 'i';
		21: 'n';
		22: 'g';
		23: 's';
		24: ' ';
		25: 'c';
		26: 'u';
		27: 'r';
		28: 'r';
		29: 'e';
		2: 't';
		30: 'n';
		31: 't';
		32: 'l';
		33: 'y';
		34: ' ';
		35: 'n';
		36: 'o';
		37: 't';
		38: ' ';
		39: 's';
		3: 't';
		40: 'u';
		41: 'p';
		42: 'p';
		43: 'o';
		44: 'r';
		45: 't';
		46: 'e';
		47: 'd';
		48: '!';
		49: '\000';
		4: 'i';
		5: 'n';
		6: 'g';
		7: ' ';
		8: 'r';
		9: 'e';
		 ... 50 ... |]
	| System.String.m_StringLength ~> 49]
15 ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.m_realObject ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_realType ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_savedSerializationInfo ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_serializedStates ~> null]
16 ==> STRUCT System.IndexOutOfRangeException[
	| System.Exception._HResult ~> -2146233080
	| System.Exception._className ~> null
	| System.Exception._data ~> null
	| System.Exception._dynamicMethods ~> null
	| System.Exception._exceptionMethod ~> null
	| System.Exception._exceptionMethodString ~> null
	| System.Exception._helpURL ~> null
	| System.Exception._innerException ~> null
	| System.Exception._ipForWatsonBuckets ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]
	| System.Exception._message ~> (HeapRef 18)
	| System.Exception._remoteStackIndex ~> 0
	| System.Exception._remoteStackTraceString ~> null
	| System.Exception._safeSerializationManager ~> (HeapRef 19)
	| System.Exception._source ~> null
	| System.Exception._stackTrace ~> null
	| System.Exception._stackTraceString ~> null
	| System.Exception._watsonBuckets ~> null
	| System.Exception._xcode ~> -532462766
	| System.Exception._xptrs ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> 0]]
17 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'A';
		10: 'u';
		11: 't';
		12: 'O';
		13: 'f';
		14: 'R';
		15: 'a';
		16: 'n';
		17: 'g';
		18: 'e';
		19: 'E';
		1: 'r';
		20: 'x';
		21: 'c';
		22: 'e';
		23: 'p';
		24: 't';
		25: 'i';
		26: 'o';
		27: 'n';
		28: '\000';
		2: 'g';
		3: '_';
		4: 'I';
		5: 'n';
		6: 'd';
		7: 'e';
		8: 'x';
		9: 'O';
		 ... 29 ... |]
	| System.String.m_StringLength ~> 28]
18 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'G';
		10: 's';
		11: 'o';
		12: 'u';
		13: 'r';
		14: 'c';
		15: 'e';
		16: ' ';
		17: 's';
		18: 't';
		19: 'r';
		1: 'e';
		20: 'i';
		21: 'n';
		22: 'g';
		23: 's';
		24: ' ';
		25: 'c';
		26: 'u';
		27: 'r';
		28: 'r';
		29: 'e';
		2: 't';
		30: 'n';
		31: 't';
		32: 'l';
		33: 'y';
		34: ' ';
		35: 'n';
		36: 'o';
		37: 't';
		38: ' ';
		39: 's';
		3: 't';
		40: 'u';
		41: 'p';
		42: 'p';
		43: 'o';
		44: 'r';
		45: 't';
		46: 'e';
		47: 'd';
		48: '!';
		49: '\000';
		4: 'i';
		5: 'n';
		6: 'g';
		7: ' ';
		8: 'r';
		9: 'e';
		 ... 50 ... |]
	| System.String.m_StringLength ~> 49]
19 ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.m_realObject ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_realType ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_savedSerializationInfo ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_serializedStates ~> null]
2 ==> STRUCT System.IndexOutOfRangeException[
	| System.Exception._HResult ~> -2146233080
	| System.Exception._className ~> null
	| System.Exception._data ~> null
	| System.Exception._dynamicMethods ~> null
	| System.Exception._exceptionMethod ~> null
	| System.Exception._exceptionMethodString ~> null
	| System.Exception._helpURL ~> null
	| System.Exception._innerException ~> null
	| System.Exception._ipForWatsonBuckets ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]
	| System.Exception._message ~> (HeapRef 4)
	| System.Exception._remoteStackIndex ~> 0
	| System.Exception._remoteStackTraceString ~> null
	| System.Exception._safeSerializationManager ~> (HeapRef 6)
	| System.Exception._source ~> null
	| System.Exception._stackTrace ~> null
	| System.Exception._stackTraceString ~> null
	| System.Exception._watsonBuckets ~> null
	| System.Exception._xcode ~> -532462766
	| System.Exception._xptrs ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> 0]]
3 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'A';
		10: 'u';
		11: 't';
		12: 'O';
		13: 'f';
		14: 'R';
		15: 'a';
		16: 'n';
		17: 'g';
		18: 'e';
		19: 'E';
		1: 'r';
		20: 'x';
		21: 'c';
		22: 'e';
		23: 'p';
		24: 't';
		25: 'i';
		26: 'o';
		27: 'n';
		28: '\000';
		2: 'g';
		3: '_';
		4: 'I';
		5: 'n';
		6: 'd';
		7: 'e';
		8: 'x';
		9: 'O';
		 ... 29 ... |]
	| System.String.m_StringLength ~> 28]
4 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'G';
		10: 's';
		11: 'o';
		12: 'u';
		13: 'r';
		14: 'c';
		15: 'e';
		16: ' ';
		17: 's';
		18: 't';
		19: 'r';
		1: 'e';
		20: 'i';
		21: 'n';
		22: 'g';
		23: 's';
		24: ' ';
		25: 'c';
		26: 'u';
		27: 'r';
		28: 'r';
		29: 'e';
		2: 't';
		30: 'n';
		31: 't';
		32: 'l';
		33: 'y';
		34: ' ';
		35: 'n';
		36: 'o';
		37: 't';
		38: ' ';
		39: 's';
		3: 't';
		40: 'u';
		41: 'p';
		42: 'p';
		43: 'o';
		44: 'r';
		45: 't';
		46: 'e';
		47: 'd';
		48: '!';
		49: '\000';
		4: 'i';
		5: 'n';
		6: 'g';
		7: ' ';
		8: 'r';
		9: 'e';
		 ... 50 ... |]
	| System.String.m_StringLength ~> 49]
5 ==> STRUCT System.Object[]
6 ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.m_realObject ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_realType ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_savedSerializationInfo ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_serializedStates ~> null]
7 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'C';
		10: 'r';
		11: 'i';
		12: 'a';
		13: 'l';
		14: 'i';
		15: 'z';
		16: 'a';
		17: 't';
		18: 'i';
		19: 'o';
		1: 'L';
		20: 'n';
		21: 'M';
		22: 'a';
		23: 'n';
		24: 'a';
		25: 'g';
		26: 'e';
		27: 'r';
		28: '_';
		29: 'R';
		2: 'R';
		30: 'e';
		31: 'a';
		32: 'l';
		33: 'T';
		34: 'y';
		35: 'p';
		36: 'e';
		37: '\000';
		3: '_';
		4: 'S';
		5: 'a';
		6: 'f';
		7: 'e';
		8: 'S';
		9: 'e';
		 ... 38 ... |]
	| System.String.m_StringLength ~> 37]
8 ==> STRUCT System.IndexOutOfRangeException[
	| System.Exception._HResult ~> -2146233080
	| System.Exception._className ~> null
	| System.Exception._data ~> null
	| System.Exception._dynamicMethods ~> null
	| System.Exception._exceptionMethod ~> null
	| System.Exception._exceptionMethodString ~> null
	| System.Exception._helpURL ~> null
	| System.Exception._innerException ~> null
	| System.Exception._ipForWatsonBuckets ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]
	| System.Exception._message ~> (HeapRef 10)
	| System.Exception._remoteStackIndex ~> 0
	| System.Exception._remoteStackTraceString ~> null
	| System.Exception._safeSerializationManager ~> (HeapRef 11)
	| System.Exception._source ~> null
	| System.Exception._stackTrace ~> null
	| System.Exception._stackTraceString ~> null
	| System.Exception._watsonBuckets ~> null
	| System.Exception._xcode ~> -532462766
	| System.Exception._xptrs ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> 0]]
9 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'A';
		10: 'u';
		11: 't';
		12: 'O';
		13: 'f';
		14: 'R';
		15: 'a';
		16: 'n';
		17: 'g';
		18: 'e';
		19: 'E';
		1: 'r';
		20: 'x';
		21: 'c';
		22: 'e';
		23: 'p';
		24: 't';
		25: 'i';
		26: 'o';
		27: 'n';
		28: '\000';
		2: 'g';
		3: '_';
		4: 'I';
		5: 'n';
		6: 'd';
		7: 'e';
		8: 'x';
		9: 'O';
		 ... 29 ... |]
	| System.String.m_StringLength ~> 28]
---------- s1 = ----------
System.Environment ==> STRUCT System.Environment[
	| System.Environment.MaxEnvVariableValueLength ~> 32767
	| System.Environment.MaxMachineNameLength ~> 256
	| System.Environment.MaxSystemEnvVariableLength ~> 1024
	| System.Environment.MaxUserEnvVariableLength ~> 255
	| System.Environment.isUserNonInteractive ~> False
	| System.Environment.m_os ~> null
	| System.Environment.m_resHelper ~> null
	| System.Environment.processWinStation ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]
	| System.Environment.s_CheckedOSWin8OrAbove ~> False
	| System.Environment.s_CheckedWinRT ~> False
	| System.Environment.s_InternalSyncObject ~> null
	| System.Environment.s_IsWindows8OrAbove ~> False
	| System.Environment.s_WinRTSupported ~> False]
System.Exception ==> STRUCT System.Exception[
	| System.Exception._COMPlusExceptionCode ~> -532462766
	| System.Exception.s_EDILock ~> (HeapRef 5)]
System.IndexOutOfRangeException ==> STRUCT System.IndexOutOfRangeException[]
System.IntPtr ==> STRUCT System.IntPtr[
	| System.IntPtr.Zero ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]]
System.Object ==> STRUCT System.Object[]
System.Runtime.Serialization.SafeSerializationManager ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.RealTypeSerializationName ~> (HeapRef 7)]
System.SystemException ==> STRUCT System.SystemException[]
System.UIntPtr ==> STRUCT System.UIntPtr[
	| System.UIntPtr.Zero ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]]
System.ValueType ==> STRUCT System.ValueType[]
VSharp.CSharpUtils.Tests.Lists ==> STRUCT VSharp.CSharpUtils.Tests.Lists[]
METHOD: System.Array VSharp.CSharpUtils.Tests.Lists.RetSystemArray1(System.Array)
RESULT: UNION[
	| !(0 == arr) & !(1 < arr.0_Length) & (ArrayTypeVariable1 <: System.Int32[,]) ~> <ERROR: UNION[
		| !(0 == arr) & (ArrayTypeVariable1 <: System.Int32[]) ~> (HeapRef 7)
		| !(ArrayTypeVariable1 <: System.Int32[]) | 0 == arr ~> (HeapRef 1)]>
	| !(0 == arr) & !(1 < arr.1_Length) & !(ArrayTypeVariable1 <: System.Int32[]) & (ArrayTypeVariable1 <: System.Int32[,]) & 1 < arr.0_Length | !(0 == arr) & ((!(1 < arr.0_Length) | !(1 < arr.1_Length)) & (!(ArrayTypeVariable1 <: System.Int32[,]) | 0 == arr) | 1 < arr.0_Length & 1 < arr.1_Length) & (ArrayTypeVariable1 <: System.Int32[]) | ((!(1 < arr.0_Length) | !(1 < arr.1_Length)) & (!(ArrayTypeVariable1 <: System.Int32[,]) | 0 == arr) | 1 < arr.0_Length & 1 < arr.1_Length) & 1 < arr.0_Length ~> (HeapRef arr)
	| !(0 == arr) & !(1 < arr.1_Length) & (ArrayTypeVariable1 <: System.Int32[,]) & (ArrayTypeVariable1 <: System.Int32[]) & 1 < arr.0_Length ~> <ERROR: (HeapRef 7)>
	| !(1 < arr.0_Length) & (!(ArrayTypeVariable1 <: System.Int32[]) | 0 == arr) & ((!(1 < arr.0_Length) | !(1 < arr.1_Length)) & (!(ArrayTypeVariable1 <: System.Int32[,]) | 0 == arr) | 1 < arr.0_Length & 1 < arr.1_Length) ~> <ERROR: (HeapRef 1)>]
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> STRUCT System.IndexOutOfRangeException[
	| System.Exception._HResult ~> -2146233080
	| System.Exception._className ~> null
	| System.Exception._data ~> null
	| System.Exception._dynamicMethods ~> null
	| System.Exception._exceptionMethod ~> null
	| System.Exception._exceptionMethodString ~> null
	| System.Exception._helpURL ~> null
	| System.Exception._innerException ~> null
	| System.Exception._ipForWatsonBuckets ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]
	| System.Exception._message ~> (HeapRef 3)
	| System.Exception._remoteStackIndex ~> 0
	| System.Exception._remoteStackTraceString ~> null
	| System.Exception._safeSerializationManager ~> (HeapRef 5)
	| System.Exception._source ~> null
	| System.Exception._stackTrace ~> null
	| System.Exception._stackTraceString ~> null
	| System.Exception._watsonBuckets ~> null
	| System.Exception._xcode ~> -532462766
	| System.Exception._xptrs ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> 0]]
10 ==> STRUCT System.Object[]
11 ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.m_realObject ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_realType ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_savedSerializationInfo ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_serializedStates ~> null]
12 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'C';
		10: 'r';
		11: 'i';
		12: 'a';
		13: 'l';
		14: 'i';
		15: 'z';
		16: 'a';
		17: 't';
		18: 'i';
		19: 'o';
		1: 'L';
		20: 'n';
		21: 'M';
		22: 'a';
		23: 'n';
		24: 'a';
		25: 'g';
		26: 'e';
		27: 'r';
		28: '_';
		29: 'R';
		2: 'R';
		30: 'e';
		31: 'a';
		32: 'l';
		33: 'T';
		34: 'y';
		35: 'p';
		36: 'e';
		37: '\000';
		3: '_';
		4: 'S';
		5: 'a';
		6: 'f';
		7: 'e';
		8: 'S';
		9: 'e';
		 ... 38 ... |]
	| System.String.m_StringLength ~> 37]
2 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'A';
		10: 'u';
		11: 't';
		12: 'O';
		13: 'f';
		14: 'R';
		15: 'a';
		16: 'n';
		17: 'g';
		18: 'e';
		19: 'E';
		1: 'r';
		20: 'x';
		21: 'c';
		22: 'e';
		23: 'p';
		24: 't';
		25: 'i';
		26: 'o';
		27: 'n';
		28: '\000';
		2: 'g';
		3: '_';
		4: 'I';
		5: 'n';
		6: 'd';
		7: 'e';
		8: 'x';
		9: 'O';
		 ... 29 ... |]
	| System.String.m_StringLength ~> 28]
3 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'G';
		10: 's';
		11: 'o';
		12: 'u';
		13: 'r';
		14: 'c';
		15: 'e';
		16: ' ';
		17: 's';
		18: 't';
		19: 'r';
		1: 'e';
		20: 'i';
		21: 'n';
		22: 'g';
		23: 's';
		24: ' ';
		25: 'c';
		26: 'u';
		27: 'r';
		28: 'r';
		29: 'e';
		2: 't';
		30: 'n';
		31: 't';
		32: 'l';
		33: 'y';
		34: ' ';
		35: 'n';
		36: 'o';
		37: 't';
		38: ' ';
		39: 's';
		3: 't';
		40: 'u';
		41: 'p';
		42: 'p';
		43: 'o';
		44: 'r';
		45: 't';
		46: 'e';
		47: 'd';
		48: '!';
		49: '\000';
		4: 'i';
		5: 'n';
		6: 'g';
		7: ' ';
		8: 'r';
		9: 'e';
		 ... 50 ... |]
	| System.String.m_StringLength ~> 49]
4 ==> STRUCT System.Object[]
5 ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.m_realObject ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_realType ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_savedSerializationInfo ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_serializedStates ~> null]
6 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'C';
		10: 'r';
		11: 'i';
		12: 'a';
		13: 'l';
		14: 'i';
		15: 'z';
		16: 'a';
		17: 't';
		18: 'i';
		19: 'o';
		1: 'L';
		20: 'n';
		21: 'M';
		22: 'a';
		23: 'n';
		24: 'a';
		25: 'g';
		26: 'e';
		27: 'r';
		28: '_';
		29: 'R';
		2: 'R';
		30: 'e';
		31: 'a';
		32: 'l';
		33: 'T';
		34: 'y';
		35: 'p';
		36: 'e';
		37: '\000';
		3: '_';
		4: 'S';
		5: 'a';
		6: 'f';
		7: 'e';
		8: 'S';
		9: 'e';
		 ... 38 ... |]
	| System.String.m_StringLength ~> 37]
7 ==> STRUCT System.IndexOutOfRangeException[
	| System.Exception._HResult ~> -2146233080
	| System.Exception._className ~> null
	| System.Exception._data ~> null
	| System.Exception._dynamicMethods ~> null
	| System.Exception._exceptionMethod ~> null
	| System.Exception._exceptionMethodString ~> null
	| System.Exception._helpURL ~> null
	| System.Exception._innerException ~> null
	| System.Exception._ipForWatsonBuckets ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]
	| System.Exception._message ~> (HeapRef 9)
	| System.Exception._remoteStackIndex ~> 0
	| System.Exception._remoteStackTraceString ~> null
	| System.Exception._safeSerializationManager ~> (HeapRef 11)
	| System.Exception._source ~> null
	| System.Exception._stackTrace ~> null
	| System.Exception._stackTraceString ~> null
	| System.Exception._watsonBuckets ~> null
	| System.Exception._xcode ~> -532462766
	| System.Exception._xptrs ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> 0]]
8 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'A';
		10: 'u';
		11: 't';
		12: 'O';
		13: 'f';
		14: 'R';
		15: 'a';
		16: 'n';
		17: 'g';
		18: 'e';
		19: 'E';
		1: 'r';
		20: 'x';
		21: 'c';
		22: 'e';
		23: 'p';
		24: 't';
		25: 'i';
		26: 'o';
		27: 'n';
		28: '\000';
		2: 'g';
		3: '_';
		4: 'I';
		5: 'n';
		6: 'd';
		7: 'e';
		8: 'x';
		9: 'O';
		 ... 29 ... |]
	| System.String.m_StringLength ~> 28]
9 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'G';
		10: 's';
		11: 'o';
		12: 'u';
		13: 'r';
		14: 'c';
		15: 'e';
		16: ' ';
		17: 's';
		18: 't';
		19: 'r';
		1: 'e';
		20: 'i';
		21: 'n';
		22: 'g';
		23: 's';
		24: ' ';
		25: 'c';
		26: 'u';
		27: 'r';
		28: 'r';
		29: 'e';
		2: 't';
		30: 'n';
		31: 't';
		32: 'l';
		33: 'y';
		34: ' ';
		35: 'n';
		36: 'o';
		37: 't';
		38: ' ';
		39: 's';
		3: 't';
		40: 'u';
		41: 'p';
		42: 'p';
		43: 'o';
		44: 'r';
		45: 't';
		46: 'e';
		47: 'd';
		48: '!';
		49: '\000';
		4: 'i';
		5: 'n';
		6: 'g';
		7: ' ';
		8: 'r';
		9: 'e';
		 ... 50 ... |]
	| System.String.m_StringLength ~> 49]
arr ==> TypeVariable1{System.Object}: [|
	1, 1: UNION[
		| !(0 == arr) & !(ArrayTypeVariable1 <: System.Int32[]) & (ArrayTypeVariable1 <: System.Int32[,]) & 1 < arr.0_Length & 1 < arr.1_Length ~> 7];
	1: UNION[
		| !(0 == arr) & (ArrayTypeVariable1 <: System.Int32[]) & 1 < arr.0_Length ~> 5];
	 ...  ... |]
---------- s1 = ----------
System.Environment ==> STRUCT System.Environment[
	| System.Environment.MaxEnvVariableValueLength ~> 32767
	| System.Environment.MaxMachineNameLength ~> 256
	| System.Environment.MaxSystemEnvVariableLength ~> 1024
	| System.Environment.MaxUserEnvVariableLength ~> 255
	| System.Environment.isUserNonInteractive ~> False
	| System.Environment.m_os ~> null
	| System.Environment.m_resHelper ~> null
	| System.Environment.processWinStation ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]
	| System.Environment.s_CheckedOSWin8OrAbove ~> False
	| System.Environment.s_CheckedWinRT ~> False
	| System.Environment.s_InternalSyncObject ~> null
	| System.Environment.s_IsWindows8OrAbove ~> False
	| System.Environment.s_WinRTSupported ~> False]
System.Exception ==> STRUCT System.Exception[
	| System.Exception._COMPlusExceptionCode ~> -532462766
	| System.Exception.s_EDILock ~> UNION[
		| !(0 == arr) & (ArrayTypeVariable1 <: System.Int32[]) ~> (HeapRef 4)
		| !(ArrayTypeVariable1 <: System.Int32[]) | 0 == arr ~> (HeapRef 10)]]
System.IndexOutOfRangeException ==> STRUCT System.IndexOutOfRangeException[]
System.IntPtr ==> STRUCT System.IntPtr[
	| System.IntPtr.Zero ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]]
System.Object ==> STRUCT System.Object[]
System.Runtime.Serialization.SafeSerializationManager ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.RealTypeSerializationName ~> UNION[
		| !(0 == arr) & (ArrayTypeVariable1 <: System.Int32[]) ~> (HeapRef 6)
		| !(ArrayTypeVariable1 <: System.Int32[]) | 0 == arr ~> (HeapRef 12)]]
System.SystemException ==> STRUCT System.SystemException[]
System.UIntPtr ==> STRUCT System.UIntPtr[
	| System.UIntPtr.Zero ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]]
System.ValueType ==> STRUCT System.ValueType[]
VSharp.CSharpUtils.Tests.Lists ==> STRUCT VSharp.CSharpUtils.Tests.Lists[]
METHOD: System.Array VSharp.CSharpUtils.Tests.Lists.RetSystemArray2(System.Array)
RESULT: UNION[
	| !(0 == arr) & !(1 < arr.0_Length) & (!(0 == arr) & (!(1 < arr.0_Length) | !(1 < arr.1_Length) | !(1 < arr.2_Length)) & (!(1 < arr.0_Length) | !(1 < arr.1_Length)) & (ArrayTypeVariable1 <: System.Int32[,,]) & (ArrayTypeVariable1 <: System.Int32[,]) | !(0 == arr) & (!(1 < arr.0_Length) | !(1 < arr.1_Length)) & ((!(1 < arr.0_Length) | !(1 < arr.1_Length) | !(1 < arr.2_Length)) & (!(ArrayTypeVariable1 <: System.Int32[,,]) | 0 == arr) | 1 < arr.0_Length & 1 < arr.1_Length & 1 < arr.2_Length) & (ArrayTypeVariable1 <: System.Int32[,])) & (ArrayTypeVariable1 <: System.Int32[]) | !(0 == arr) & !(1 < arr.0_Length) & ((!(1 < arr.0_Length) | !(1 < arr.1_Length) | !(1 < arr.2_Length)) & (!(ArrayTypeVariable1 <: System.Int32[,,]) | 0 == arr) | 1 < arr.0_Length & 1 < arr.1_Length & 1 < arr.2_Length) & ((!(1 < arr.0_Length) | !(1 < arr.1_Length)) & (!(ArrayTypeVariable1 <: System.Int32[,]) | 0 == arr) | 1 < arr.0_Length & 1 < arr.1_Length) & (ArrayTypeVariable1 <: System.Int32[]) | !(0 == arr) & !(1 < arr.0_Length) & ((!(1 < arr.0_Length) | !(1 < arr.1_Length)) & (!(ArrayTypeVariable1 <: System.Int32[,]) | 0 == arr) | 1 < arr.0_Length & 1 < arr.1_Length) & (ArrayTypeVariable1 <: System.Int32[,,]) & (ArrayTypeVariable1 <: System.Int32[]) ~> <ERROR: (HeapRef 1)>
	| !(0 == arr) & (!(1 < arr.0_Length) | !(1 < arr.1_Length) | !(1 < arr.2_Length)) & (!(ArrayTypeVariable1 <: System.Int32[]) | 1 < arr.0_Length) & ((!(1 < arr.0_Length) | !(1 < arr.1_Length)) & (!(ArrayTypeVariable1 <: System.Int32[,]) | 0 == arr) | 1 < arr.0_Length & 1 < arr.1_Length) & (ArrayTypeVariable1 <: System.Int32[,,]) ~> <ERROR: (HeapRef 11)>
	| (!(0 == arr) & (!(1 < arr.0_Length) | !(1 < arr.1_Length) | !(1 < arr.2_Length)) & (!(1 < arr.0_Length) | !(1 < arr.1_Length)) & (ArrayTypeVariable1 <: System.Int32[,,]) & (ArrayTypeVariable1 <: System.Int32[,]) | !(0 == arr) & (!(1 < arr.0_Length) | !(1 < arr.1_Length)) & ((!(1 < arr.0_Length) | !(1 < arr.1_Length) | !(1 < arr.2_Length)) & (!(ArrayTypeVariable1 <: System.Int32[,,]) | 0 == arr) | 1 < arr.0_Length & 1 < arr.1_Length & 1 < arr.2_Length) & (ArrayTypeVariable1 <: System.Int32[,])) & (!(ArrayTypeVariable1 <: System.Int32[]) | 0 == arr | 1 < arr.0_Length) ~> <ERROR: (HeapRef 7)>
	| (!(ArrayTypeVariable1 <: System.Int32[]) | 0 == arr | 1 < arr.0_Length) & ((!(1 < arr.0_Length) | !(1 < arr.1_Length) | !(1 < arr.2_Length)) & (!(ArrayTypeVariable1 <: System.Int32[,,]) | 0 == arr) | 1 < arr.0_Length & 1 < arr.1_Length & 1 < arr.2_Length) & ((!(1 < arr.0_Length) | !(1 < arr.1_Length)) & (!(ArrayTypeVariable1 <: System.Int32[,]) | 0 == arr) | 1 < arr.0_Length & 1 < arr.1_Length) ~> (HeapRef arr)]
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> STRUCT System.IndexOutOfRangeException[
	| System.Exception._HResult ~> -2146233080
	| System.Exception._className ~> null
	| System.Exception._data ~> null
	| System.Exception._dynamicMethods ~> null
	| System.Exception._exceptionMethod ~> null
	| System.Exception._exceptionMethodString ~> null
	| System.Exception._helpURL ~> null
	| System.Exception._innerException ~> null
	| System.Exception._ipForWatsonBuckets ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]
	| System.Exception._message ~> (HeapRef 3)
	| System.Exception._remoteStackIndex ~> 0
	| System.Exception._remoteStackTraceString ~> null
	| System.Exception._safeSerializationManager ~> (HeapRef 5)
	| System.Exception._source ~> null
	| System.Exception._stackTrace ~> null
	| System.Exception._stackTraceString ~> null
	| System.Exception._watsonBuckets ~> null
	| System.Exception._xcode ~> -532462766
	| System.Exception._xptrs ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> 0]]
10 ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.m_realObject ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_realType ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_savedSerializationInfo ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_serializedStates ~> null]
11 ==> STRUCT System.IndexOutOfRangeException[
	| System.Exception._HResult ~> -2146233080
	| System.Exception._className ~> null
	| System.Exception._data ~> null
	| System.Exception._dynamicMethods ~> null
	| System.Exception._exceptionMethod ~> null
	| System.Exception._exceptionMethodString ~> null
	| System.Exception._helpURL ~> null
	| System.Exception._innerException ~> null
	| System.Exception._ipForWatsonBuckets ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]
	| System.Exception._message ~> (HeapRef 13)
	| System.Exception._remoteStackIndex ~> 0
	| System.Exception._remoteStackTraceString ~> null
	| System.Exception._safeSerializationManager ~> (HeapRef 14)
	| System.Exception._source ~> null
	| System.Exception._stackTrace ~> null
	| System.Exception._stackTraceString ~> null
	| System.Exception._watsonBuckets ~> null
	| System.Exception._xcode ~> -532462766
	| System.Exception._xptrs ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> 0]]
12 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'A';
		10: 'u';
		11: 't';
		12: 'O';
		13: 'f';
		14: 'R';
		15: 'a';
		16: 'n';
		17: 'g';
		18: 'e';
		19: 'E';
		1: 'r';
		20: 'x';
		21: 'c';
		22: 'e';
		23: 'p';
		24: 't';
		25: 'i';
		26: 'o';
		27: 'n';
		28: '\000';
		2: 'g';
		3: '_';
		4: 'I';
		5: 'n';
		6: 'd';
		7: 'e';
		8: 'x';
		9: 'O';
		 ... 29 ... |]
	| System.String.m_StringLength ~> 28]
13 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'G';
		10: 's';
		11: 'o';
		12: 'u';
		13: 'r';
		14: 'c';
		15: 'e';
		16: ' ';
		17: 's';
		18: 't';
		19: 'r';
		1: 'e';
		20: 'i';
		21: 'n';
		22: 'g';
		23: 's';
		24: ' ';
		25: 'c';
		26: 'u';
		27: 'r';
		28: 'r';
		29: 'e';
		2: 't';
		30: 'n';
		31: 't';
		32: 'l';
		33: 'y';
		34: ' ';
		35: 'n';
		36: 'o';
		37: 't';
		38: ' ';
		39: 's';
		3: 't';
		40: 'u';
		41: 'p';
		42: 'p';
		43: 'o';
		44: 'r';
		45: 't';
		46: 'e';
		47: 'd';
		48: '!';
		49: '\000';
		4: 'i';
		5: 'n';
		6: 'g';
		7: ' ';
		8: 'r';
		9: 'e';
		 ... 50 ... |]
	| System.String.m_StringLength ~> 49]
14 ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.m_realObject ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_realType ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_savedSerializationInfo ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_serializedStates ~> null]
2 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'A';
		10: 'u';
		11: 't';
		12: 'O';
		13: 'f';
		14: 'R';
		15: 'a';
		16: 'n';
		17: 'g';
		18: 'e';
		19: 'E';
		1: 'r';
		20: 'x';
		21: 'c';
		22: 'e';
		23: 'p';
		24: 't';
		25: 'i';
		26: 'o';
		27: 'n';
		28: '\000';
		2: 'g';
		3: '_';
		4: 'I';
		5: 'n';
		6: 'd';
		7: 'e';
		8: 'x';
		9: 'O';
		 ... 29 ... |]
	| System.String.m_StringLength ~> 28]
3 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'G';
		10: 's';
		11: 'o';
		12: 'u';
		13: 'r';
		14: 'c';
		15: 'e';
		16: ' ';
		17: 's';
		18: 't';
		19: 'r';
		1: 'e';
		20: 'i';
		21: 'n';
		22: 'g';
		23: 's';
		24: ' ';
		25: 'c';
		26: 'u';
		27: 'r';
		28: 'r';
		29: 'e';
		2: 't';
		30: 'n';
		31: 't';
		32: 'l';
		33: 'y';
		34: ' ';
		35: 'n';
		36: 'o';
		37: 't';
		38: ' ';
		39: 's';
		3: 't';
		40: 'u';
		41: 'p';
		42: 'p';
		43: 'o';
		44: 'r';
		45: 't';
		46: 'e';
		47: 'd';
		48: '!';
		49: '\000';
		4: 'i';
		5: 'n';
		6: 'g';
		7: ' ';
		8: 'r';
		9: 'e';
		 ... 50 ... |]
	| System.String.m_StringLength ~> 49]
4 ==> STRUCT System.Object[]
5 ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.m_realObject ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_realType ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_savedSerializationInfo ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_serializedStates ~> null]
6 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'C';
		10: 'r';
		11: 'i';
		12: 'a';
		13: 'l';
		14: 'i';
		15: 'z';
		16: 'a';
		17: 't';
		18: 'i';
		19: 'o';
		1: 'L';
		20: 'n';
		21: 'M';
		22: 'a';
		23: 'n';
		24: 'a';
		25: 'g';
		26: 'e';
		27: 'r';
		28: '_';
		29: 'R';
		2: 'R';
		30: 'e';
		31: 'a';
		32: 'l';
		33: 'T';
		34: 'y';
		35: 'p';
		36: 'e';
		37: '\000';
		3: '_';
		4: 'S';
		5: 'a';
		6: 'f';
		7: 'e';
		8: 'S';
		9: 'e';
		 ... 38 ... |]
	| System.String.m_StringLength ~> 37]
7 ==> STRUCT System.IndexOutOfRangeException[
	| System.Exception._HResult ~> -2146233080
	| System.Exception._className ~> null
	| System.Exception._data ~> null
	| System.Exception._dynamicMethods ~> null
	| System.Exception._exceptionMethod ~> null
	| System.Exception._exceptionMethodString ~> null
	| System.Exception._helpURL ~> null
	| System.Exception._innerException ~> null
	| System.Exception._ipForWatsonBuckets ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]
	| System.Exception._message ~> (HeapRef 9)
	| System.Exception._remoteStackIndex ~> 0
	| System.Exception._remoteStackTraceString ~> null
	| System.Exception._safeSerializationManager ~> (HeapRef 10)
	| System.Exception._source ~> null
	| System.Exception._stackTrace ~> null
	| System.Exception._stackTraceString ~> null
	| System.Exception._watsonBuckets ~> null
	| System.Exception._xcode ~> -532462766
	| System.Exception._xptrs ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> 0]]
8 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'A';
		10: 'u';
		11: 't';
		12: 'O';
		13: 'f';
		14: 'R';
		15: 'a';
		16: 'n';
		17: 'g';
		18: 'e';
		19: 'E';
		1: 'r';
		20: 'x';
		21: 'c';
		22: 'e';
		23: 'p';
		24: 't';
		25: 'i';
		26: 'o';
		27: 'n';
		28: '\000';
		2: 'g';
		3: '_';
		4: 'I';
		5: 'n';
		6: 'd';
		7: 'e';
		8: 'x';
		9: 'O';
		 ... 29 ... |]
	| System.String.m_StringLength ~> 28]
9 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'G';
		10: 's';
		11: 'o';
		12: 'u';
		13: 'r';
		14: 'c';
		15: 'e';
		16: ' ';
		17: 's';
		18: 't';
		19: 'r';
		1: 'e';
		20: 'i';
		21: 'n';
		22: 'g';
		23: 's';
		24: ' ';
		25: 'c';
		26: 'u';
		27: 'r';
		28: 'r';
		29: 'e';
		2: 't';
		30: 'n';
		31: 't';
		32: 'l';
		33: 'y';
		34: ' ';
		35: 'n';
		36: 'o';
		37: 't';
		38: ' ';
		39: 's';
		3: 't';
		40: 'u';
		41: 'p';
		42: 'p';
		43: 'o';
		44: 'r';
		45: 't';
		46: 'e';
		47: 'd';
		48: '!';
		49: '\000';
		4: 'i';
		5: 'n';
		6: 'g';
		7: ' ';
		8: 'r';
		9: 'e';
		 ... 50 ... |]
	| System.String.m_StringLength ~> 49]
arr ==> TypeVariable1{System.Object}: [|
	1, 1, 1: UNION[
		| !(0 == arr) & (!(ArrayTypeVariable1 <: System.Int32[,]) | 1 < arr.0_Length & 1 < arr.1_Length) & (ArrayTypeVariable1 <: System.Int32[,,]) & 1 < arr.0_Length & 1 < arr.1_Length & 1 < arr.2_Length ~> 42];
	1, 1: UNION[
		| !(0 == arr) & (ArrayTypeVariable1 <: System.Int32[,]) & 1 < arr.0_Length & 1 < arr.1_Length ~> 7];
	1: UNION[
		| (!(0 == arr) & !(1 < arr.1_Length) & (ArrayTypeVariable1 <: System.Int32[,]) & (ArrayTypeVariable1 <: System.Int32[]) & 1 < arr.0_Length | (!(0 == arr) & !(ArrayTypeVariable1 <: System.Int32[,,]) & (ArrayTypeVariable1 <: System.Int32[]) & 1 < arr.0_Length | !(0 == arr) & (!(0 == arr) & (!(1 < arr.1_Length) | !(1 < arr.2_Length)) & (ArrayTypeVariable1 <: System.Int32[]) & 1 < arr.0_Length | !(0 == arr) & (ArrayTypeVariable1 <: System.Int32[]) & 1 < arr.0_Length & 1 < arr.1_Length & 1 < arr.2_Length) & (ArrayTypeVariable1 <: System.Int32[,,])) & (!(ArrayTypeVariable1 <: System.Int32[,]) | 0 == arr | 1 < arr.0_Length & 1 < arr.1_Length)) & (!(ArrayTypeVariable1 <: System.Int32[]) | 0 == arr | 1 < arr.0_Length) ~> 5];
	 ...  ... |]
---------- s1 = ----------
System.Environment ==> STRUCT System.Environment[
	| System.Environment.MaxEnvVariableValueLength ~> 32767
	| System.Environment.MaxMachineNameLength ~> 256
	| System.Environment.MaxSystemEnvVariableLength ~> 1024
	| System.Environment.MaxUserEnvVariableLength ~> 255
	| System.Environment.isUserNonInteractive ~> False
	| System.Environment.m_os ~> null
	| System.Environment.m_resHelper ~> null
	| System.Environment.processWinStation ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]
	| System.Environment.s_CheckedOSWin8OrAbove ~> False
	| System.Environment.s_CheckedWinRT ~> False
	| System.Environment.s_InternalSyncObject ~> null
	| System.Environment.s_IsWindows8OrAbove ~> False
	| System.Environment.s_WinRTSupported ~> False]
System.Exception ==> STRUCT System.Exception[
	| System.Exception._COMPlusExceptionCode ~> -532462766
	| System.Exception.s_EDILock ~> (HeapRef 4)]
System.IndexOutOfRangeException ==> STRUCT System.IndexOutOfRangeException[]
System.IntPtr ==> STRUCT System.IntPtr[
	| System.IntPtr.Zero ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]]
System.Object ==> STRUCT System.Object[]
System.Runtime.Serialization.SafeSerializationManager ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.RealTypeSerializationName ~> (HeapRef 6)]
System.SystemException ==> STRUCT System.SystemException[]
System.UIntPtr ==> STRUCT System.UIntPtr[
	| System.UIntPtr.Zero ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]]
System.ValueType ==> STRUCT System.ValueType[]
VSharp.CSharpUtils.Tests.Lists ==> STRUCT VSharp.CSharpUtils.Tests.Lists[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Unsafe.ChangeThroughIndirection()
RESULT: 14
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Unsafe ==> STRUCT VSharp.CSharpUtils.Tests.Unsafe[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Unsafe.CharSizeOf()
RESULT: 2
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Unsafe ==> STRUCT VSharp.CSharpUtils.Tests.Unsafe[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Unsafe.StrangeSizeOf()
RESULT: 70
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Unsafe ==> STRUCT VSharp.CSharpUtils.Tests.Unsafe[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Unsafe.ReturnConst()
RESULT: 421234123
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Unsafe ==> STRUCT VSharp.CSharpUtils.Tests.Unsafe[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Unsafe.DoubleIndirection()
RESULT: 428999
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Unsafe ==> STRUCT VSharp.CSharpUtils.Tests.Unsafe[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Unsafe.ReturnIntFromIntPtr(System.Int32)
RESULT: myFavouriteParameter
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
System.IntPtr ==> STRUCT System.IntPtr[
	| System.IntPtr.Zero ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]]
System.Object ==> STRUCT System.Object[]
System.ValueType ==> STRUCT System.ValueType[]
VSharp.CSharpUtils.Tests.Unsafe ==> STRUCT VSharp.CSharpUtils.Tests.Unsafe[]
METHOD: System.Void* VSharp.CSharpUtils.Tests.Unsafe.CompilerHackLikePtrReturn(System.Void*)
RESULT: (HeapPtr ptr as System.Void)
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
System.IntPtr ==> STRUCT System.IntPtr[
	| System.IntPtr.Zero ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]]
System.Object ==> STRUCT System.Object[]
System.ValueType ==> STRUCT System.ValueType[]
VSharp.CSharpUtils.Tests.Unsafe ==> STRUCT VSharp.CSharpUtils.Tests.Unsafe[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Unsafe.SimplePointerDifference(System.Int32, System.Double)
RESULT: x
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Unsafe ==> STRUCT VSharp.CSharpUtils.Tests.Unsafe[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Unsafe.PointerTriangle(System.Int32, System.Int32, System.Int32)
RESULT: x
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Unsafe ==> STRUCT VSharp.CSharpUtils.Tests.Unsafe[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Methods.VirtualB.F()
RESULT: 8
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Methods.VirtualB ==> STRUCT VSharp.CSharpUtils.Tests.Methods.VirtualB[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Methods.VirtualE.F()
RESULT: 9
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Methods.VirtualE ==> STRUCT VSharp.CSharpUtils.Tests.Methods.VirtualE[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Methods.VirtualC.F()
RESULT: 7
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Methods.VirtualC ==> STRUCT VSharp.CSharpUtils.Tests.Methods.VirtualC[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Methods.VirtualG.F()
RESULT: 66
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Methods.VirtualG ==> STRUCT VSharp.CSharpUtils.Tests.Methods.VirtualG[]
METHOD: VSharp.CSharpUtils.Tests.Typecast.IMovable VSharp.CSharpUtils.Tests.Methods.VirtualMethod.MakeVirtualMove(VSharp.CSharpUtils.Tests.Typecast.Pawn, VSharp.CSharpUtils.Tests.Typecast.Coord)
RESULT: UNION[
	| !(0 == p) ~> (HeapRef p)
	| 0 == p ~> <ERROR: (HeapRef 3)>]
HEAP:
{ heap = merge[
	((VSharp.CSharpUtils.Tests.Typecast.Pawn <: TypeVariable1{VSharp.CSharpUtils.Tests.Typecast.Pawn}) | 0 == p, h0),
	(!(0 == p) & !(VSharp.CSharpUtils.Tests.Typecast.Pawn <: TypeVariable1{VSharp.CSharpUtils.Tests.Typecast.Pawn}), app(MakeMove((HeapRef p), STRUCT VSharp.CSharpUtils.Tests.Typecast.Coord[])))], statics = s1 } where
---------- h0 = ----------
2 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: UNION[
			| 0 == p ~> 'S'];
		10: UNION[
			| 0 == p ~> 'c'];
		11: UNION[
			| 0 == p ~> 'a'];
		12: UNION[
			| 0 == p ~> 's'];
		13: UNION[
			| 0 == p ~> 't'];
		14: UNION[
			| 0 == p ~> ' '];
		15: UNION[
			| 0 == p ~> 'i'];
		16: UNION[
			| 0 == p ~> 's'];
		17: UNION[
			| 0 == p ~> ' '];
		18: UNION[
			| 0 == p ~> 'n'];
		19: UNION[
			| 0 == p ~> 'o'];
		1: UNION[
			| 0 == p ~> 'p'];
		20: UNION[
			| 0 == p ~> 't'];
		21: UNION[
			| 0 == p ~> ' '];
		22: UNION[
			| 0 == p ~> 'v'];
		23: UNION[
			| 0 == p ~> 'a'];
		24: UNION[
			| 0 == p ~> 'l'];
		25: UNION[
			| 0 == p ~> 'i'];
		26: UNION[
			| 0 == p ~> 'd'];
		27: UNION[
			| 0 == p ~> '.'];
		28: UNION[
			| 0 == p ~> '\000'];
		2: UNION[
			| 0 == p ~> 'e'];
		3: UNION[
			| 0 == p ~> 'c'];
		4: UNION[
			| 0 == p ~> 'i'];
		5: UNION[
			| 0 == p ~> 'f'];
		6: UNION[
			| 0 == p ~> 'i'];
		7: UNION[
			| 0 == p ~> 'e'];
		8: UNION[
			| 0 == p ~> 'd'];
		9: UNION[
			| 0 == p ~> ' '];
		 ... UNION[
	| 0 == p ~> 29] ... |]
	| System.String.m_StringLength ~> UNION[
		| 0 == p ~> 28]]
3 ==> STRUCT System.InvalidCastException[
	| System.Exception._HResult ~> UNION[
		| 0 == p ~> -2147467262]
	| System.Exception._className ~> UNION[
		| 0 == p ~> null]
	| System.Exception._data ~> UNION[
		| 0 == p ~> null]
	| System.Exception._dynamicMethods ~> UNION[
		| 0 == p ~> null]
	| System.Exception._exceptionMethod ~> UNION[
		| 0 == p ~> null]
	| System.Exception._exceptionMethodString ~> UNION[
		| 0 == p ~> null]
	| System.Exception._helpURL ~> UNION[
		| 0 == p ~> null]
	| System.Exception._innerException ~> UNION[
		| 0 == p ~> null]
	| System.Exception._ipForWatsonBuckets ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> UNION[
			| 0 == p ~> null]]
	| System.Exception._message ~> UNION[
		| 0 == p ~> (HeapRef 2)]
	| System.Exception._remoteStackIndex ~> UNION[
		| 0 == p ~> 0]
	| System.Exception._remoteStackTraceString ~> UNION[
		| 0 == p ~> null]
	| System.Exception._safeSerializationManager ~> UNION[
		| 0 == p ~> (HeapRef 5)]
	| System.Exception._source ~> UNION[
		| 0 == p ~> null]
	| System.Exception._stackTrace ~> UNION[
		| 0 == p ~> null]
	| System.Exception._stackTraceString ~> UNION[
		| 0 == p ~> null]
	| System.Exception._watsonBuckets ~> UNION[
		| 0 == p ~> null]
	| System.Exception._xcode ~> UNION[
		| 0 == p ~> -532462766]
	| System.Exception._xptrs ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> UNION[
			| 0 == p ~> 0]]]
4 ==> STRUCT System.Object[]
5 ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.m_realObject ~> UNION[
		| 0 == p ~> null]
	| System.Runtime.Serialization.SafeSerializationManager.m_realType ~> UNION[
		| 0 == p ~> null]
	| System.Runtime.Serialization.SafeSerializationManager.m_savedSerializationInfo ~> UNION[
		| 0 == p ~> null]
	| System.Runtime.Serialization.SafeSerializationManager.m_serializedStates ~> UNION[
		| 0 == p ~> null]]
6 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: UNION[
			| !hasKey#10 & 0 == p ~> 'C'];
		10: UNION[
			| !hasKey#10 & 0 == p ~> 'r'];
		11: UNION[
			| !hasKey#10 & 0 == p ~> 'i'];
		12: UNION[
			| !hasKey#10 & 0 == p ~> 'a'];
		13: UNION[
			| !hasKey#10 & 0 == p ~> 'l'];
		14: UNION[
			| !hasKey#10 & 0 == p ~> 'i'];
		15: UNION[
			| !hasKey#10 & 0 == p ~> 'z'];
		16: UNION[
			| !hasKey#10 & 0 == p ~> 'a'];
		17: UNION[
			| !hasKey#10 & 0 == p ~> 't'];
		18: UNION[
			| !hasKey#10 & 0 == p ~> 'i'];
		19: UNION[
			| !hasKey#10 & 0 == p ~> 'o'];
		1: UNION[
			| !hasKey#10 & 0 == p ~> 'L'];
		20: UNION[
			| !hasKey#10 & 0 == p ~> 'n'];
		21: UNION[
			| !hasKey#10 & 0 == p ~> 'M'];
		22: UNION[
			| !hasKey#10 & 0 == p ~> 'a'];
		23: UNION[
			| !hasKey#10 & 0 == p ~> 'n'];
		24: UNION[
			| !hasKey#10 & 0 == p ~> 'a'];
		25: UNION[
			| !hasKey#10 & 0 == p ~> 'g'];
		26: UNION[
			| !hasKey#10 & 0 == p ~> 'e'];
		27: UNION[
			| !hasKey#10 & 0 == p ~> 'r'];
		28: UNION[
			| !hasKey#10 & 0 == p ~> '_'];
		29: UNION[
			| !hasKey#10 & 0 == p ~> 'R'];
		2: UNION[
			| !hasKey#10 & 0 == p ~> 'R'];
		30: UNION[
			| !hasKey#10 & 0 == p ~> 'e'];
		31: UNION[
			| !hasKey#10 & 0 == p ~> 'a'];
		32: UNION[
			| !hasKey#10 & 0 == p ~> 'l'];
		33: UNION[
			| !hasKey#10 & 0 == p ~> 'T'];
		34: UNION[
			| !hasKey#10 & 0 == p ~> 'y'];
		35: UNION[
			| !hasKey#10 & 0 == p ~> 'p'];
		36: UNION[
			| !hasKey#10 & 0 == p ~> 'e'];
		37: UNION[
			| !hasKey#10 & 0 == p ~> '\000'];
		3: UNION[
			| !hasKey#10 & 0 == p ~> '_'];
		4: UNION[
			| !hasKey#10 & 0 == p ~> 'S'];
		5: UNION[
			| !hasKey#10 & 0 == p ~> 'a'];
		6: UNION[
			| !hasKey#10 & 0 == p ~> 'f'];
		7: UNION[
			| !hasKey#10 & 0 == p ~> 'e'];
		8: UNION[
			| !hasKey#10 & 0 == p ~> 'S'];
		9: UNION[
			| !hasKey#10 & 0 == p ~> 'e'];
		 ... UNION[
	| !hasKey#10 & 0 == p ~> 38] ... |]
	| System.String.m_StringLength ~> UNION[
		| !hasKey#10 & 0 == p ~> 37]]
p ==> STRUCT TypeVariable1{VSharp.CSharpUtils.Tests.Typecast.Pawn}[
	| VSharp.CSharpUtils.Tests.Typecast.Piece._xCoord ~> UNION[
		| !(0 == p) & (VSharp.CSharpUtils.Tests.Typecast.Pawn <: TypeVariable1{VSharp.CSharpUtils.Tests.Typecast.Pawn}) ~> VSharp.CSharpUtils.Tests.Typecast.Coord.X + VSharp.CSharpUtils.Tests.Typecast.Coord.Y]
	| VSharp.CSharpUtils.Tests.Typecast.Piece._yCoord ~> UNION[
		| !(0 == p) & (VSharp.CSharpUtils.Tests.Typecast.Pawn <: TypeVariable1{VSharp.CSharpUtils.Tests.Typecast.Pawn}) ~> -VSharp.CSharpUtils.Tests.Typecast.Coord.Y + VSharp.CSharpUtils.Tests.Typecast.Coord.X]]
---------- s1 = ----------
System.Exception ==> STRUCT System.Exception[
	| System.Exception._COMPlusExceptionCode ~> -532462766
	| System.Exception.s_EDILock ~> (HeapRef 4)]
System.IntPtr ==> STRUCT System.IntPtr[
	| System.IntPtr.Zero ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]]
System.InvalidCastException ==> STRUCT System.InvalidCastException[]
System.Object ==> STRUCT System.Object[]
System.Runtime.Serialization.SafeSerializationManager ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.RealTypeSerializationName ~> (HeapRef 6)]
System.SystemException ==> STRUCT System.SystemException[]
System.UIntPtr ==> STRUCT System.UIntPtr[
	| System.UIntPtr.Zero ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]]
System.ValueType ==> STRUCT System.ValueType[]
VSharp.CSharpUtils.Tests.Methods.VirtualMethod ==> STRUCT VSharp.CSharpUtils.Tests.Methods.VirtualMethod[]
VSharp.CSharpUtils.Tests.Typecast.Coord ==> STRUCT VSharp.CSharpUtils.Tests.Typecast.Coord[]
VSharp.CSharpUtils.Tests.Typecast.Piece ==> STRUCT VSharp.CSharpUtils.Tests.Typecast.Piece[]
METHOD: VSharp.CSharpUtils.Tests.Typecast.IMovable VSharp.CSharpUtils.Tests.Methods.VirtualMethod.MakeInterfaceMove(VSharp.CSharpUtils.Tests.Typecast.IMovable, VSharp.CSharpUtils.Tests.Typecast.Coord)
RESULT: UNION[
	| !(0 == p) ~> MakeMove((HeapRef p), STRUCT VSharp.CSharpUtils.Tests.Typecast.Coord[])
	| 0 == p ~> null]
HEAP:
{ heap = merge[
	(!(0 == p) & !(VSharp.CSharpUtils.Tests.Typecast.IMovable <: TypeVariable1{VSharp.CSharpUtils.Tests.Typecast.IMovable}), { heap = <empty>, statics = s0 } ⚪ app(MakeMove((HeapRef p), STRUCT VSharp.CSharpUtils.Tests.Typecast.Coord[]))),
	(!(0 == p) & (VSharp.CSharpUtils.Tests.Typecast.IMovable <: TypeVariable1{VSharp.CSharpUtils.Tests.Typecast.IMovable}), { heap = <empty>, statics = s0 } ⚪ app(MakeMove((HeapRef p), STRUCT VSharp.CSharpUtils.Tests.Typecast.Coord[]))),
	(0 == p, <empty>)], statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Methods.VirtualMethod ==> STRUCT VSharp.CSharpUtils.Tests.Methods.VirtualMethod[]
VSharp.CSharpUtils.Tests.Typecast.IMovable ==> STRUCT VSharp.CSharpUtils.Tests.Typecast.IMovable[]
METHOD: VSharp.CSharpUtils.Tests.Typecast.IMovable VSharp.CSharpUtils.Tests.Methods.VirtualMethod.MakeConcreteMove(VSharp.CSharpUtils.Tests.Typecast.Coord)
RESULT: (HeapRef 1)
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> STRUCT VSharp.CSharpUtils.Tests.Typecast.Piece[
	| VSharp.CSharpUtils.Tests.Typecast.Piece.Rate ~> 0
	| VSharp.CSharpUtils.Tests.Typecast.Piece._xCoord ~> VSharp.CSharpUtils.Tests.Typecast.Coord.X
	| VSharp.CSharpUtils.Tests.Typecast.Piece._yCoord ~> VSharp.CSharpUtils.Tests.Typecast.Coord.Y]
---------- s1 = ----------
System.Object ==> STRUCT System.Object[]
VSharp.CSharpUtils.Tests.Methods.VirtualMethod ==> STRUCT VSharp.CSharpUtils.Tests.Methods.VirtualMethod[]
VSharp.CSharpUtils.Tests.Typecast.Coord ==> STRUCT VSharp.CSharpUtils.Tests.Typecast.Coord[]
VSharp.CSharpUtils.Tests.Typecast.Piece ==> STRUCT VSharp.CSharpUtils.Tests.Typecast.Piece[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Methods.VirtualMethod.VirtualCall(VSharp.CSharpUtils.Tests.Methods.IVirtual)
RESULT: UNION[
	| !(0 == a) & !(TypeVariable1{VSharp.CSharpUtils.Tests.Methods.IVirtual} <: VSharp.CSharpUtils.Tests.Methods.VirtualC) ~> F((HeapRef a))
	| !(0 == a) & !(VSharp.CSharpUtils.Tests.Methods.VirtualC <: TypeVariable1{VSharp.CSharpUtils.Tests.Methods.IVirtual}) & (TypeVariable1{VSharp.CSharpUtils.Tests.Methods.IVirtual} <: VSharp.CSharpUtils.Tests.Methods.VirtualC) ~> F((HeapRef a))
	| !(0 == a) & (TypeVariable1{VSharp.CSharpUtils.Tests.Methods.IVirtual} <: VSharp.CSharpUtils.Tests.Methods.VirtualC) & (VSharp.CSharpUtils.Tests.Methods.VirtualC <: TypeVariable1{VSharp.CSharpUtils.Tests.Methods.IVirtual}) ~> 7
	| 0 == a ~> 0]
HEAP:
{ heap = merge[
	(!(0 == a) & !(VSharp.CSharpUtils.Tests.Methods.VirtualC <: TypeVariable1{VSharp.CSharpUtils.Tests.Methods.IVirtual}) & (TypeVariable1{VSharp.CSharpUtils.Tests.Methods.IVirtual} <: VSharp.CSharpUtils.Tests.Methods.VirtualC), { heap = h0, statics = s1 } ⚪ app(F((HeapRef a)))),
	(!(0 == a) & !(TypeVariable1{VSharp.CSharpUtils.Tests.Methods.IVirtual} <: VSharp.CSharpUtils.Tests.Methods.VirtualC) & (VSharp.CSharpUtils.Tests.Methods.IVirtual <: TypeVariable1{VSharp.CSharpUtils.Tests.Methods.IVirtual}), { heap = h0, statics = s2 } ⚪ app(F((HeapRef a)))),
	(!(0 == a) & !(TypeVariable1{VSharp.CSharpUtils.Tests.Methods.IVirtual} <: VSharp.CSharpUtils.Tests.Methods.VirtualC) & !(VSharp.CSharpUtils.Tests.Methods.IVirtual <: TypeVariable1{VSharp.CSharpUtils.Tests.Methods.IVirtual}), { heap = h0, statics = s2 } ⚪ app(F((HeapRef a)))),
	((TypeVariable1{VSharp.CSharpUtils.Tests.Methods.IVirtual} <: VSharp.CSharpUtils.Tests.Methods.VirtualC) & (VSharp.CSharpUtils.Tests.Methods.VirtualC <: TypeVariable1{VSharp.CSharpUtils.Tests.Methods.IVirtual}) | 0 == a, h0)], statics = s2 } where
---------- h0 = ----------
a ==> STRUCT TypeVariable1{VSharp.CSharpUtils.Tests.Methods.IVirtual}[]
---------- s1 = ----------
VSharp.CSharpUtils.Tests.Methods.VirtualC ==> STRUCT VSharp.CSharpUtils.Tests.Methods.VirtualC[]
VSharp.CSharpUtils.Tests.Methods.VirtualMethod ==> STRUCT VSharp.CSharpUtils.Tests.Methods.VirtualMethod[]
---------- s2 = ----------
VSharp.CSharpUtils.Tests.Methods.IVirtual ==> STRUCT VSharp.CSharpUtils.Tests.Methods.IVirtual[]
VSharp.CSharpUtils.Tests.Methods.VirtualC ==> STRUCT VSharp.CSharpUtils.Tests.Methods.VirtualC[]
VSharp.CSharpUtils.Tests.Methods.VirtualMethod ==> STRUCT VSharp.CSharpUtils.Tests.Methods.VirtualMethod[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Methods.VirtualMethod.VirtualCall1(VSharp.CSharpUtils.Tests.Methods.VirtualC, System.Int32)
RESULT: UNION[
	| !(0 == a) & !(VSharp.CSharpUtils.Tests.Methods.VirtualC <: TypeVariable1{VSharp.CSharpUtils.Tests.Methods.VirtualC}) & !(n <= 10) ~> F((HeapRef a))
	| !(0 == a) & !(VSharp.CSharpUtils.Tests.Methods.VirtualC <: TypeVariable1{VSharp.CSharpUtils.Tests.Methods.VirtualC}) & n <= 10 ~> F((HeapRef a))
	| !(0 == a) & !(n <= 10) & (VSharp.CSharpUtils.Tests.Methods.VirtualC <: TypeVariable1{VSharp.CSharpUtils.Tests.Methods.VirtualC}) ~> 7
	| !(0 == a) & (VSharp.CSharpUtils.Tests.Methods.VirtualC <: TypeVariable1{VSharp.CSharpUtils.Tests.Methods.VirtualC}) & n <= 10 ~> 71
	| 0 == a ~> 0]
HEAP:
{ heap = merge[
	(!(0 == a) & !(VSharp.CSharpUtils.Tests.Methods.VirtualC <: TypeVariable1{VSharp.CSharpUtils.Tests.Methods.VirtualC}) & !(n <= 10), { heap = <empty>, statics = s0 } ⚪ app(F((HeapRef a)))),
	(!(0 == a) & !(VSharp.CSharpUtils.Tests.Methods.VirtualC <: TypeVariable1{VSharp.CSharpUtils.Tests.Methods.VirtualC}) & n <= 10, { heap = h1, statics = s2 } ⚪ app(F((HeapRef a)))),
	((VSharp.CSharpUtils.Tests.Methods.VirtualC <: TypeVariable1{VSharp.CSharpUtils.Tests.Methods.VirtualC}) | 0 == a, h1)], statics = s2 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Methods.VirtualC ==> STRUCT VSharp.CSharpUtils.Tests.Methods.VirtualC[]
VSharp.CSharpUtils.Tests.Methods.VirtualMethod ==> STRUCT VSharp.CSharpUtils.Tests.Methods.VirtualMethod[]
---------- h1 = ----------
a ==> STRUCT TypeVariable1{VSharp.CSharpUtils.Tests.Methods.VirtualC}[]
---------- s2 = ----------
VSharp.CSharpUtils.Tests.Methods.IVirtual ==> STRUCT VSharp.CSharpUtils.Tests.Methods.IVirtual[]
VSharp.CSharpUtils.Tests.Methods.VirtualC ==> STRUCT VSharp.CSharpUtils.Tests.Methods.VirtualC[]
VSharp.CSharpUtils.Tests.Methods.VirtualMethod ==> STRUCT VSharp.CSharpUtils.Tests.Methods.VirtualMethod[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Methods.VirtualMethod.VirtualCall3(VSharp.CSharpUtils.Tests.Methods.VirtualG, System.Int32)
RESULT: UNION[
	| !(0 == a) & !(VSharp.CSharpUtils.Tests.Methods.VirtualG <: TypeVariable1{VSharp.CSharpUtils.Tests.Methods.VirtualG}) & !(n <= 10) ~> F((HeapRef a))
	| !(0 == a) & !(VSharp.CSharpUtils.Tests.Methods.VirtualG <: TypeVariable1{VSharp.CSharpUtils.Tests.Methods.VirtualG}) & n <= 10 ~> F((HeapRef a))
	| !(0 == a) & !(n <= 10) & (VSharp.CSharpUtils.Tests.Methods.VirtualG <: TypeVariable1{VSharp.CSharpUtils.Tests.Methods.VirtualG}) ~> 8
	| !(0 == a) & (VSharp.CSharpUtils.Tests.Methods.VirtualG <: TypeVariable1{VSharp.CSharpUtils.Tests.Methods.VirtualG}) & n <= 10 ~> 66
	| 0 == a ~> 0]
HEAP:
{ heap = merge[
	(!(0 == a) & !(VSharp.CSharpUtils.Tests.Methods.VirtualG <: TypeVariable1{VSharp.CSharpUtils.Tests.Methods.VirtualG}) & !(n <= 10), { heap = h0, statics = s1 } ⚪ app(F((HeapRef a)))),
	(!(0 == a) & !(VSharp.CSharpUtils.Tests.Methods.VirtualG <: TypeVariable1{VSharp.CSharpUtils.Tests.Methods.VirtualG}) & n <= 10, { heap = h0, statics = s2 } ⚪ app(F((HeapRef a)))),
	((VSharp.CSharpUtils.Tests.Methods.VirtualG <: TypeVariable1{VSharp.CSharpUtils.Tests.Methods.VirtualG}) | 0 == a, h0)], statics = s2 } where
---------- h0 = ----------
a ==> STRUCT TypeVariable1{VSharp.CSharpUtils.Tests.Methods.VirtualG}[]
---------- s1 = ----------
VSharp.CSharpUtils.Tests.Methods.VirtualB ==> STRUCT VSharp.CSharpUtils.Tests.Methods.VirtualB[]
VSharp.CSharpUtils.Tests.Methods.VirtualMethod ==> STRUCT VSharp.CSharpUtils.Tests.Methods.VirtualMethod[]
---------- s2 = ----------
VSharp.CSharpUtils.Tests.Methods.VirtualB ==> STRUCT VSharp.CSharpUtils.Tests.Methods.VirtualB[]
VSharp.CSharpUtils.Tests.Methods.VirtualC ==> STRUCT VSharp.CSharpUtils.Tests.Methods.VirtualC[]
VSharp.CSharpUtils.Tests.Methods.VirtualMethod ==> STRUCT VSharp.CSharpUtils.Tests.Methods.VirtualMethod[]
METHOD: System.Double VSharp.CSharpUtils.Tests.Typecast.Coord.Norm()
RESULT: sqrt((System.Double)(VSharp.CSharpUtils.Tests.Typecast.Coord.X * VSharp.CSharpUtils.Tests.Typecast.Coord.X + VSharp.CSharpUtils.Tests.Typecast.Coord.Y * VSharp.CSharpUtils.Tests.Typecast.Coord.Y))
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> [|
	0: 1;
	10: 10000000000;
	11: 100000000000;
	12: 1000000000000;
	13: 10000000000000;
	14: 100000000000000;
	15: 1E+15;
	1: 10;
	2: 100;
	3: 1000;
	4: 10000;
	5: 100000;
	6: 1000000;
	7: 10000000;
	8: 100000000;
	9: 1000000000;
	 ... 16 ... |]
---------- s1 = ----------
System.Math ==> STRUCT System.Math[
	| System.Math.E ~> 2.71828182845905
	| System.Math.PI ~> 3.14159265358979
	| System.Math.doubleRoundLimit ~> 1E+16
	| System.Math.maxRoundingDigits ~> 15
	| System.Math.roundPower10Double ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Typecast.Coord ==> STRUCT VSharp.CSharpUtils.Tests.Typecast.Coord[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Typecast.Typecast.DownCastObject(System.Object)
RESULT: UNION[
	| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 5
	| !(TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) | 0 == obj ~> 6]
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
obj ==> STRUCT TypeVariable1{System.Object}[]
---------- s1 = ----------
VSharp.CSharpUtils.Tests.Typecast.Typecast ==> STRUCT VSharp.CSharpUtils.Tests.Typecast.Typecast[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Typecast.Typecast.DownCastObject2(System.Object, System.Object)
RESULT: UNION[
	| !(0 == obj1) & !(0 == obj2) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) & (TypeVariable2{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Pawn) | !(0 == obj1) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Pawn) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 5
	| (!(TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Pawn) | !(TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) | 0 == obj1) & (!(TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) | !(TypeVariable2{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Pawn) | 0 == obj1 | 0 == obj2) ~> 6]
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
obj1 ==> STRUCT TypeVariable1{System.Object}[]
obj2 ==> STRUCT TypeVariable2{System.Object}[]
---------- s1 = ----------
VSharp.CSharpUtils.Tests.Typecast.Typecast ==> STRUCT VSharp.CSharpUtils.Tests.Typecast.Typecast[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Typecast.Typecast.UpCast()
RESULT: 15
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> STRUCT VSharp.CSharpUtils.Tests.Typecast.Pawn[
	| VSharp.CSharpUtils.Tests.Typecast.Pawn._newField ~> 25
	| VSharp.CSharpUtils.Tests.Typecast.Piece.Rate ~> 1
	| VSharp.CSharpUtils.Tests.Typecast.Piece._xCoord ~> 1
	| VSharp.CSharpUtils.Tests.Typecast.Piece._yCoord ~> 1]
---------- s1 = ----------
System.Object ==> STRUCT System.Object[]
VSharp.CSharpUtils.Tests.Typecast.Pawn ==> STRUCT VSharp.CSharpUtils.Tests.Typecast.Pawn[]
VSharp.CSharpUtils.Tests.Typecast.Piece ==> STRUCT VSharp.CSharpUtils.Tests.Typecast.Piece[]
VSharp.CSharpUtils.Tests.Typecast.Typecast ==> STRUCT VSharp.CSharpUtils.Tests.Typecast.Typecast[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Typecast.Typecast.DownCastPiece(VSharp.CSharpUtils.Tests.Typecast.Piece)
RESULT: UNION[
	| !(0 == piece) & (TypeVariable1{VSharp.CSharpUtils.Tests.Typecast.Piece} <: VSharp.CSharpUtils.Tests.Typecast.Pawn) ~> 10
	| !(TypeVariable1{VSharp.CSharpUtils.Tests.Typecast.Piece} <: VSharp.CSharpUtils.Tests.Typecast.Pawn) | 0 == piece ~> 20]
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
piece ==> STRUCT TypeVariable1{VSharp.CSharpUtils.Tests.Typecast.Piece}[]
---------- s1 = ----------
VSharp.CSharpUtils.Tests.Typecast.Typecast ==> STRUCT VSharp.CSharpUtils.Tests.Typecast.Typecast[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Typecast.Typecast.CheckCastNullWithTrick()
RESULT: 20
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Typecast.Typecast ==> STRUCT VSharp.CSharpUtils.Tests.Typecast.Typecast[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Typecast.Typecast.CastAfterNull()
RESULT: 38
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> STRUCT VSharp.CSharpUtils.Tests.Typecast.Piece[
	| VSharp.CSharpUtils.Tests.Typecast.Piece.Rate ~> 0
	| VSharp.CSharpUtils.Tests.Typecast.Piece._xCoord ~> 1
	| VSharp.CSharpUtils.Tests.Typecast.Piece._yCoord ~> 3]
---------- s1 = ----------
System.Object ==> STRUCT System.Object[]
VSharp.CSharpUtils.Tests.Typecast.Piece ==> STRUCT VSharp.CSharpUtils.Tests.Typecast.Piece[]
VSharp.CSharpUtils.Tests.Typecast.Typecast ==> STRUCT VSharp.CSharpUtils.Tests.Typecast.Typecast[]
METHOD: VSharp.CSharpUtils.Tests.Typecast.Pawn VSharp.CSharpUtils.Tests.Typecast.Typecast.TypeCast(System.Object)
RESULT: UNION[
	| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Pawn) ~> (HeapRef obj)
	| !(TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Pawn) | 0 == obj ~> <ERROR: (HeapRef 2)>]
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'S';
		10: 'c';
		11: 'a';
		12: 's';
		13: 't';
		14: ' ';
		15: 'i';
		16: 's';
		17: ' ';
		18: 'n';
		19: 'o';
		1: 'p';
		20: 't';
		21: ' ';
		22: 'v';
		23: 'a';
		24: 'l';
		25: 'i';
		26: 'd';
		27: '.';
		28: '\000';
		2: 'e';
		3: 'c';
		4: 'i';
		5: 'f';
		6: 'i';
		7: 'e';
		8: 'd';
		9: ' ';
		 ... 29 ... |]
	| System.String.m_StringLength ~> 28]
2 ==> STRUCT System.InvalidCastException[
	| System.Exception._HResult ~> -2147467262
	| System.Exception._className ~> null
	| System.Exception._data ~> null
	| System.Exception._dynamicMethods ~> null
	| System.Exception._exceptionMethod ~> null
	| System.Exception._exceptionMethodString ~> null
	| System.Exception._helpURL ~> null
	| System.Exception._innerException ~> null
	| System.Exception._ipForWatsonBuckets ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]
	| System.Exception._message ~> (HeapRef 1)
	| System.Exception._remoteStackIndex ~> 0
	| System.Exception._remoteStackTraceString ~> null
	| System.Exception._safeSerializationManager ~> (HeapRef 4)
	| System.Exception._source ~> null
	| System.Exception._stackTrace ~> null
	| System.Exception._stackTraceString ~> null
	| System.Exception._watsonBuckets ~> null
	| System.Exception._xcode ~> -532462766
	| System.Exception._xptrs ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> 0]]
3 ==> STRUCT System.Object[]
4 ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.m_realObject ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_realType ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_savedSerializationInfo ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_serializedStates ~> null]
5 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'C';
		10: 'r';
		11: 'i';
		12: 'a';
		13: 'l';
		14: 'i';
		15: 'z';
		16: 'a';
		17: 't';
		18: 'i';
		19: 'o';
		1: 'L';
		20: 'n';
		21: 'M';
		22: 'a';
		23: 'n';
		24: 'a';
		25: 'g';
		26: 'e';
		27: 'r';
		28: '_';
		29: 'R';
		2: 'R';
		30: 'e';
		31: 'a';
		32: 'l';
		33: 'T';
		34: 'y';
		35: 'p';
		36: 'e';
		37: '\000';
		3: '_';
		4: 'S';
		5: 'a';
		6: 'f';
		7: 'e';
		8: 'S';
		9: 'e';
		 ... 38 ... |]
	| System.String.m_StringLength ~> 37]
obj ==> STRUCT TypeVariable1{System.Object}[]
---------- s1 = ----------
System.Exception ==> STRUCT System.Exception[
	| System.Exception._COMPlusExceptionCode ~> -532462766
	| System.Exception.s_EDILock ~> (HeapRef 3)]
System.IntPtr ==> STRUCT System.IntPtr[
	| System.IntPtr.Zero ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]]
System.InvalidCastException ==> STRUCT System.InvalidCastException[]
System.Object ==> STRUCT System.Object[]
System.Runtime.Serialization.SafeSerializationManager ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.RealTypeSerializationName ~> (HeapRef 5)]
System.SystemException ==> STRUCT System.SystemException[]
System.UIntPtr ==> STRUCT System.UIntPtr[
	| System.UIntPtr.Zero ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]]
System.ValueType ==> STRUCT System.ValueType[]
VSharp.CSharpUtils.Tests.Typecast.Typecast ==> STRUCT VSharp.CSharpUtils.Tests.Typecast.Typecast[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Typecast.Typecast.Unboxing(System.Object)
RESULT: UNION[
	| !(0 == obj) & (TypeVariable1{System.Object} <: System.Int32) ~> 13
	| !(TypeVariable1{System.Object} <: System.Int32) | 0 == obj ~> 23]
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
obj ==> STRUCT TypeVariable1{System.Object}[]
---------- s1 = ----------
VSharp.CSharpUtils.Tests.Typecast.Typecast ==> STRUCT VSharp.CSharpUtils.Tests.Typecast.Typecast[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Typecast.Typecast.TryCast(System.Object)
RESULT: UNION[
	| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 33
	| !(TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) | 0 == obj ~> 42]
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
obj ==> STRUCT TypeVariable1{System.Object}[]
---------- s1 = ----------
VSharp.CSharpUtils.Tests.Typecast.Typecast ==> STRUCT VSharp.CSharpUtils.Tests.Typecast.Typecast[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Typecast.Typecast.TryUpCast(VSharp.CSharpUtils.Tests.Typecast.Piece)
RESULT: UNION[
	| !(0 == piece) ~> 33
	| 0 == piece ~> 42]
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'S';
		10: 'c';
		11: 'a';
		12: 's';
		13: 't';
		14: ' ';
		15: 'i';
		16: 's';
		17: ' ';
		18: 'n';
		19: 'o';
		1: 'p';
		20: 't';
		21: ' ';
		22: 'v';
		23: 'a';
		24: 'l';
		25: 'i';
		26: 'd';
		27: '.';
		28: '\000';
		2: 'e';
		3: 'c';
		4: 'i';
		5: 'f';
		6: 'i';
		7: 'e';
		8: 'd';
		9: ' ';
		 ... 29 ... |]
	| System.String.m_StringLength ~> 28]
2 ==> STRUCT System.InvalidCastException[
	| System.Exception._HResult ~> -2147467262
	| System.Exception._className ~> null
	| System.Exception._data ~> null
	| System.Exception._dynamicMethods ~> null
	| System.Exception._exceptionMethod ~> null
	| System.Exception._exceptionMethodString ~> null
	| System.Exception._helpURL ~> null
	| System.Exception._innerException ~> null
	| System.Exception._ipForWatsonBuckets ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]
	| System.Exception._message ~> (HeapRef 1)
	| System.Exception._remoteStackIndex ~> 0
	| System.Exception._remoteStackTraceString ~> null
	| System.Exception._safeSerializationManager ~> (HeapRef 4)
	| System.Exception._source ~> null
	| System.Exception._stackTrace ~> null
	| System.Exception._stackTraceString ~> null
	| System.Exception._watsonBuckets ~> null
	| System.Exception._xcode ~> -532462766
	| System.Exception._xptrs ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> 0]]
3 ==> STRUCT System.Object[]
4 ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.m_realObject ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_realType ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_savedSerializationInfo ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_serializedStates ~> null]
5 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'C';
		10: 'r';
		11: 'i';
		12: 'a';
		13: 'l';
		14: 'i';
		15: 'z';
		16: 'a';
		17: 't';
		18: 'i';
		19: 'o';
		1: 'L';
		20: 'n';
		21: 'M';
		22: 'a';
		23: 'n';
		24: 'a';
		25: 'g';
		26: 'e';
		27: 'r';
		28: '_';
		29: 'R';
		2: 'R';
		30: 'e';
		31: 'a';
		32: 'l';
		33: 'T';
		34: 'y';
		35: 'p';
		36: 'e';
		37: '\000';
		3: '_';
		4: 'S';
		5: 'a';
		6: 'f';
		7: 'e';
		8: 'S';
		9: 'e';
		 ... 38 ... |]
	| System.String.m_StringLength ~> 37]
piece ==> STRUCT TypeVariable1{VSharp.CSharpUtils.Tests.Typecast.Piece}[]
---------- s1 = ----------
System.Exception ==> STRUCT System.Exception[
	| System.Exception._COMPlusExceptionCode ~> -532462766
	| System.Exception.s_EDILock ~> (HeapRef 3)]
System.IntPtr ==> STRUCT System.IntPtr[
	| System.IntPtr.Zero ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]]
System.InvalidCastException ==> STRUCT System.InvalidCastException[]
System.Object ==> STRUCT System.Object[]
System.Runtime.Serialization.SafeSerializationManager ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.RealTypeSerializationName ~> (HeapRef 5)]
System.SystemException ==> STRUCT System.SystemException[]
System.UIntPtr ==> STRUCT System.UIntPtr[
	| System.UIntPtr.Zero ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]]
System.ValueType ==> STRUCT System.ValueType[]
VSharp.CSharpUtils.Tests.Typecast.Typecast ==> STRUCT VSharp.CSharpUtils.Tests.Typecast.Typecast[]
METHOD: VSharp.CSharpUtils.Tests.Typecast.Coord VSharp.CSharpUtils.Tests.Typecast.Piece.GetCoord()
RESULT: STRUCT VSharp.CSharpUtils.Tests.Typecast.Coord[
	| VSharp.CSharpUtils.Tests.Typecast.Coord.X ~> this.VSharp.CSharpUtils.Tests.Typecast.Piece._xCoord
	| VSharp.CSharpUtils.Tests.Typecast.Coord.Y ~> this.VSharp.CSharpUtils.Tests.Typecast.Piece._yCoord]
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
this ==> STRUCT VSharp.CSharpUtils.Tests.Typecast.Piece[]
---------- s1 = ----------
VSharp.CSharpUtils.Tests.Typecast.Piece ==> STRUCT VSharp.CSharpUtils.Tests.Typecast.Piece[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Typecast.Piece.GetRate()
RESULT: this.VSharp.CSharpUtils.Tests.Typecast.Piece.Rate
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
this ==> STRUCT VSharp.CSharpUtils.Tests.Typecast.Piece[]
---------- s1 = ----------
VSharp.CSharpUtils.Tests.Typecast.Piece ==> STRUCT VSharp.CSharpUtils.Tests.Typecast.Piece[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Typecast.Piece.RetRate(System.Object)
RESULT: UNION[
	| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> obj.VSharp.CSharpUtils.Tests.Typecast.Piece.Rate
	| !(TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) | 0 == obj ~> <ERROR: (HeapRef 2)>]
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'S';
		10: 'c';
		11: 'a';
		12: 's';
		13: 't';
		14: ' ';
		15: 'i';
		16: 's';
		17: ' ';
		18: 'n';
		19: 'o';
		1: 'p';
		20: 't';
		21: ' ';
		22: 'v';
		23: 'a';
		24: 'l';
		25: 'i';
		26: 'd';
		27: '.';
		28: '\000';
		2: 'e';
		3: 'c';
		4: 'i';
		5: 'f';
		6: 'i';
		7: 'e';
		8: 'd';
		9: ' ';
		 ... 29 ... |]
	| System.String.m_StringLength ~> 28]
10 ==> STRUCT System.NullReferenceException[
	| System.Exception._HResult ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> -2147467261]
	| System.Exception._className ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> null]
	| System.Exception._data ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> null]
	| System.Exception._dynamicMethods ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> null]
	| System.Exception._exceptionMethod ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> null]
	| System.Exception._exceptionMethodString ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> null]
	| System.Exception._helpURL ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> null]
	| System.Exception._innerException ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> null]
	| System.Exception._ipForWatsonBuckets ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> null]]
	| System.Exception._message ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> (HeapRef 12)]
	| System.Exception._remoteStackIndex ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 0]
	| System.Exception._remoteStackTraceString ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> null]
	| System.Exception._safeSerializationManager ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> (HeapRef 13)]
	| System.Exception._source ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> null]
	| System.Exception._stackTrace ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> null]
	| System.Exception._stackTraceString ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> null]
	| System.Exception._watsonBuckets ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> null]
	| System.Exception._xcode ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> -532462766]
	| System.Exception._xptrs ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 0]]]
11 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'A'];
		10: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'f'];
		11: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'e'];
		12: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'r'];
		13: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'e'];
		14: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'n'];
		15: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'c'];
		16: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'e'];
		17: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'E'];
		18: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'x'];
		19: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'c'];
		1: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'r'];
		20: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'e'];
		21: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'p'];
		22: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 't'];
		23: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'i'];
		24: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'o'];
		25: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'n'];
		26: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> '\000'];
		2: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'g'];
		3: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> '_'];
		4: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'N'];
		5: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'u'];
		6: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'l'];
		7: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'l'];
		8: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'R'];
		9: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'e'];
		 ... UNION[
	| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 27] ... |]
	| System.String.m_StringLength ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 26]]
12 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'G'];
		10: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 's'];
		11: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'o'];
		12: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'u'];
		13: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'r'];
		14: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'c'];
		15: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'e'];
		16: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> ' '];
		17: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 's'];
		18: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 't'];
		19: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'r'];
		1: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'e'];
		20: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'i'];
		21: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'n'];
		22: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'g'];
		23: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 's'];
		24: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> ' '];
		25: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'c'];
		26: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'u'];
		27: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'r'];
		28: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'r'];
		29: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'e'];
		2: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 't'];
		30: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'n'];
		31: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 't'];
		32: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'l'];
		33: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'y'];
		34: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> ' '];
		35: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'n'];
		36: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'o'];
		37: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 't'];
		38: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> ' '];
		39: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 's'];
		3: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 't'];
		40: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'u'];
		41: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'p'];
		42: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'p'];
		43: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'o'];
		44: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'r'];
		45: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 't'];
		46: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'e'];
		47: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'd'];
		48: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> '!'];
		49: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> '\000'];
		4: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'i'];
		5: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'n'];
		6: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'g'];
		7: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> ' '];
		8: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'r'];
		9: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'e'];
		 ... UNION[
	| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 50] ... |]
	| System.String.m_StringLength ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 49]]
13 ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.m_realObject ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> null]
	| System.Runtime.Serialization.SafeSerializationManager.m_realType ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> null]
	| System.Runtime.Serialization.SafeSerializationManager.m_savedSerializationInfo ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> null]
	| System.Runtime.Serialization.SafeSerializationManager.m_serializedStates ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> null]]
2 ==> STRUCT System.InvalidCastException[
	| System.Exception._HResult ~> -2147467262
	| System.Exception._className ~> null
	| System.Exception._data ~> null
	| System.Exception._dynamicMethods ~> null
	| System.Exception._exceptionMethod ~> null
	| System.Exception._exceptionMethodString ~> null
	| System.Exception._helpURL ~> null
	| System.Exception._innerException ~> null
	| System.Exception._ipForWatsonBuckets ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]
	| System.Exception._message ~> (HeapRef 1)
	| System.Exception._remoteStackIndex ~> 0
	| System.Exception._remoteStackTraceString ~> null
	| System.Exception._safeSerializationManager ~> (HeapRef 4)
	| System.Exception._source ~> null
	| System.Exception._stackTrace ~> null
	| System.Exception._stackTraceString ~> null
	| System.Exception._watsonBuckets ~> null
	| System.Exception._xcode ~> -532462766
	| System.Exception._xptrs ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> 0]]
3 ==> STRUCT System.Object[]
4 ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.m_realObject ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_realType ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_savedSerializationInfo ~> null
	| System.Runtime.Serialization.SafeSerializationManager.m_serializedStates ~> null]
5 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'C';
		10: 'r';
		11: 'i';
		12: 'a';
		13: 'l';
		14: 'i';
		15: 'z';
		16: 'a';
		17: 't';
		18: 'i';
		19: 'o';
		1: 'L';
		20: 'n';
		21: 'M';
		22: 'a';
		23: 'n';
		24: 'a';
		25: 'g';
		26: 'e';
		27: 'r';
		28: '_';
		29: 'R';
		2: 'R';
		30: 'e';
		31: 'a';
		32: 'l';
		33: 'T';
		34: 'y';
		35: 'p';
		36: 'e';
		37: '\000';
		3: '_';
		4: 'S';
		5: 'a';
		6: 'f';
		7: 'e';
		8: 'S';
		9: 'e';
		 ... 38 ... |]
	| System.String.m_StringLength ~> 37]
6 ==> STRUCT System.NullReferenceException[
	| System.Exception._HResult ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> -2147467261]
	| System.Exception._className ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> null]
	| System.Exception._data ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> null]
	| System.Exception._dynamicMethods ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> null]
	| System.Exception._exceptionMethod ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> null]
	| System.Exception._exceptionMethodString ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> null]
	| System.Exception._helpURL ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> null]
	| System.Exception._innerException ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> null]
	| System.Exception._ipForWatsonBuckets ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> null]]
	| System.Exception._message ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> (HeapRef 8)]
	| System.Exception._remoteStackIndex ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 0]
	| System.Exception._remoteStackTraceString ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> null]
	| System.Exception._safeSerializationManager ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> (HeapRef 9)]
	| System.Exception._source ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> null]
	| System.Exception._stackTrace ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> null]
	| System.Exception._stackTraceString ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> null]
	| System.Exception._watsonBuckets ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> null]
	| System.Exception._xcode ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> -532462766]
	| System.Exception._xptrs ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 0]]]
7 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'A'];
		10: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'f'];
		11: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'e'];
		12: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'r'];
		13: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'e'];
		14: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'n'];
		15: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'c'];
		16: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'e'];
		17: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'E'];
		18: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'x'];
		19: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'c'];
		1: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'r'];
		20: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'e'];
		21: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'p'];
		22: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 't'];
		23: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'i'];
		24: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'o'];
		25: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'n'];
		26: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> '\000'];
		2: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'g'];
		3: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> '_'];
		4: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'N'];
		5: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'u'];
		6: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'l'];
		7: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'l'];
		8: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'R'];
		9: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'e'];
		 ... UNION[
	| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 27] ... |]
	| System.String.m_StringLength ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 26]]
8 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'G'];
		10: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 's'];
		11: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'o'];
		12: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'u'];
		13: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'r'];
		14: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'c'];
		15: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'e'];
		16: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> ' '];
		17: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 's'];
		18: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 't'];
		19: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'r'];
		1: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'e'];
		20: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'i'];
		21: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'n'];
		22: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'g'];
		23: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 's'];
		24: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> ' '];
		25: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'c'];
		26: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'u'];
		27: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'r'];
		28: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'r'];
		29: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'e'];
		2: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 't'];
		30: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'n'];
		31: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 't'];
		32: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'l'];
		33: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'y'];
		34: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> ' '];
		35: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'n'];
		36: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'o'];
		37: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 't'];
		38: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> ' '];
		39: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 's'];
		3: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 't'];
		40: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'u'];
		41: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'p'];
		42: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'p'];
		43: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'o'];
		44: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'r'];
		45: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 't'];
		46: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'e'];
		47: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'd'];
		48: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> '!'];
		49: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> '\000'];
		4: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'i'];
		5: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'n'];
		6: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'g'];
		7: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> ' '];
		8: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'r'];
		9: UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 'e'];
		 ... UNION[
	| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 50] ... |]
	| System.String.m_StringLength ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 49]]
9 ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.m_realObject ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> null]
	| System.Runtime.Serialization.SafeSerializationManager.m_realType ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> null]
	| System.Runtime.Serialization.SafeSerializationManager.m_savedSerializationInfo ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> null]
	| System.Runtime.Serialization.SafeSerializationManager.m_serializedStates ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> null]]
obj ==> STRUCT TypeVariable1{System.Object}[]
---------- s1 = ----------
System.Environment ==> STRUCT System.Environment[
	| System.Environment.MaxEnvVariableValueLength ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 32767]
	| System.Environment.MaxMachineNameLength ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 256]
	| System.Environment.MaxSystemEnvVariableLength ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 1024]
	| System.Environment.MaxUserEnvVariableLength ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> 255]
	| System.Environment.isUserNonInteractive ~> False
	| System.Environment.m_os ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> null]
	| System.Environment.m_resHelper ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> null]
	| System.Environment.processWinStation ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> UNION[
			| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> null]]
	| System.Environment.s_CheckedOSWin8OrAbove ~> False
	| System.Environment.s_CheckedWinRT ~> False
	| System.Environment.s_InternalSyncObject ~> UNION[
		| !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Piece) ~> null]
	| System.Environment.s_IsWindows8OrAbove ~> False
	| System.Environment.s_WinRTSupported ~> False]
System.Exception ==> STRUCT System.Exception[
	| System.Exception._COMPlusExceptionCode ~> -532462766
	| System.Exception.s_EDILock ~> (HeapRef 3)]
System.IntPtr ==> STRUCT System.IntPtr[
	| System.IntPtr.Zero ~> STRUCT System.IntPtr[
		| System.IntPtr.m_value ~> null]]
System.InvalidCastException ==> STRUCT System.InvalidCastException[]
System.NullReferenceException ==> STRUCT System.NullReferenceException[]
System.Object ==> STRUCT System.Object[]
System.Runtime.Serialization.SafeSerializationManager ==> STRUCT System.Runtime.Serialization.SafeSerializationManager[
	| System.Runtime.Serialization.SafeSerializationManager.RealTypeSerializationName ~> (HeapRef 5)]
System.SystemException ==> STRUCT System.SystemException[]
System.UIntPtr ==> STRUCT System.UIntPtr[
	| System.UIntPtr.Zero ~> STRUCT System.UIntPtr[
		| System.UIntPtr.m_value ~> null]]
System.ValueType ==> STRUCT System.ValueType[]
VSharp.CSharpUtils.Tests.Typecast.Piece ==> STRUCT VSharp.CSharpUtils.Tests.Typecast.Piece[]
METHOD: VSharp.CSharpUtils.Tests.Typecast.IMovable VSharp.CSharpUtils.Tests.Typecast.Piece.MakeMove(VSharp.CSharpUtils.Tests.Typecast.Coord)
RESULT: (HeapRef this)
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
this ==> STRUCT VSharp.CSharpUtils.Tests.Typecast.Piece[
	| VSharp.CSharpUtils.Tests.Typecast.Piece._xCoord ~> VSharp.CSharpUtils.Tests.Typecast.Coord.X
	| VSharp.CSharpUtils.Tests.Typecast.Piece._yCoord ~> VSharp.CSharpUtils.Tests.Typecast.Coord.Y]
---------- s1 = ----------
VSharp.CSharpUtils.Tests.Typecast.Coord ==> STRUCT VSharp.CSharpUtils.Tests.Typecast.Coord[]
VSharp.CSharpUtils.Tests.Typecast.Piece ==> STRUCT VSharp.CSharpUtils.Tests.Typecast.Piece[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Typecast.Pawn.GetNewField()
RESULT: this.VSharp.CSharpUtils.Tests.Typecast.Pawn._newField
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
this ==> STRUCT VSharp.CSharpUtils.Tests.Typecast.Pawn[]
---------- s1 = ----------
VSharp.CSharpUtils.Tests.Typecast.Pawn ==> STRUCT VSharp.CSharpUtils.Tests.Typecast.Pawn[]
METHOD: System.Void VSharp.CSharpUtils.Tests.Typecast.Pawn.SetNewField(System.Int32)
RESULT: <VOID>
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
this ==> STRUCT VSharp.CSharpUtils.Tests.Typecast.Pawn[
	| VSharp.CSharpUtils.Tests.Typecast.Pawn._newField ~> field]
---------- s1 = ----------
VSharp.CSharpUtils.Tests.Typecast.Pawn ==> STRUCT VSharp.CSharpUtils.Tests.Typecast.Pawn[]
METHOD: VSharp.CSharpUtils.Tests.Typecast.IMovable VSharp.CSharpUtils.Tests.Typecast.Pawn.MakeMove(VSharp.CSharpUtils.Tests.Typecast.Coord)
RESULT: (HeapRef this)
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
this ==> STRUCT VSharp.CSharpUtils.Tests.Typecast.Pawn[
	| VSharp.CSharpUtils.Tests.Typecast.Piece._xCoord ~> VSharp.CSharpUtils.Tests.Typecast.Coord.X + VSharp.CSharpUtils.Tests.Typecast.Coord.Y
	| VSharp.CSharpUtils.Tests.Typecast.Piece._yCoord ~> -VSharp.CSharpUtils.Tests.Typecast.Coord.Y + VSharp.CSharpUtils.Tests.Typecast.Coord.X]
---------- s1 = ----------
VSharp.CSharpUtils.Tests.Typecast.Coord ==> STRUCT VSharp.CSharpUtils.Tests.Typecast.Coord[]
VSharp.CSharpUtils.Tests.Typecast.Pawn ==> STRUCT VSharp.CSharpUtils.Tests.Typecast.Pawn[]
METHOD: VSharp.CSharpUtils.Tests.Typecast.IMovable VSharp.CSharpUtils.Tests.Typecast.BlackPawn.MakeMove(VSharp.CSharpUtils.Tests.Typecast.Coord)
RESULT: (HeapRef this)
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
this ==> STRUCT VSharp.CSharpUtils.Tests.Typecast.BlackPawn[
	| VSharp.CSharpUtils.Tests.Typecast.Piece._xCoord ~> VSharp.CSharpUtils.Tests.Typecast.Coord.X + VSharp.CSharpUtils.Tests.Typecast.Coord.Y
	| VSharp.CSharpUtils.Tests.Typecast.Piece._yCoord ~> -VSharp.CSharpUtils.Tests.Typecast.Coord.Y + VSharp.CSharpUtils.Tests.Typecast.Coord.X]
---------- s1 = ----------
VSharp.CSharpUtils.Tests.Typecast.BlackPawn ==> STRUCT VSharp.CSharpUtils.Tests.Typecast.BlackPawn[]
VSharp.CSharpUtils.Tests.Typecast.Coord ==> STRUCT VSharp.CSharpUtils.Tests.Typecast.Coord[]
METHOD: VSharp.CSharpUtils.Tests.Typecast.IMovable VSharp.CSharpUtils.Tests.Typecast.Knight.MakeMove(VSharp.CSharpUtils.Tests.Typecast.Coord)
RESULT: (HeapRef this)
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
this ==> STRUCT VSharp.CSharpUtils.Tests.Typecast.Knight[
	| VSharp.CSharpUtils.Tests.Typecast.Piece._xCoord ~> VSharp.CSharpUtils.Tests.Typecast.Coord.X + VSharp.CSharpUtils.Tests.Typecast.Coord.Y
	| VSharp.CSharpUtils.Tests.Typecast.Piece._yCoord ~> -VSharp.CSharpUtils.Tests.Typecast.Coord.Y + VSharp.CSharpUtils.Tests.Typecast.Coord.X]
---------- s1 = ----------
VSharp.CSharpUtils.Tests.Typecast.Coord ==> STRUCT VSharp.CSharpUtils.Tests.Typecast.Coord[]
VSharp.CSharpUtils.Tests.Typecast.Knight ==> STRUCT VSharp.CSharpUtils.Tests.Typecast.Knight[]
METHOD: System.Collections.Generic.LinkedList`1[System.Int32] VSharp.CSharpUtils.Tests.Generic.GenericInitialize`6[T,U,P,K,N,Z].RetDictionary()
RESULT: (HeapRef 1)
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> STRUCT System.Collections.Generic.LinkedList`1[System.Int32][
	| System.Collections.Generic.LinkedList`1._syncRoot ~> null
	| System.Collections.Generic.LinkedList`1.count ~> 0
	| System.Collections.Generic.LinkedList`1.head ~> null
	| System.Collections.Generic.LinkedList`1.siInfo ~> null
	| System.Collections.Generic.LinkedList`1.version ~> 0]
2 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'V';
		1: 'e';
		2: 'r';
		3: 's';
		4: 'i';
		5: 'o';
		6: 'n';
		7: '\000';
		 ... 8 ... |]
	| System.String.m_StringLength ~> 7]
3 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'C';
		1: 'o';
		2: 'u';
		3: 'n';
		4: 't';
		5: '\000';
		 ... 6 ... |]
	| System.String.m_StringLength ~> 5]
4 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'D';
		1: 'a';
		2: 't';
		3: 'a';
		4: '\000';
		 ... 5 ... |]
	| System.String.m_StringLength ~> 4]
---------- s1 = ----------
System.Collections.Generic.LinkedList`1 ==> STRUCT System.Collections.Generic.LinkedList`1[System.Int32][
	| System.Collections.Generic.LinkedList`1.CountName ~> (HeapRef 3)
	| System.Collections.Generic.LinkedList`1.ValuesName ~> (HeapRef 4)
	| System.Collections.Generic.LinkedList`1.VersionName ~> (HeapRef 2)]
System.Object ==> STRUCT System.Object[]
VSharp.CSharpUtils.Tests.Generic.GenericInitialize`6 ==> STRUCT VSharp.CSharpUtils.Tests.Generic.GenericInitialize`6[T,U,P,K,N,Z][]
METHOD: System.Collections.Generic.List`1[System.Double] VSharp.CSharpUtils.Tests.Generic.GenericInitialize`6[T,U,P,K,N,Z].RetList()
RESULT: (HeapRef 1)
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> STRUCT System.Collections.Generic.List`1[System.Double][
	| System.Collections.Generic.List`1._items ~> (HeapRef 2)
	| System.Collections.Generic.List`1._size ~> 0
	| System.Collections.Generic.List`1._syncRoot ~> null
	| System.Collections.Generic.List`1._version ~> 0]
2 ==> [| ... 0 ... |]
---------- s1 = ----------
System.Collections.Generic.List`1 ==> STRUCT System.Collections.Generic.List`1[System.Double][
	| System.Collections.Generic.List`1._defaultCapacity ~> 4
	| System.Collections.Generic.List`1._emptyArray ~> (HeapRef 2)]
System.Object ==> STRUCT System.Object[]
VSharp.CSharpUtils.Tests.Generic.GenericInitialize`6 ==> STRUCT VSharp.CSharpUtils.Tests.Generic.GenericInitialize`6[T,U,P,K,N,Z][]
METHOD: T VSharp.CSharpUtils.Tests.Generic.GenericInitialize`6[T,U,P,K,N,Z].RetT(T)
RESULT: (HeapRef t)
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Generic.GenericInitialize`6 ==> STRUCT VSharp.CSharpUtils.Tests.Generic.GenericInitialize`6[T,U,P,K,N,Z][]
METHOD: T VSharp.CSharpUtils.Tests.Generic.GenericTest`6[T,U,P,K,N,Z].RetT(T)
RESULT: (HeapRef t)
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Generic.GenericTest`6 ==> STRUCT VSharp.CSharpUtils.Tests.Generic.GenericTest`6[T,U,P,K,N,Z][]
METHOD: U VSharp.CSharpUtils.Tests.Generic.GenericTest`6[T,U,P,K,N,Z].RetU(U)
RESULT: (HeapRef u)
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Generic.GenericTest`6 ==> STRUCT VSharp.CSharpUtils.Tests.Generic.GenericTest`6[T,U,P,K,N,Z][]
METHOD: P VSharp.CSharpUtils.Tests.Generic.GenericTest`6[T,U,P,K,N,Z].RetP(P)
RESULT: STRUCT TypeVariable1{P}[]
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Generic.GenericTest`6 ==> STRUCT VSharp.CSharpUtils.Tests.Generic.GenericTest`6[T,U,P,K,N,Z][]
METHOD: K VSharp.CSharpUtils.Tests.Generic.GenericTest`6[T,U,P,K,N,Z].RetK(K)
RESULT: (HeapRef k)
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Generic.GenericTest`6 ==> STRUCT VSharp.CSharpUtils.Tests.Generic.GenericTest`6[T,U,P,K,N,Z][]
METHOD: N VSharp.CSharpUtils.Tests.Generic.GenericTest`6[T,U,P,K,N,Z].RetT(N)
RESULT: (HeapRef n)
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Generic.GenericTest`6 ==> STRUCT VSharp.CSharpUtils.Tests.Generic.GenericTest`6[T,U,P,K,N,Z][]
METHOD: Z VSharp.CSharpUtils.Tests.Generic.GenericTest`6[T,U,P,K,N,Z].RetU(Z)
RESULT: (HeapRef z)
HEAP:
{ heap = <empty>, statics = s0 } where
---------- s0 = ----------
VSharp.CSharpUtils.Tests.Generic.GenericTest`6 ==> STRUCT VSharp.CSharpUtils.Tests.Generic.GenericTest`6[T,U,P,K,N,Z][]
METHOD: T VSharp.CSharpUtils.Tests.Generic.Foo`2[T,U].GetFields()
RESULT: (HeapRef this.VSharp.CSharpUtils.Tests.Generic.Foo`2._filed)
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
this ==> STRUCT VSharp.CSharpUtils.Tests.Generic.Foo`2[T,U][]
---------- s1 = ----------
VSharp.CSharpUtils.Tests.Generic.Foo`2 ==> STRUCT VSharp.CSharpUtils.Tests.Generic.Foo`2[T,U][]
METHOD: System.Void VSharp.CSharpUtils.Tests.Generic.Foo`2[T,U].SetField(T)
RESULT: <VOID>
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
this ==> STRUCT VSharp.CSharpUtils.Tests.Generic.Foo`2[T,U][
	| VSharp.CSharpUtils.Tests.Generic.Foo`2._filed ~> (HeapRef f)]
---------- s1 = ----------
VSharp.CSharpUtils.Tests.Generic.Foo`2 ==> STRUCT VSharp.CSharpUtils.Tests.Generic.Foo`2[T,U][]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Generic.GenericMethod.TestFoo(VSharp.CSharpUtils.Tests.Generic.Foo`2[System.Int32,VSharp.CSharpUtils.Tests.Typecast.Piece])
RESULT: UNION[
	| !(0 == f) ~> f.VSharp.CSharpUtils.Tests.Generic.Foo`2._filed
	| 0 == f ~> 0]
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
f ==> STRUCT TypeVariable1{VSharp.CSharpUtils.Tests.Generic.Foo`2[System.Int32,VSharp.CSharpUtils.Tests.Typecast.Piece]}[]
---------- s1 = ----------
VSharp.CSharpUtils.Tests.Generic.Foo`2 ==> STRUCT VSharp.CSharpUtils.Tests.Generic.Foo`2[System.Int32,VSharp.CSharpUtils.Tests.Typecast.Piece][]
VSharp.CSharpUtils.Tests.Generic.GenericMethod ==> STRUCT VSharp.CSharpUtils.Tests.Generic.GenericMethod[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Generic.GenericMethod.TestFoo(System.Collections.Generic.LinkedList`1[System.Int32])
RESULT: UNION[
	| !(0 == l) & !(0 == l.System.Collections.Generic.LinkedList`1.head) ~> 1 + l.System.Collections.Generic.LinkedList`1.head.System.Collections.Generic.LinkedListNode`1.item
	| !(0 == l) & 0 == l.System.Collections.Generic.LinkedList`1.head ~> 1
	| 0 == l ~> 0]
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
1 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'V';
		1: 'e';
		2: 'r';
		3: 's';
		4: 'i';
		5: 'o';
		6: 'n';
		7: '\000';
		 ... 8 ... |]
	| System.String.m_StringLength ~> 7]
2 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'C';
		1: 'o';
		2: 'u';
		3: 'n';
		4: 't';
		5: '\000';
		 ... 6 ... |]
	| System.String.m_StringLength ~> 5]
3 ==> STRUCT System.String[
	| System.String.m_FirstChar ~> [|
		0: 'D';
		1: 'a';
		2: 't';
		3: 'a';
		4: '\000';
		 ... 5 ... |]
	| System.String.m_StringLength ~> 4]
l ==> STRUCT TypeVariable1{System.Collections.Generic.LinkedList`1[System.Int32]}[]
l.System.Collections.Generic.LinkedList`1.head ==> STRUCT System.Collections.Generic.LinkedListNode`1[System.Int32][
	| System.Collections.Generic.LinkedListNode`1.item ~> 1 + l.System.Collections.Generic.LinkedList`1.head.System.Collections.Generic.LinkedListNode`1.item]
---------- s1 = ----------
System.Collections.Generic.LinkedListNode`1 ==> STRUCT System.Collections.Generic.LinkedListNode`1[System.Int32][]
System.Collections.Generic.LinkedList`1 ==> STRUCT System.Collections.Generic.LinkedList`1[System.Int32][
	| System.Collections.Generic.LinkedList`1.CountName ~> (HeapRef 2)
	| System.Collections.Generic.LinkedList`1.ValuesName ~> (HeapRef 3)
	| System.Collections.Generic.LinkedList`1.VersionName ~> (HeapRef 1)]
VSharp.CSharpUtils.Tests.Generic.GenericMethod ==> STRUCT VSharp.CSharpUtils.Tests.Generic.GenericMethod[]
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Generic.TetsUnion.RetWorked(System.Object, System.Int32)
RESULT: UNION[
	| !(0 == obj) & !(TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.BlackPawn) & (!(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.BlackPawn) | !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Pawn) | (!(TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.BlackPawn) | 0 == obj) & (!(TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Pawn) | 0 == obj)) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Pawn) ~> 6 + a
	| !(0 == obj) & !(TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Pawn) & (!(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.BlackPawn) | !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Pawn) | (!(TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.BlackPawn) | 0 == obj) & (!(TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Pawn) | 0 == obj)) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.BlackPawn) ~> 5
	| !(0 == obj) & (!(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.BlackPawn) | !(0 == obj) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Pawn) | (!(TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.BlackPawn) | 0 == obj) & (!(TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Pawn) | 0 == obj)) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.BlackPawn) & (TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Pawn) ~> 11
	| (!(TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.BlackPawn) | 0 == obj) & (!(TypeVariable1{System.Object} <: VSharp.CSharpUtils.Tests.Typecast.Pawn) | 0 == obj) ~> a]
HEAP:
{ heap = h0, statics = s1 } where
---------- h0 = ----------
obj ==> STRUCT TypeVariable1{System.Object}[]
---------- s1 = ----------
VSharp.CSharpUtils.Tests.Generic.TetsUnion ==> STRUCT VSharp.CSharpUtils.Tests.Generic.TetsUnion[]
