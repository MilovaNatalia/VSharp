include struct
   open OCanren
   type ('name, 'terms) term = Term of 'name * 'terms

   let fmt_term fname fterms fmt (Term (s, xs)) =
     Format.fprintf fmt "('%a %a)" fname s fterms xs

   type ground = (string,               ground OCanren.Std.List.ground) term
   type logic  = (string OCanren.logic, logic  OCanren.Std.List.logic)  term OCanren.logic
   type tinj = (ground, logic) injected

   module F = OCanren.Fmap2(struct
      type  ('a, 'b) t = ('a,'b) term
      let fmap fa fb (Term (a,b)) = Term (fa a, fb b)
   end)

   let w name xs = inj @@ F.distrib @@ Term (name, xs)
   (* in [w name xs] xs is obliged to be a list of terms. Is it what is expected? *)

   let leaf name = w name (Std.List.nil ())

   let rec term_reify env t : logic =
      F.reify OCanren.reify (OCanren.Std.List.reify term_reify) env t
   let rec pp_term_logic fmt t =
      GT.fmt OCanren.logic
         (fmt_term (GT.fmt OCanren.logic (GT.fmt GT.string))
                  (GT.fmt Std.List.logic pp_term_logic))
         fmt t

end


(* ****** Relational stuff ******************** *)
let (!!) x = OCanren.(inj @@ lift x)

include struct
  open OCanren
  open OCanren.Std
let ia33554436 a = w !!"ia33554436" (Std.List.list[a])
let i33554465 = w !!"i33554465" (Std.List.list[])
let a33554459 = w !!"a33554459" (Std.List.list[])
let b33554460 = w !!"b33554460" (Std.List.list[])
let ik33554445 = w !!"ik33554445" (Std.List.list[])
let if33554441 = w !!"if33554441" (Std.List.list[])
let ie33554440 = w !!"ie33554440" (Std.List.list[])
let c33554461 = w !!"c33554461" (Std.List.list[])
let d33554462 = w !!"d33554462" (Std.List.list[])
let iq33554451 = w !!"iq33554451" (Std.List.list[])
let im33554447 = w !!"im33554447" (Std.List.list[])
let il33554446 = w !!"il33554446" (Std.List.list[])
let l33554467 = w !!"l33554467" (Std.List.list[])
let e33554463 = w !!"e33554463" (Std.List.list[])
let ih33554443 = w !!"ih33554443" (Std.List.list[])
let ig33554442 = w !!"ig33554442" (Std.List.list[])
let h33554464 = w !!"h33554464" (Std.List.list[])
let k33554466 = w !!"k33554466" (Std.List.list[])
let object33554493 = w !!"object33554493" (Std.List.list[])
let rec contravariant_subtype a b = 
  conde 
    [ (b === a) &&& (is_valuetype b)
    ; (is_reference b) &&& (subtype b a)
    ]
and covariant_subtype a b = 
  conde 
    [ (a === b) &&& (is_valuetype a)
    ; (is_reference a) &&& (subtype a b)
    ]
and default_constructor a = 
  conde 
    [ (a === i33554465)
    ; (a === a33554459)
    ; (a === b33554460)
    ; (a === c33554461)
    ; (a === d33554462)
    ; (a === l33554467)
    ; (a === e33554463)
    ; (a === h33554464)
    ; (a === k33554466)
    ; (a === object33554493)
    ]
and is_reference a = 
  conde 
    [ fresh (b) 
       (a === ia33554436 b)
    ; (a === i33554465)
    ; (a === a33554459)
    ; (a === b33554460)
    ; (a === ik33554445)
    ; (a === if33554441)
    ; (a === ie33554440)
    ; (a === c33554461)
    ; (a === d33554462)
    ; (a === iq33554451)
    ; (a === im33554447)
    ; (a === il33554446)
    ; (a === l33554467)
    ; (a === e33554463)
    ; (a === ih33554443)
    ; (a === ig33554442)
    ; (a === h33554464)
    ; (a === k33554466)
    ; (a === object33554493)
    ]
and is_unmanaged a = failure
and is_valuetype a = failure
and not_contravariant_subtype a b = 
  conde 
    [ (b =/= a) &&& (is_valuetype b)
    ; (is_reference b) &&& (not_subtype b a)
    ]
and not_covariant_subtype a b = 
  conde 
    [ (a =/= b) &&& (is_valuetype a)
    ; (is_reference a) &&& (not_subtype a b)
    ]
and not_subtype a b = 
  conde 
    [ fresh (c d) 
       (a === ia33554436 c) 
       (b === ia33554436 d) 
       (not_covariant_subtype c d)
    ; fresh (c) 
       (a === ia33554436 c) 
       (b === i33554465)
    ; fresh (c) 
       (a === ia33554436 c) 
       (b === a33554459)
    ; fresh (c) 
       (a === ia33554436 c) 
       (b === b33554460)
    ; fresh (c) 
       (a === ia33554436 c) 
       (b === ik33554445)
    ; fresh (c) 
       (a === ia33554436 c) 
       (b === if33554441)
    ; fresh (c) 
       (a === ia33554436 c) 
       (b === ie33554440)
    ; fresh (c) 
       (a === ia33554436 c) 
       (b === c33554461)
    ; fresh (c) 
       (a === ia33554436 c) 
       (b === d33554462)
    ; fresh (c) 
       (a === ia33554436 c) 
       (b === iq33554451)
    ; fresh (c) 
       (a === ia33554436 c) 
       (b === im33554447)
    ; fresh (c) 
       (a === ia33554436 c) 
       (b === il33554446)
    ; fresh (c) 
       (a === ia33554436 c) 
       (b === l33554467)
    ; fresh (c) 
       (a === ia33554436 c) 
       (b === e33554463)
    ; fresh (c) 
       (a === ia33554436 c) 
       (b === ih33554443)
    ; fresh (c) 
       (a === ia33554436 c) 
       (b === ig33554442)
    ; fresh (c) 
       (a === ia33554436 c) 
       (b === h33554464)
    ; fresh (c) 
       (a === ia33554436 c) 
       (b === k33554466)
    ; fresh (c) 
       (a === i33554465) 
       (b === ia33554436 c) 
       (not_subtype (ia33554436 l33554467) (ia33554436 c))
    ; (a === i33554465) &&& (b === l33554467)
    ; (a === i33554465) &&& (b === e33554463)
    ; (a === i33554465) &&& (b === ih33554443)
    ; (a === i33554465) &&& (b === ig33554442)
    ; (a === i33554465) &&& (b === h33554464)
    ; (a === i33554465) &&& (b === k33554466)
    ; fresh (c) 
       (a === a33554459) 
       (b === ia33554436 c)
    ; (a === a33554459) &&& (b === i33554465)
    ; (a === a33554459) &&& (b === b33554460)
    ; (a === a33554459) &&& (b === ik33554445)
    ; (a === a33554459) &&& (b === if33554441)
    ; (a === a33554459) &&& (b === ie33554440)
    ; (a === a33554459) &&& (b === c33554461)
    ; (a === a33554459) &&& (b === d33554462)
    ; (a === a33554459) &&& (b === iq33554451)
    ; (a === a33554459) &&& (b === im33554447)
    ; (a === a33554459) &&& (b === il33554446)
    ; (a === a33554459) &&& (b === l33554467)
    ; (a === a33554459) &&& (b === e33554463)
    ; (a === a33554459) &&& (b === ih33554443)
    ; (a === a33554459) &&& (b === ig33554442)
    ; (a === a33554459) &&& (b === h33554464)
    ; (a === a33554459) &&& (b === k33554466)
    ; fresh (c) 
       (a === b33554460) 
       (b === ia33554436 c)
    ; (a === b33554460) &&& (b === i33554465)
    ; (a === b33554460) &&& (b === c33554461)
    ; (a === b33554460) &&& (b === d33554462)
    ; (a === b33554460) &&& (b === iq33554451)
    ; (a === b33554460) &&& (b === im33554447)
    ; (a === b33554460) &&& (b === il33554446)
    ; (a === b33554460) &&& (b === l33554467)
    ; (a === b33554460) &&& (b === e33554463)
    ; (a === b33554460) &&& (b === ih33554443)
    ; (a === b33554460) &&& (b === ig33554442)
    ; (a === b33554460) &&& (b === h33554464)
    ; (a === b33554460) &&& (b === k33554466)
    ; fresh (c) 
       (a === ik33554445) 
       (b === ia33554436 c)
    ; (a === ik33554445) &&& (b === i33554465)
    ; (a === ik33554445) &&& (b === a33554459)
    ; (a === ik33554445) &&& (b === b33554460)
    ; (a === ik33554445) &&& (b === if33554441)
    ; (a === ik33554445) &&& (b === ie33554440)
    ; (a === ik33554445) &&& (b === c33554461)
    ; (a === ik33554445) &&& (b === d33554462)
    ; (a === ik33554445) &&& (b === iq33554451)
    ; (a === ik33554445) &&& (b === im33554447)
    ; (a === ik33554445) &&& (b === il33554446)
    ; (a === ik33554445) &&& (b === l33554467)
    ; (a === ik33554445) &&& (b === e33554463)
    ; (a === ik33554445) &&& (b === ih33554443)
    ; (a === ik33554445) &&& (b === ig33554442)
    ; (a === ik33554445) &&& (b === h33554464)
    ; (a === ik33554445) &&& (b === k33554466)
    ; fresh (c) 
       (a === if33554441) 
       (b === ia33554436 c)
    ; (a === if33554441) &&& (b === i33554465)
    ; (a === if33554441) &&& (b === a33554459)
    ; (a === if33554441) &&& (b === b33554460)
    ; (a === if33554441) &&& (b === ik33554445)
    ; (a === if33554441) &&& (b === ie33554440)
    ; (a === if33554441) &&& (b === c33554461)
    ; (a === if33554441) &&& (b === d33554462)
    ; (a === if33554441) &&& (b === iq33554451)
    ; (a === if33554441) &&& (b === im33554447)
    ; (a === if33554441) &&& (b === il33554446)
    ; (a === if33554441) &&& (b === l33554467)
    ; (a === if33554441) &&& (b === e33554463)
    ; (a === if33554441) &&& (b === ih33554443)
    ; (a === if33554441) &&& (b === ig33554442)
    ; (a === if33554441) &&& (b === h33554464)
    ; (a === if33554441) &&& (b === k33554466)
    ; fresh (c) 
       (a === ie33554440) 
       (b === ia33554436 c)
    ; (a === ie33554440) &&& (b === i33554465)
    ; (a === ie33554440) &&& (b === a33554459)
    ; (a === ie33554440) &&& (b === b33554460)
    ; (a === ie33554440) &&& (b === ik33554445)
    ; (a === ie33554440) &&& (b === if33554441)
    ; (a === ie33554440) &&& (b === c33554461)
    ; (a === ie33554440) &&& (b === d33554462)
    ; (a === ie33554440) &&& (b === iq33554451)
    ; (a === ie33554440) &&& (b === im33554447)
    ; (a === ie33554440) &&& (b === il33554446)
    ; (a === ie33554440) &&& (b === l33554467)
    ; (a === ie33554440) &&& (b === e33554463)
    ; (a === ie33554440) &&& (b === ih33554443)
    ; (a === ie33554440) &&& (b === ig33554442)
    ; (a === ie33554440) &&& (b === h33554464)
    ; (a === ie33554440) &&& (b === k33554466)
    ; fresh (c) 
       (a === c33554461) 
       (b === ia33554436 c)
    ; (a === c33554461) &&& (b === i33554465)
    ; (a === c33554461) &&& (b === d33554462)
    ; (a === c33554461) &&& (b === iq33554451)
    ; (a === c33554461) &&& (b === im33554447)
    ; (a === c33554461) &&& (b === il33554446)
    ; (a === c33554461) &&& (b === l33554467)
    ; (a === c33554461) &&& (b === e33554463)
    ; (a === c33554461) &&& (b === ih33554443)
    ; (a === c33554461) &&& (b === ig33554442)
    ; (a === c33554461) &&& (b === h33554464)
    ; (a === c33554461) &&& (b === k33554466)
    ; fresh (c) 
       (a === d33554462) 
       (b === ia33554436 c)
    ; (a === d33554462) &&& (b === i33554465)
    ; (a === d33554462) &&& (b === l33554467)
    ; (a === d33554462) &&& (b === e33554463)
    ; (a === d33554462) &&& (b === ih33554443)
    ; (a === d33554462) &&& (b === ig33554442)
    ; (a === d33554462) &&& (b === h33554464)
    ; (a === d33554462) &&& (b === k33554466)
    ; fresh (c) 
       (a === iq33554451) 
       (b === ia33554436 c)
    ; (a === iq33554451) &&& (b === i33554465)
    ; (a === iq33554451) &&& (b === a33554459)
    ; (a === iq33554451) &&& (b === b33554460)
    ; (a === iq33554451) &&& (b === ik33554445)
    ; (a === iq33554451) &&& (b === if33554441)
    ; (a === iq33554451) &&& (b === ie33554440)
    ; (a === iq33554451) &&& (b === c33554461)
    ; (a === iq33554451) &&& (b === d33554462)
    ; (a === iq33554451) &&& (b === im33554447)
    ; (a === iq33554451) &&& (b === il33554446)
    ; (a === iq33554451) &&& (b === l33554467)
    ; (a === iq33554451) &&& (b === e33554463)
    ; (a === iq33554451) &&& (b === ih33554443)
    ; (a === iq33554451) &&& (b === ig33554442)
    ; (a === iq33554451) &&& (b === h33554464)
    ; (a === iq33554451) &&& (b === k33554466)
    ; fresh (c) 
       (a === im33554447) 
       (b === ia33554436 c)
    ; (a === im33554447) &&& (b === i33554465)
    ; (a === im33554447) &&& (b === a33554459)
    ; (a === im33554447) &&& (b === b33554460)
    ; (a === im33554447) &&& (b === ik33554445)
    ; (a === im33554447) &&& (b === if33554441)
    ; (a === im33554447) &&& (b === ie33554440)
    ; (a === im33554447) &&& (b === c33554461)
    ; (a === im33554447) &&& (b === d33554462)
    ; (a === im33554447) &&& (b === iq33554451)
    ; (a === im33554447) &&& (b === il33554446)
    ; (a === im33554447) &&& (b === l33554467)
    ; (a === im33554447) &&& (b === e33554463)
    ; (a === im33554447) &&& (b === ih33554443)
    ; (a === im33554447) &&& (b === ig33554442)
    ; (a === im33554447) &&& (b === h33554464)
    ; (a === im33554447) &&& (b === k33554466)
    ; fresh (c) 
       (a === il33554446) 
       (b === ia33554436 c)
    ; (a === il33554446) &&& (b === i33554465)
    ; (a === il33554446) &&& (b === a33554459)
    ; (a === il33554446) &&& (b === b33554460)
    ; (a === il33554446) &&& (b === ik33554445)
    ; (a === il33554446) &&& (b === if33554441)
    ; (a === il33554446) &&& (b === ie33554440)
    ; (a === il33554446) &&& (b === c33554461)
    ; (a === il33554446) &&& (b === d33554462)
    ; (a === il33554446) &&& (b === iq33554451)
    ; (a === il33554446) &&& (b === im33554447)
    ; (a === il33554446) &&& (b === l33554467)
    ; (a === il33554446) &&& (b === e33554463)
    ; (a === il33554446) &&& (b === ih33554443)
    ; (a === il33554446) &&& (b === ig33554442)
    ; (a === il33554446) &&& (b === h33554464)
    ; (a === il33554446) &&& (b === k33554466)
    ; fresh (c) 
       (a === l33554467) 
       (b === ia33554436 c)
    ; (a === l33554467) &&& (b === i33554465)
    ; (a === l33554467) &&& (b === d33554462)
    ; (a === l33554467) &&& (b === im33554447)
    ; (a === l33554467) &&& (b === il33554446)
    ; (a === l33554467) &&& (b === h33554464)
    ; (a === l33554467) &&& (b === k33554466)
    ; fresh (c) 
       (a === e33554463) 
       (b === ia33554436 c)
    ; (a === e33554463) &&& (b === i33554465)
    ; (a === e33554463) &&& (b === d33554462)
    ; (a === e33554463) &&& (b === im33554447)
    ; (a === e33554463) &&& (b === il33554446)
    ; (a === e33554463) &&& (b === l33554467)
    ; (a === e33554463) &&& (b === h33554464)
    ; (a === e33554463) &&& (b === k33554466)
    ; fresh (c) 
       (a === ih33554443) 
       (b === ia33554436 c)
    ; (a === ih33554443) &&& (b === i33554465)
    ; (a === ih33554443) &&& (b === a33554459)
    ; (a === ih33554443) &&& (b === b33554460)
    ; (a === ih33554443) &&& (b === ik33554445)
    ; (a === ih33554443) &&& (b === if33554441)
    ; (a === ih33554443) &&& (b === ie33554440)
    ; (a === ih33554443) &&& (b === c33554461)
    ; (a === ih33554443) &&& (b === d33554462)
    ; (a === ih33554443) &&& (b === iq33554451)
    ; (a === ih33554443) &&& (b === im33554447)
    ; (a === ih33554443) &&& (b === il33554446)
    ; (a === ih33554443) &&& (b === l33554467)
    ; (a === ih33554443) &&& (b === e33554463)
    ; (a === ih33554443) &&& (b === ig33554442)
    ; (a === ih33554443) &&& (b === h33554464)
    ; (a === ih33554443) &&& (b === k33554466)
    ; fresh (c) 
       (a === ig33554442) 
       (b === ia33554436 c)
    ; (a === ig33554442) &&& (b === i33554465)
    ; (a === ig33554442) &&& (b === a33554459)
    ; (a === ig33554442) &&& (b === b33554460)
    ; (a === ig33554442) &&& (b === ik33554445)
    ; (a === ig33554442) &&& (b === if33554441)
    ; (a === ig33554442) &&& (b === ie33554440)
    ; (a === ig33554442) &&& (b === c33554461)
    ; (a === ig33554442) &&& (b === d33554462)
    ; (a === ig33554442) &&& (b === iq33554451)
    ; (a === ig33554442) &&& (b === im33554447)
    ; (a === ig33554442) &&& (b === il33554446)
    ; (a === ig33554442) &&& (b === l33554467)
    ; (a === ig33554442) &&& (b === e33554463)
    ; (a === ig33554442) &&& (b === ih33554443)
    ; (a === ig33554442) &&& (b === h33554464)
    ; (a === ig33554442) &&& (b === k33554466)
    ; fresh (c) 
       (a === h33554464) 
       (b === ia33554436 c) 
       (not_subtype (ia33554436 k33554466) (ia33554436 c))
    ; (a === h33554464) &&& (b === i33554465)
    ; (a === h33554464) &&& (b === l33554467)
    ; (a === h33554464) &&& (b === e33554463)
    ; (a === h33554464) &&& (b === ih33554443)
    ; (a === h33554464) &&& (b === ig33554442)
    ; (a === h33554464) &&& (b === k33554466)
    ; fresh (c) 
       (a === k33554466) 
       (b === ia33554436 c)
    ; (a === k33554466) &&& (b === i33554465)
    ; (a === k33554466) &&& (b === d33554462)
    ; (a === k33554466) &&& (b === im33554447)
    ; (a === k33554466) &&& (b === il33554446)
    ; (a === k33554466) &&& (b === l33554467)
    ; (a === k33554466) &&& (b === h33554464)
    ; fresh (c) 
       (a === object33554493) 
       (b === ia33554436 c)
    ; (a === object33554493) &&& (b === i33554465)
    ; (a === object33554493) &&& (b === a33554459)
    ; (a === object33554493) &&& (b === b33554460)
    ; (a === object33554493) &&& (b === ik33554445)
    ; (a === object33554493) &&& (b === if33554441)
    ; (a === object33554493) &&& (b === ie33554440)
    ; (a === object33554493) &&& (b === c33554461)
    ; (a === object33554493) &&& (b === d33554462)
    ; (a === object33554493) &&& (b === iq33554451)
    ; (a === object33554493) &&& (b === im33554447)
    ; (a === object33554493) &&& (b === il33554446)
    ; (a === object33554493) &&& (b === l33554467)
    ; (a === object33554493) &&& (b === e33554463)
    ; (a === object33554493) &&& (b === ih33554443)
    ; (a === object33554493) &&& (b === ig33554442)
    ; (a === object33554493) &&& (b === h33554464)
    ; (a === object33554493) &&& (b === k33554466)
    ]
and subtype a b = 
  conde 
    [ fresh (c d) 
       (a === ia33554436 c) 
       (b === ia33554436 d) 
       (covariant_subtype c d)
    ; fresh (c) 
       (a === ia33554436 c) 
       (b === object33554493)
    ; fresh (c) 
       (a === i33554465) 
       (b === ia33554436 c) 
       (subtype (ia33554436 l33554467) (ia33554436 c))
    ; (a === i33554465) &&& (b === i33554465)
    ; (a === i33554465) &&& (b === a33554459)
    ; (a === i33554465) &&& (b === b33554460)
    ; (a === i33554465) &&& (b === ik33554445)
    ; (a === i33554465) &&& (b === if33554441)
    ; (a === i33554465) &&& (b === ie33554440)
    ; (a === i33554465) &&& (b === c33554461)
    ; (a === i33554465) &&& (b === d33554462)
    ; (a === i33554465) &&& (b === iq33554451)
    ; (a === i33554465) &&& (b === im33554447)
    ; (a === i33554465) &&& (b === il33554446)
    ; (a === i33554465) &&& (b === object33554493)
    ; (a === a33554459) &&& (b === a33554459)
    ; (a === a33554459) &&& (b === object33554493)
    ; (a === b33554460) &&& (b === a33554459)
    ; (a === b33554460) &&& (b === b33554460)
    ; (a === b33554460) &&& (b === ik33554445)
    ; (a === b33554460) &&& (b === if33554441)
    ; (a === b33554460) &&& (b === ie33554440)
    ; (a === b33554460) &&& (b === object33554493)
    ; (a === ik33554445) &&& (b === ik33554445)
    ; (a === ik33554445) &&& (b === object33554493)
    ; (a === if33554441) &&& (b === if33554441)
    ; (a === if33554441) &&& (b === object33554493)
    ; (a === ie33554440) &&& (b === ie33554440)
    ; (a === ie33554440) &&& (b === object33554493)
    ; (a === c33554461) &&& (b === a33554459)
    ; (a === c33554461) &&& (b === b33554460)
    ; (a === c33554461) &&& (b === ik33554445)
    ; (a === c33554461) &&& (b === if33554441)
    ; (a === c33554461) &&& (b === ie33554440)
    ; (a === c33554461) &&& (b === c33554461)
    ; (a === c33554461) &&& (b === object33554493)
    ; (a === d33554462) &&& (b === a33554459)
    ; (a === d33554462) &&& (b === b33554460)
    ; (a === d33554462) &&& (b === ik33554445)
    ; (a === d33554462) &&& (b === if33554441)
    ; (a === d33554462) &&& (b === ie33554440)
    ; (a === d33554462) &&& (b === c33554461)
    ; (a === d33554462) &&& (b === d33554462)
    ; (a === d33554462) &&& (b === iq33554451)
    ; (a === d33554462) &&& (b === im33554447)
    ; (a === d33554462) &&& (b === il33554446)
    ; (a === d33554462) &&& (b === object33554493)
    ; (a === iq33554451) &&& (b === iq33554451)
    ; (a === iq33554451) &&& (b === object33554493)
    ; (a === im33554447) &&& (b === im33554447)
    ; (a === im33554447) &&& (b === object33554493)
    ; (a === il33554446) &&& (b === il33554446)
    ; (a === il33554446) &&& (b === object33554493)
    ; (a === l33554467) &&& (b === a33554459)
    ; (a === l33554467) &&& (b === b33554460)
    ; (a === l33554467) &&& (b === ik33554445)
    ; (a === l33554467) &&& (b === if33554441)
    ; (a === l33554467) &&& (b === ie33554440)
    ; (a === l33554467) &&& (b === c33554461)
    ; (a === l33554467) &&& (b === iq33554451)
    ; (a === l33554467) &&& (b === l33554467)
    ; (a === l33554467) &&& (b === e33554463)
    ; (a === l33554467) &&& (b === ih33554443)
    ; (a === l33554467) &&& (b === ig33554442)
    ; (a === l33554467) &&& (b === object33554493)
    ; (a === e33554463) &&& (b === a33554459)
    ; (a === e33554463) &&& (b === b33554460)
    ; (a === e33554463) &&& (b === ik33554445)
    ; (a === e33554463) &&& (b === if33554441)
    ; (a === e33554463) &&& (b === ie33554440)
    ; (a === e33554463) &&& (b === c33554461)
    ; (a === e33554463) &&& (b === iq33554451)
    ; (a === e33554463) &&& (b === e33554463)
    ; (a === e33554463) &&& (b === ih33554443)
    ; (a === e33554463) &&& (b === ig33554442)
    ; (a === e33554463) &&& (b === object33554493)
    ; (a === ih33554443) &&& (b === ih33554443)
    ; (a === ih33554443) &&& (b === object33554493)
    ; (a === ig33554442) &&& (b === ig33554442)
    ; (a === ig33554442) &&& (b === object33554493)
    ; fresh (c) 
       (a === h33554464) 
       (b === ia33554436 c) 
       (subtype (ia33554436 k33554466) (ia33554436 c))
    ; (a === h33554464) &&& (b === a33554459)
    ; (a === h33554464) &&& (b === b33554460)
    ; (a === h33554464) &&& (b === ik33554445)
    ; (a === h33554464) &&& (b === if33554441)
    ; (a === h33554464) &&& (b === ie33554440)
    ; (a === h33554464) &&& (b === c33554461)
    ; (a === h33554464) &&& (b === d33554462)
    ; (a === h33554464) &&& (b === iq33554451)
    ; (a === h33554464) &&& (b === im33554447)
    ; (a === h33554464) &&& (b === il33554446)
    ; (a === h33554464) &&& (b === h33554464)
    ; (a === h33554464) &&& (b === object33554493)
    ; (a === k33554466) &&& (b === a33554459)
    ; (a === k33554466) &&& (b === b33554460)
    ; (a === k33554466) &&& (b === ik33554445)
    ; (a === k33554466) &&& (b === if33554441)
    ; (a === k33554466) &&& (b === ie33554440)
    ; (a === k33554466) &&& (b === c33554461)
    ; (a === k33554466) &&& (b === iq33554451)
    ; (a === k33554466) &&& (b === e33554463)
    ; (a === k33554466) &&& (b === ih33554443)
    ; (a === k33554466) &&& (b === ig33554442)
    ; (a === k33554466) &&& (b === k33554466)
    ; (a === k33554466) &&& (b === object33554493)
    ; (a === object33554493) &&& (b === object33554493)
    ]
end

open Timeout 
let max_timeout = 20.0
let () =
   let my_reify r = r#reify term_reify in
   let stream =
      let open OCanren  in
      let open OCanren.Std in
      run (succ (succ (succ one)))
      (fun a b c d -> (not_subtype a (ia33554436 b)) &&& (not_subtype c (ia33554436 h33554464)) &&& (not_subtype c (ia33554436 b)) &&& (not_subtype d (ia33554436 i33554465)))
      (fun a b c d -> (my_reify a,my_reify b,my_reify c,my_reify d))
   in
   let start = Mtime_clock.counter () in
   try
      let answers = with_timeout max_timeout (fun () -> OCanren.Stream.take ~n:1 stream) in
      let span = Mtime_clock.count start in
      Printf.printf "Time: %f s\n%!" (Mtime.Span.to_s span);
      match answers with
      | [] -> print_endline "no answers"
      | [((a,b,c,d))] ->
         Format.printf "(%a,%a,%a,%a)\n%!" pp_term_logic a pp_term_logic b pp_term_logic c pp_term_logic d
      | _ -> failwith "should not happen"
   with Timeout -> Format.printf "Timeout after %f s\n%!" max_timeout
