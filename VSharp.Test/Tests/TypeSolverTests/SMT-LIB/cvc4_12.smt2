(set-option :produce-models true)
(set-option :finite-model-find true)
(set-option :tlimit-per 20000)
(declare-sort Type 0)
(declare-fun ibox33554489 (Type)Type)
(declare-const thing33554490 Type)
(declare-const object33554493 Type)
(declare-fun covariant_subtype (Type Type) Bool)
(declare-fun contravariant_subtype (Type Type) Bool)
(declare-fun subtype (Type Type) Bool)
(declare-fun is_reference (Type) Bool)
(declare-fun is_valuetype (Type) Bool)
(declare-fun is_unmanaged (Type) Bool)
(declare-fun default_constructor (Type) Bool)
(assert(default_constructor object33554493))
(assert(default_constructor thing33554490))
(assert(forall((a Type) (b Type)) (=> (and (= a b) (is_valuetype a)) (covariant_subtype a b))))
(assert(forall((a Type) (b Type)) (=> (and (is_reference a) (not(subtype a b))) (not(covariant_subtype a b)))))
(assert(forall((a Type) (b Type)) (=> (and (is_reference a) (subtype a b)) (covariant_subtype a b))))
(assert(forall((a Type) (b Type)) (=> (and (not(= a b)) (is_valuetype a)) (not(covariant_subtype a b)))))
(assert(forall((a Type) (b Type)) (=> (contravariant_subtype a b) (subtype (ibox33554489 a) (ibox33554489 b)))))
(assert(forall((a Type) (b Type)) (=> (not(contravariant_subtype a b)) (not(subtype (ibox33554489 a) (ibox33554489 b))))))
(assert(forall((a Type)) (=> (not(subtype (ibox33554489 (ibox33554489 thing33554490)) (ibox33554489 a))) (not(subtype thing33554490 (ibox33554489 a))))))
(assert(forall((a Type)) (=> (subtype (ibox33554489 (ibox33554489 thing33554490)) (ibox33554489 a)) (subtype thing33554490 (ibox33554489 a)))))
(assert(forall((a Type)) (=> false (is_unmanaged a))))
(assert(forall((a Type)) (=> false (is_valuetype a))))
(assert(forall((a Type)) (is_reference (ibox33554489 a))))
(assert(forall((a Type)) (not(subtype (ibox33554489 a) thing33554490))))
(assert(forall((a Type)) (not(subtype object33554493 (ibox33554489 a)))))
(assert(forall((a Type)) (subtype (ibox33554489 a) object33554493)))
(assert(forall((b Type) (a Type)) (=> (and (= b a) (is_valuetype b)) (contravariant_subtype a b))))
(assert(forall((b Type) (a Type)) (=> (and (is_reference b) (not(subtype b a))) (not(contravariant_subtype a b)))))
(assert(forall((b Type) (a Type)) (=> (and (is_reference b) (subtype b a)) (contravariant_subtype a b))))
(assert(forall((b Type) (a Type)) (=> (and (not(= b a)) (is_valuetype b)) (not(contravariant_subtype a b)))))
(assert(is_reference object33554493))
(assert(is_reference thing33554490))
(assert(not(subtype object33554493 thing33554490)))
(assert(subtype object33554493 object33554493))
(assert(subtype thing33554490 object33554493))
(assert(subtype thing33554490 thing33554490))
(assert(forall((a Type)) (not (not(subtype a (ibox33554489 thing33554490))))))
(check-sat)
(get-model)
