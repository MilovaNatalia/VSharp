(set-option :produce-models true)
(set-option :finite-model-find true)
(set-option :tlimit-per 20000)
(declare-sort Type 0)
(declare-fun rec33554487 (Type)Type)
(declare-fun mutualrec33554488 (Type Type)Type)
(declare-const object33554493 Type)
(declare-fun covariant_subtype (Type Type) Bool)
(declare-fun contravariant_subtype (Type Type) Bool)
(declare-fun subtype (Type Type) Bool)
(declare-fun is_reference (Type) Bool)
(declare-fun is_valuetype (Type) Bool)
(declare-fun is_unmanaged (Type) Bool)
(declare-fun default_constructor (Type) Bool)
(assert(default_constructor object33554493))
(assert(forall((a Type) (b Type) (c Type) (d Type)) (=> (and (subtype a (rec33554487 b)) (subtype b (rec33554487 a)) (not(= a c))) (not(subtype (mutualrec33554488 a b) (mutualrec33554488 c d))))))
(assert(forall((a Type) (b Type) (c Type)) (not(subtype (mutualrec33554488 a b) (rec33554487 c)))))
(assert(forall((a Type) (b Type) (c Type)) (not(subtype (rec33554487 a) (mutualrec33554488 b c)))))
(assert(forall((a Type) (b Type) (d Type) (c Type)) (=> (and (subtype a (rec33554487 b)) (subtype b (rec33554487 a)) (not(= b d))) (not(subtype (mutualrec33554488 a b) (mutualrec33554488 c d))))))
(assert(forall((a Type) (b Type)) (=> (= a b) (subtype (rec33554487 a) (rec33554487 b)))))
(assert(forall((a Type) (b Type)) (=> (and (= a b) (is_valuetype a)) (covariant_subtype a b))))
(assert(forall((a Type) (b Type)) (=> (and (is_reference a) (not(subtype a b))) (not(covariant_subtype a b)))))
(assert(forall((a Type) (b Type)) (=> (and (is_reference a) (subtype a b)) (covariant_subtype a b))))
(assert(forall((a Type) (b Type)) (=> (and (not(= a b)) (is_valuetype a)) (not(covariant_subtype a b)))))
(assert(forall((a Type) (b Type)) (=> (not(= a b)) (not(subtype (rec33554487 a) (rec33554487 b))))))
(assert(forall((a Type) (b Type)) (default_constructor (mutualrec33554488 a b))))
(assert(forall((a Type) (b Type)) (is_reference (mutualrec33554488 a b))))
(assert(forall((a Type) (b Type)) (not(subtype object33554493 (mutualrec33554488 a b)))))
(assert(forall((a Type) (b Type)) (subtype (mutualrec33554488 a b) object33554493)))
(assert(forall((a Type) (c Type) (b Type) (d Type)) (=> (and (= a c) (= b d) (subtype a (rec33554487 b)) (subtype b (rec33554487 a))) (subtype (mutualrec33554488 a b) (mutualrec33554488 c d)))))
(assert(forall((a Type)) (=> false (is_unmanaged a))))
(assert(forall((a Type)) (=> false (is_valuetype a))))
(assert(forall((a Type)) (default_constructor (rec33554487 a))))
(assert(forall((a Type)) (is_reference (rec33554487 a))))
(assert(forall((a Type)) (not(subtype object33554493 (rec33554487 a)))))
(assert(forall((a Type)) (subtype (rec33554487 a) object33554493)))
(assert(forall((b Type) (a Type)) (=> (and (= b a) (is_valuetype b)) (contravariant_subtype a b))))
(assert(forall((b Type) (a Type)) (=> (and (is_reference b) (not(subtype b a))) (not(contravariant_subtype a b)))))
(assert(forall((b Type) (a Type)) (=> (and (is_reference b) (subtype b a)) (contravariant_subtype a b))))
(assert(forall((b Type) (a Type)) (=> (and (not(= b a)) (is_valuetype b)) (not(contravariant_subtype a b)))))
(assert(is_reference object33554493))
(assert(subtype object33554493 object33554493))
(assert(forall((a Type) (b Type) (c Type) (d Type)) (not (and (subtype a (mutualrec33554488 b c)) (subtype d (mutualrec33554488 b c)) (subtype b (rec33554487 c)) (subtype c (rec33554487 b))))))
(check-sat)
(get-model)
